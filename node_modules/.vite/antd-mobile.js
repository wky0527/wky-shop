import {
  _assertThisInitialized,
  _asyncToGenerator,
  _classCallCheck,
  _createClass,
  _createSuper,
  _inherits,
  _toConsumableArray,
  es_default3 as es_default,
  get,
  require_eq,
  require_getNative,
  require_isArrayLike,
  require_isIndex,
  require_isObject,
  require_isPrototype,
  require_keys,
  require_regenerator,
  set,
  toArray
} from "./chunk-A2CZIQBM.js";
import {
  _defineProperty,
  _objectSpread2,
  _objectWithoutProperties,
  _slicedToArray,
  _typeof,
  require_classnames,
  warning_default
} from "./chunk-VV7RQXLE.js";
import {
  require_react_dom
} from "./chunk-5EKBLUKQ.js";
import {
  _extends
} from "./chunk-TV6ACLDS.js";
import "./chunk-YM7SARSX.js";
import {
  AddOutline_default,
  CheckCircleFill_default,
  CheckOutline_default,
  ClockCircleFill_default,
  CloseCircleFill_default,
  CloseOutline_default,
  DownOutline_default,
  ExclamationCircleFill_default,
  EyeInvisibleOutline_default,
  EyeOutline_default,
  InformationCircleFill_default,
  LeftOutline_default,
  MinusOutline_default,
  PictureOutline_default,
  PictureWrongOutline_default,
  RightOutline_default,
  SearchOutline_default,
  SoundOutline_default,
  StarFill_default,
  TextDeletionOutline_default
} from "./chunk-2APQNDKM.js";
import {
  require_react
} from "./chunk-TMHN62TJ.js";
import {
  __commonJS,
  __toModule,
  define_process_env_default,
  init_define_process_env
} from "./chunk-OH3EJ6QK.js";

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    init_define_process_env();
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array4, setter, iteratee, accumulator) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        while (++index < length) {
          var value = array4[index];
          setter(accumulator, value, iteratee(value), array4);
        }
        return accumulator;
      }
      function arrayEach(array4, iteratee) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        while (++index < length) {
          if (iteratee(array4[index], index, array4) === false) {
            break;
          }
        }
        return array4;
      }
      function arrayEachRight(array4, iteratee) {
        var length = array4 == null ? 0 : array4.length;
        while (length--) {
          if (iteratee(array4[length], length, array4) === false) {
            break;
          }
        }
        return array4;
      }
      function arrayEvery(array4, predicate) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        while (++index < length) {
          if (!predicate(array4[index], index, array4)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array4, predicate) {
        var index = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array4[index];
          if (predicate(value, index, array4)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array4, value) {
        var length = array4 == null ? 0 : array4.length;
        return !!length && baseIndexOf(array4, value, 0) > -1;
      }
      function arrayIncludesWith(array4, value, comparator) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        while (++index < length) {
          if (comparator(value, array4[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array4, iteratee) {
        var index = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array4[index], index, array4);
        }
        return result;
      }
      function arrayPush(array4, values) {
        var index = -1, length = values.length, offset = array4.length;
        while (++index < length) {
          array4[offset + index] = values[index];
        }
        return array4;
      }
      function arrayReduce(array4, iteratee, accumulator, initAccum) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        if (initAccum && length) {
          accumulator = array4[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array4[index], index, array4);
        }
        return accumulator;
      }
      function arrayReduceRight(array4, iteratee, accumulator, initAccum) {
        var length = array4 == null ? 0 : array4.length;
        if (initAccum && length) {
          accumulator = array4[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array4[length], length, array4);
        }
        return accumulator;
      }
      function arraySome(array4, predicate) {
        var index = -1, length = array4 == null ? 0 : array4.length;
        while (++index < length) {
          if (predicate(array4[index], index, array4)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string3) {
        return string3.split("");
      }
      function asciiWords(string3) {
        return string3.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array4, predicate, fromIndex, fromRight) {
        var length = array4.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array4[index], index, array4)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array4, value, fromIndex) {
        return value === value ? strictIndexOf(array4, value, fromIndex) : baseFindIndex(array4, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array4, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array4.length;
        while (++index < length) {
          if (comparator(array4[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array4, iteratee) {
        var length = array4 == null ? 0 : array4.length;
        return length ? baseSum(array4, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object4) {
          return object4 == null ? undefined2 : object4[key];
        };
      }
      function basePropertyOf(object4) {
        return function(key) {
          return object4 == null ? undefined2 : object4[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array4, comparer) {
        var length = array4.length;
        array4.sort(comparer);
        while (length--) {
          array4[length] = array4[length].value;
        }
        return array4;
      }
      function baseSum(array4, iteratee) {
        var result, index = -1, length = array4.length;
        while (++index < length) {
          var current = iteratee(array4[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object4, props) {
        return arrayMap(props, function(key) {
          return [key, object4[key]];
        });
      }
      function baseTrim(string3) {
        return string3 ? string3.slice(0, trimmedEndIndex(string3) + 1).replace(reTrimStart, "") : string3;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object4, props) {
        return arrayMap(props, function(key) {
          return object4[key];
        });
      }
      function cacheHas(cache2, key) {
        return cache2.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array4, placeholder) {
        var length = array4.length, result = 0;
        while (length--) {
          if (array4[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue3(object4, key) {
        return object4 == null ? undefined2 : object4[key];
      }
      function hasUnicode(string3) {
        return reHasUnicode.test(string3);
      }
      function hasUnicodeWord(string3) {
        return reHasUnicodeWord.test(string3);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array4, placeholder) {
        var index = -1, length = array4.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array4[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array4[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array4, value, fromIndex) {
        var index = fromIndex - 1, length = array4.length;
        while (++index < length) {
          if (array4[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array4, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array4[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string3) {
        return hasUnicode(string3) ? unicodeSize(string3) : asciiSize(string3);
      }
      function stringToArray(string3) {
        return hasUnicode(string3) ? unicodeToArray(string3) : asciiToArray(string3);
      }
      function trimmedEndIndex(string3) {
        var index = string3.length;
        while (index-- && reWhitespace.test(string3.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string3) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string3)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string3) {
        return string3.match(reUnicode) || [];
      }
      function unicodeWords(string3) {
        return string3.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object4() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object4.prototype = proto;
            var result2 = new object4();
            object4.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array4 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array4), isRight = dir < 0, arrLength = isArr ? array4.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end = view.end, length = end - start2, index = isRight ? end : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array4, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array4[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type4 = data.type, computed = iteratee2(value);
                if (type4 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type4 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array4) {
          var length = array4.length;
          return length ? array4[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array4, n) {
          return shuffleSelf(copyArray(array4), baseClamp(n, 0, array4.length));
        }
        function arrayShuffle(array4) {
          return shuffleSelf(copyArray(array4));
        }
        function assignMergeValue(object4, key, value) {
          if (value !== undefined2 && !eq(object4[key], value) || value === undefined2 && !(key in object4)) {
            baseAssignValue(object4, key, value);
          }
        }
        function assignValue(object4, key, value) {
          var objValue = object4[key];
          if (!(hasOwnProperty.call(object4, key) && eq(objValue, value)) || value === undefined2 && !(key in object4)) {
            baseAssignValue(object4, key, value);
          }
        }
        function assocIndexOf(array4, key) {
          var length = array4.length;
          while (length--) {
            if (eq(array4[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object4, source) {
          return object4 && copyObject(source, keys(source), object4);
        }
        function baseAssignIn(object4, source) {
          return object4 && copyObject(source, keysIn(source), object4);
        }
        function baseAssignValue(object4, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object4, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object4[key] = value;
          }
        }
        function baseAt(object4, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object4 == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get2(object4, paths[index]);
          }
          return result2;
        }
        function baseClamp(number4, lower, upper) {
          if (number4 === number4) {
            if (upper !== undefined2) {
              number4 = number4 <= upper ? number4 : upper;
            }
            if (lower !== undefined2) {
              number4 = number4 >= lower ? number4 : lower;
            }
          }
          return number4;
        }
        function baseClone(value, bitmask, customizer, key, object4, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object4 ? customizer(value, key, object4, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object4) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object4 ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object4) {
            return baseConformsTo(object4, source, props);
          };
        }
        function baseConformsTo(object4, source, props) {
          var length = props.length;
          if (object4 == null) {
            return !length;
          }
          object4 = Object2(object4);
          while (length--) {
            var key = props[length], predicate = source[key], value = object4[key];
            if (value === undefined2 && !(key in object4) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array4, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array4.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array4[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array4, iteratee2, comparator) {
          var index = -1, length = array4.length;
          while (++index < length) {
            var value = array4[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array4, value, start2, end) {
          var length = array4.length;
          start2 = toInteger(start2);
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start2 > end ? 0 : toLength(end);
          while (start2 < end) {
            array4[start2++] = value;
          }
          return array4;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array4, depth, predicate, isStrict, result2) {
          var index = -1, length = array4.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array4[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object4, iteratee2) {
          return object4 && baseFor(object4, iteratee2, keys);
        }
        function baseForOwnRight(object4, iteratee2) {
          return object4 && baseForRight(object4, iteratee2, keys);
        }
        function baseFunctions(object4, props) {
          return arrayFilter(props, function(key) {
            return isFunction3(object4[key]);
          });
        }
        function baseGet(object4, path) {
          path = castPath(path, object4);
          var index = 0, length = path.length;
          while (object4 != null && index < length) {
            object4 = object4[toKey(path[index++])];
          }
          return index && index == length ? object4 : undefined2;
        }
        function baseGetAllKeys(object4, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object4);
          return isArray(object4) ? result2 : arrayPush(result2, symbolsFunc(object4));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object4, key) {
          return object4 != null && hasOwnProperty.call(object4, key);
        }
        function baseHasIn(object4, key) {
          return object4 != null && key in Object2(object4);
        }
        function baseInRange(number4, start2, end) {
          return number4 >= nativeMin(start2, end) && number4 < nativeMax(start2, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array4 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array4 = arrayMap(array4, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array4.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array4.length >= 120) ? new SetCache(othIndex && array4) : undefined2;
          }
          array4 = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array4[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache2 = caches[othIndex];
                  if (!(cache2 ? cacheHas(cache2, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object4, setter, iteratee2, accumulator) {
          baseForOwn(object4, function(value, key, object5) {
            setter(accumulator, iteratee2(value), key, object5);
          });
          return accumulator;
        }
        function baseInvoke(object4, path, args) {
          path = castPath(path, object4);
          object4 = parent(object4, path);
          var func = object4 == null ? object4 : object4[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object4, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object4, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object4), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object4), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object4)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object4) ? equalArrays(object4, other, bitmask, customizer, equalFunc, stack) : equalByTag(object4, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object4, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object4.value() : object4, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object4, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object4, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object4 == null) {
            return !length;
          }
          object4 = Object2(object4);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object4[data[0]] : !(data[0] in object4)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object4[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object4)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object4, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern4 = isFunction3(value) ? reIsNative : reIsHostCtor;
          return pattern4.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object4) {
          if (!isPrototype(object4)) {
            return nativeKeys(object4);
          }
          var result2 = [];
          for (var key in Object2(object4)) {
            if (hasOwnProperty.call(object4, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object4) {
          if (!isObject2(object4)) {
            return nativeKeysIn(object4);
          }
          var isProto = isPrototype(object4), result2 = [];
          for (var key in object4) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object4, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object4) {
            return object4 === source || baseIsMatch(object4, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object4) {
            var objValue = get2(object4, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object4, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object4, source, srcIndex, customizer, stack) {
          if (object4 === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object4, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object4, key), srcValue, key + "", object4, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object4, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object4, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object4, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object4, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object4, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction3(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object4, key, newValue);
        }
        function baseNth(array4, n) {
          var length = array4.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array4[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity2];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object4, other) {
            return compareMultiple(object4, other, orders);
          });
        }
        function basePick(object4, paths) {
          return basePickBy(object4, paths, function(value, path) {
            return hasIn(object4, path);
          });
        }
        function basePickBy(object4, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object4, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object4), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object4) {
            return baseGet(object4, path);
          };
        }
        function basePullAll(array4, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array4;
          if (array4 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array4, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array4) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array4, fromIndex, 1);
            }
          }
          return array4;
        }
        function basePullAt(array4, indexes) {
          var length = array4 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array4, index, 1);
              } else {
                baseUnset(array4, index);
              }
            }
          }
          return array4;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start2, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start2) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start2;
            start2 += step;
          }
          return result2;
        }
        function baseRepeat(string3, n) {
          var result2 = "";
          if (!string3 || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string3;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string3 += string3;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start2) {
          return setToString(overRest(func, start2, identity2), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array4 = values(collection);
          return shuffleSelf(array4, baseClamp(n, 0, array4.length));
        }
        function baseSet(object4, path, value, customizer) {
          if (!isObject2(object4)) {
            return object4;
          }
          path = castPath(path, object4);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object4;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object4;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object4;
        }
        var baseSetData = !metaMap ? identity2 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity2 : function(func, string3) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string3),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array4, start2, end) {
          var index = -1, length = array4.length;
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start2 > end ? 0 : end - start2 >>> 0;
          start2 >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array4[index + start2];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array4, value, retHighest) {
          var low = 0, high = array4 == null ? low : array4.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array4[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array4, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array4, value, iteratee2, retHighest) {
          var low = 0, high = array4 == null ? 0 : array4.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array4[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array4, iteratee2) {
          var index = -1, length = array4.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array4[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array4, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array4.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set3 = iteratee2 ? null : createSet(array4);
            if (set3) {
              return setToArray(set3);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array4[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object4, path) {
          path = castPath(path, object4);
          object4 = parent(object4, path);
          return object4 == null || delete object4[toKey(last(path))];
        }
        function baseUpdate(object4, path, updater, customizer) {
          return baseSet(object4, path, updater(baseGet(object4, path)), customizer);
        }
        function baseWhile(array4, predicate, isDrop, fromRight) {
          var length = array4.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array4[index], index, array4)) {
          }
          return isDrop ? baseSlice(array4, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array4, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array4 = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array4, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity2;
        }
        function castPath(value, object4) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object4) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array4, start2, end) {
          var length = array4.length;
          end = end === undefined2 ? length : end;
          return !start2 && end >= length ? array4 : baseSlice(array4, start2, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp4) {
          var result2 = new regexp4.constructor(regexp4.source, reFlags.exec(regexp4));
          result2.lastIndex = regexp4.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object4, other, orders) {
          var index = -1, objCriteria = object4.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object4.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array4) {
          var index = -1, length = source.length;
          array4 || (array4 = Array2(length));
          while (++index < length) {
            array4[index] = source[index];
          }
          return array4;
        }
        function copyObject(source, props, object4, customizer) {
          var isNew = !object4;
          object4 || (object4 = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object4[key], source[key], key, object4, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object4, key, newValue);
            } else {
              assignValue(object4, key, newValue);
            }
          }
          return object4;
        }
        function copySymbols(source, object4) {
          return copyObject(source, getSymbols(source), object4);
        }
        function copySymbolsIn(source, object4) {
          return copyObject(source, getSymbolsIn(source), object4);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object4, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object4 = Object2(object4);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object4, source, index, customizer);
              }
            }
            return object4;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object4, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object4), props = keysFunc(object4), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object4;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string3) {
            string3 = toString(string3);
            var strSymbols = hasUnicode(string3) ? stringToArray(string3) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string3.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string3.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string3) {
            return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object4, iteratee2) {
            return baseInverter(object4, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start2, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start2, end, step)) {
              end = step = undefined2;
            }
            start2 = toFinite(start2);
            if (end === undefined2) {
              end = start2;
              start2 = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start2 < end ? 1 : -1 : toFinite(step);
            return baseRange(start2, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number4, precision) {
            number4 = toNumber(number4);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number4)) {
              var pair = (toString(number4) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number4);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object4) {
            var tag = getTag(object4);
            if (tag == mapTag) {
              return mapToArray(object4);
            }
            if (tag == setTag) {
              return setToPairs(object4);
            }
            return baseToPairs(object4, keysFunc(object4));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object4) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object4, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object4, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array4.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array4);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array4;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array4, other);
          stack.set(other, array4);
          while (++index < arrLength) {
            var arrValue = array4[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array4, stack) : customizer(arrValue, othValue, index, array4, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array4);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object4, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object4.byteLength != other.byteLength || object4.byteOffset != other.byteOffset) {
                return false;
              }
              object4 = object4.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object4.byteLength != other.byteLength || !equalFunc(new Uint8Array(object4), new Uint8Array(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object4, +other);
            case errorTag:
              return object4.name == other.name && object4.message == other.message;
            case regexpTag:
            case stringTag:
              return object4 == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object4.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object4);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object4, other);
              var result2 = equalArrays(convert(object4), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object4);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object4) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object4, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object4), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object4);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object4;
          }
          var result2 = true;
          stack.set(object4, other);
          stack.set(other, object4);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object4[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object4, stack) : customizer(objValue, othValue, key, object4, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object4.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object4 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object4);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object4) {
          return baseGetAllKeys(object4, keys, getSymbols);
        }
        function getAllKeysIn(object4) {
          return baseGetAllKeys(object4, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop3 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array4 = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array4.length : 0;
          while (length--) {
            var data = array4[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object4 = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object4.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object4) {
          var result2 = keys(object4), length = result2.length;
          while (length--) {
            var key = result2[length], value = object4[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object4, key) {
          var value = getValue3(object4, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object4) {
          if (object4 == null) {
            return [];
          }
          object4 = Object2(object4);
          return arrayFilter(nativeGetSymbols(object4), function(symbol) {
            return propertyIsEnumerable.call(object4, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object4) {
          var result2 = [];
          while (object4) {
            arrayPush(result2, getSymbols(object4));
            object4 = getPrototype(object4);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start2, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start2 += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start2 + size2);
                break;
              case "takeRight":
                start2 = nativeMax(start2, end - size2);
                break;
            }
          }
          return { "start": start2, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object4, path, hasFunc) {
          path = castPath(path, object4);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object4 != null && hasFunc(object4, key))) {
              break;
            }
            object4 = object4[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object4 == null ? 0 : object4.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object4) || isArguments(object4));
        }
        function initCloneArray(array4) {
          var length = array4.length, result2 = new array4.constructor(length);
          if (length && typeof array4[0] == "string" && hasOwnProperty.call(array4, "index")) {
            result2.index = array4.index;
            result2.input = array4.input;
          }
          return result2;
        }
        function initCloneObject(object4) {
          return typeof object4.constructor == "function" && !isPrototype(object4) ? baseCreate(getPrototype(object4)) : {};
        }
        function initCloneByTag(object4, tag, isDeep) {
          var Ctor = object4.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object4);
            case boolTag:
            case dateTag:
              return new Ctor(+object4);
            case dataViewTag:
              return cloneDataView(object4, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object4, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object4);
            case regexpTag:
              return cloneRegExp(object4);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object4);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type4 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type4 == "number" || type4 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object4) {
          if (!isObject2(object4)) {
            return false;
          }
          var type4 = typeof index;
          if (type4 == "number" ? isArrayLike(object4) && isIndex(index, object4.length) : type4 == "string" && index in object4) {
            return eq(object4[index], value);
          }
          return false;
        }
        function isKey(value, object4) {
          if (isArray(value)) {
            return false;
          }
          var type4 = typeof value;
          if (type4 == "number" || type4 == "symbol" || type4 == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object4 != null && value in Object2(object4);
        }
        function isKeyable(value) {
          var type4 = typeof value;
          return type4 == "string" || type4 == "number" || type4 == "symbol" || type4 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction3 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object4) {
            if (object4 == null) {
              return false;
            }
            return object4[key] === srcValue && (srcValue !== undefined2 || key in Object2(object4));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize2(func, function(key) {
            if (cache2.size === MAX_MEMOIZE_SIZE) {
              cache2.clear();
            }
            return key;
          });
          var cache2 = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object4) {
          var result2 = [];
          if (object4 != null) {
            for (var key in Object2(object4)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start2, transform2) {
          start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array4 = Array2(length);
            while (++index < length) {
              array4[index] = args[start2 + index];
            }
            index = -1;
            var otherArgs = Array2(start2 + 1);
            while (++index < start2) {
              otherArgs[index] = args[index];
            }
            otherArgs[start2] = transform2(array4);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object4, path) {
          return path.length < 2 ? object4 : baseGet(object4, baseSlice(path, 0, -1));
        }
        function reorder(array4, indexes) {
          var arrLength = array4.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array4);
          while (length--) {
            var index = indexes[length];
            array4[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array4;
        }
        function safeGet(object4, key) {
          if (key === "constructor" && typeof object4[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object4[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array4, size2) {
          var index = -1, length = array4.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array4[rand];
            array4[rand] = array4[index];
            array4[index] = value;
          }
          array4.length = size2;
          return array4;
        }
        var stringToPath = memoizeCapped(function(string3) {
          var result2 = [];
          if (string3.charCodeAt(0) === 46) {
            result2.push("");
          }
          string3.replace(rePropName, function(match, number4, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number4 || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array4, size2, guard) {
          if (guard ? isIterateeCall(array4, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array4 == null ? 0 : array4.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array4, index, index += size2);
          }
          return result2;
        }
        function compact(array4) {
          var index = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array4[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array4 = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array4) ? copyArray(array4) : [array4], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array4, values2) {
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array4, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array4, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array4) ? baseDifference(array4, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array4, n, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array4, n < 0 ? 0 : n, length);
        }
        function dropRight(array4, n, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array4, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), true) : [];
        }
        function fill(array4, value, start2, end) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          if (start2 && typeof start2 != "number" && isIterateeCall(array4, value, start2)) {
            start2 = 0;
            end = length;
          }
          return baseFill(array4, value, start2, end);
        }
        function findIndex2(array4, predicate, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array4, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array4, predicate, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array4, getIteratee(predicate, 3), index, true);
        }
        function flatten(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseFlatten(array4, 1) : [];
        }
        function flattenDeep(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseFlatten(array4, INFINITY) : [];
        }
        function flattenDepth(array4, depth) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array4, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array4) {
          return array4 && array4.length ? array4[0] : undefined2;
        }
        function indexOf(array4, value, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array4, value, index);
        }
        function initial(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseSlice(array4, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array4, separator) {
          return array4 == null ? "" : nativeJoin.call(array4, separator);
        }
        function last(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? array4[length - 1] : undefined2;
        }
        function lastIndexOf(array4, value, fromIndex) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array4, value, index) : baseFindIndex(array4, baseIsNaN, index, true);
        }
        function nth(array4, n) {
          return array4 && array4.length ? baseNth(array4, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array4, values2) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2) : array4;
        }
        function pullAllBy(array4, values2, iteratee2) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2, getIteratee(iteratee2, 2)) : array4;
        }
        function pullAllWith(array4, values2, comparator) {
          return array4 && array4.length && values2 && values2.length ? basePullAll(array4, values2, undefined2, comparator) : array4;
        }
        var pullAt = flatRest(function(array4, indexes) {
          var length = array4 == null ? 0 : array4.length, result2 = baseAt(array4, indexes);
          basePullAt(array4, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array4, predicate) {
          var result2 = [];
          if (!(array4 && array4.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array4.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array4[index];
            if (predicate(value, index, array4)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array4, indexes);
          return result2;
        }
        function reverse(array4) {
          return array4 == null ? array4 : nativeReverse.call(array4);
        }
        function slice(array4, start2, end) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array4, start2, end)) {
            start2 = 0;
            end = length;
          } else {
            start2 = start2 == null ? 0 : toInteger(start2);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array4, start2, end);
        }
        function sortedIndex(array4, value) {
          return baseSortedIndex(array4, value);
        }
        function sortedIndexBy(array4, value, iteratee2) {
          return baseSortedIndexBy(array4, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array4, value) {
          var length = array4 == null ? 0 : array4.length;
          if (length) {
            var index = baseSortedIndex(array4, value);
            if (index < length && eq(array4[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array4, value) {
          return baseSortedIndex(array4, value, true);
        }
        function sortedLastIndexBy(array4, value, iteratee2) {
          return baseSortedIndexBy(array4, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array4, value) {
          var length = array4 == null ? 0 : array4.length;
          if (length) {
            var index = baseSortedIndex(array4, value, true) - 1;
            if (eq(array4[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array4) {
          return array4 && array4.length ? baseSortedUniq(array4) : [];
        }
        function sortedUniqBy(array4, iteratee2) {
          return array4 && array4.length ? baseSortedUniq(array4, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array4) {
          var length = array4 == null ? 0 : array4.length;
          return length ? baseSlice(array4, 1, length) : [];
        }
        function take(array4, n, guard) {
          if (!(array4 && array4.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array4, 0, n < 0 ? 0 : n);
        }
        function takeRight(array4, n, guard) {
          var length = array4 == null ? 0 : array4.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array4, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array4, predicate) {
          return array4 && array4.length ? baseWhile(array4, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array4) {
          return array4 && array4.length ? baseUniq(array4) : [];
        }
        function uniqBy(array4, iteratee2) {
          return array4 && array4.length ? baseUniq(array4, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array4, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array4 && array4.length ? baseUniq(array4, undefined2, comparator) : [];
        }
        function unzip(array4) {
          if (!(array4 && array4.length)) {
            return [];
          }
          var length = 0;
          array4 = arrayFilter(array4, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array4, baseProperty(index));
          });
        }
        function unzipWith(array4, iteratee2) {
          if (!(array4 && array4.length)) {
            return [];
          }
          var result2 = unzip(array4);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array4, values2) {
          return isArrayLikeObject(array4) ? baseDifference(array4, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain2(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start2 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object4) {
            return baseAt(object4, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
            return this.thru(interceptor);
          }
          value = value.slice(start2, +start2 + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array4) {
            if (length && !array4.length) {
              array4.push(undefined2);
            }
            return array4;
          });
        });
        function wrapperChain() {
          return chain2(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray5(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex2);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle2(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object4, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object4, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce3(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush2() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush2;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize2(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
            if (cache2.has(key)) {
              return cache2.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache2.set(key, result2) || cache2;
            return result2;
          };
          memoized.cache = new (memoize2.Cache || MapCache)();
          return memoized;
        }
        memoize2.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once2(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 === undefined2 ? start2 : toInteger(start2);
          return baseRest(func, start2);
        }
        function spread(func, start2) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
          return baseRest(function(args) {
            var array4 = args[start2], otherArgs = castSlice(args, 0, start2);
            if (array4) {
              arrayPush(otherArgs, array4);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle3(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce3(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep2(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object4, source) {
          return source == null || baseConformsTo(object4, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction3(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement2(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction3(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type4 = typeof value;
          return value != null && (type4 == "object" || type4 == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object4, source) {
          return object4 === source || baseIsMatch(object4, source, getMatchData(source));
        }
        function isMatchWith(object4, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object4, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray5(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign3 = createAssigner(function(object4, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object4);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object4, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object4, source) {
          copyObject(source, keysIn(source), object4);
        });
        var assignInWith = createAssigner(function(object4, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object4, customizer);
        });
        var assignWith2 = createAssigner(function(object4, source, srcIndex, customizer) {
          copyObject(source, keys(source), object4, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults2 = baseRest(function(object4, sources) {
          object4 = Object2(object4);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object4[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object4, key)) {
                object4[key] = source[key];
              }
            }
          }
          return object4;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object4, predicate) {
          return baseFindKey(object4, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object4, predicate) {
          return baseFindKey(object4, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object4, iteratee2) {
          return object4 == null ? object4 : baseFor(object4, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object4, iteratee2) {
          return object4 == null ? object4 : baseForRight(object4, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object4, iteratee2) {
          return object4 && baseForOwn(object4, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object4, iteratee2) {
          return object4 && baseForOwnRight(object4, getIteratee(iteratee2, 3));
        }
        function functions(object4) {
          return object4 == null ? [] : baseFunctions(object4, keys(object4));
        }
        function functionsIn(object4) {
          return object4 == null ? [] : baseFunctions(object4, keysIn(object4));
        }
        function get2(object4, path, defaultValue) {
          var result2 = object4 == null ? undefined2 : baseGet(object4, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object4, path) {
          return object4 != null && hasPath(object4, path, baseHas);
        }
        function hasIn(object4, path) {
          return object4 != null && hasPath(object4, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity2));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object4) {
          return isArrayLike(object4) ? arrayLikeKeys(object4) : baseKeys(object4);
        }
        function keysIn(object4) {
          return isArrayLike(object4) ? arrayLikeKeys(object4, true) : baseKeysIn(object4);
        }
        function mapKeys(object4, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object4, function(value, key, object5) {
            baseAssignValue(result2, iteratee2(value, key, object5), value);
          });
          return result2;
        }
        function mapValues(object4, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object4, function(value, key, object5) {
            baseAssignValue(result2, key, iteratee2(value, key, object5));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object4, source, srcIndex) {
          baseMerge(object4, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object4, source, srcIndex, customizer) {
          baseMerge(object4, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object4, paths) {
          var result2 = {};
          if (object4 == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object4);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object4, getAllKeysIn(object4), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object4, predicate) {
          return pickBy(object4, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object4, paths) {
          return object4 == null ? {} : basePick(object4, paths);
        });
        function pickBy(object4, predicate) {
          if (object4 == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object4), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object4, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object4, path, defaultValue) {
          path = castPath(path, object4);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object4 = undefined2;
          }
          while (++index < length) {
            var value = object4 == null ? undefined2 : object4[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object4 = isFunction3(value) ? value.call(object4) : value;
          }
          return object4;
        }
        function set2(object4, path, value) {
          return object4 == null ? object4 : baseSet(object4, path, value);
        }
        function setWith(object4, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object4 == null ? object4 : baseSet(object4, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object4, iteratee2, accumulator) {
          var isArr = isArray(object4), isArrLike = isArr || isBuffer(object4) || isTypedArray(object4);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object4 && object4.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object4)) {
              accumulator = isFunction3(Ctor) ? baseCreate(getPrototype(object4)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object4, function(value, index, object5) {
            return iteratee2(accumulator, value, index, object5);
          });
          return accumulator;
        }
        function unset(object4, path) {
          return object4 == null ? true : baseUnset(object4, path);
        }
        function update3(object4, path, updater) {
          return object4 == null ? object4 : baseUpdate(object4, path, castFunction(updater));
        }
        function updateWith(object4, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object4 == null ? object4 : baseUpdate(object4, path, castFunction(updater), customizer);
        }
        function values(object4) {
          return object4 == null ? [] : baseValues(object4, keys(object4));
        }
        function valuesIn(object4) {
          return object4 == null ? [] : baseValues(object4, keysIn(object4));
        }
        function clamp2(number4, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number4), lower, upper);
        }
        function inRange(number4, start2, end) {
          start2 = toFinite(start2);
          if (end === undefined2) {
            end = start2;
            start2 = 0;
          } else {
            end = toFinite(end);
          }
          number4 = toNumber(number4);
          return baseInRange(number4, start2, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize2(word) : word);
        });
        function capitalize2(string3) {
          return upperFirst(toString(string3).toLowerCase());
        }
        function deburr(string3) {
          string3 = toString(string3);
          return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string3, target, position) {
          string3 = toString(string3);
          target = baseToString(target);
          var length = string3.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string3.slice(position, end) == target;
        }
        function escape2(string3) {
          string3 = toString(string3);
          return string3 && reHasUnescapedHtml.test(string3) ? string3.replace(reUnescapedHtml, escapeHtmlChar) : string3;
        }
        function escapeRegExp(string3) {
          string3 = toString(string3);
          return string3 && reHasRegExpChar.test(string3) ? string3.replace(reRegExpChar, "\\$&") : string3;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string3, length, chars) {
          string3 = toString(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          if (!length || strLength >= length) {
            return string3;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string3 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string3, length, chars) {
          string3 = toString(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          return length && strLength < length ? string3 + createPadding(length - strLength, chars) : string3;
        }
        function padStart(string3, length, chars) {
          string3 = toString(string3);
          length = toInteger(length);
          var strLength = length ? stringSize(string3) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string3 : string3;
        }
        function parseInt2(string3, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string3).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string3, n, guard) {
          if (guard ? isIterateeCall(string3, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string3), n);
        }
        function replace() {
          var args = arguments, string3 = toString(args[0]);
          return args.length < 3 ? string3 : string3.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string3, separator, limit2) {
          if (limit2 && typeof limit2 != "number" && isIterateeCall(string3, separator, limit2)) {
            separator = limit2 = undefined2;
          }
          limit2 = limit2 === undefined2 ? MAX_ARRAY_LENGTH : limit2 >>> 0;
          if (!limit2) {
            return [];
          }
          string3 = toString(string3);
          if (string3 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string3)) {
              return castSlice(stringToArray(string3), 0, limit2);
            }
          }
          return string3.split(separator, limit2);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string3, target, position) {
          string3 = toString(string3);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string3.length);
          target = baseToString(target);
          return string3.slice(position, position + target.length) == target;
        }
        function template(string3, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string3, options, guard)) {
            options = undefined2;
          }
          string3 = toString(string3);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate2 = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate2.source + "|" + (interpolate2 === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string3.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string3.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string3, chars, guard) {
          string3 = toString(string3);
          if (string3 && (guard || chars === undefined2)) {
            return baseTrim(string3);
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start2, end).join("");
        }
        function trimEnd(string3, chars, guard) {
          string3 = toString(string3);
          if (string3 && (guard || chars === undefined2)) {
            return string3.slice(0, trimmedEndIndex(string3) + 1);
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string3, chars, guard) {
          string3 = toString(string3);
          if (string3 && (guard || chars === undefined2)) {
            return string3.replace(reTrimStart, "");
          }
          if (!string3 || !(chars = baseToString(chars))) {
            return string3;
          }
          var strSymbols = stringToArray(string3), start2 = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start2).join("");
        }
        function truncate(string3, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string3 = toString(string3);
          var strLength = string3.length;
          if (hasUnicode(string3)) {
            var strSymbols = stringToArray(string3);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string3;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string3.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string3.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string3.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string3) {
          string3 = toString(string3);
          return string3 && reHasEscapedHtml.test(string3) ? string3.replace(reEscapedHtml, unescapeHtmlChar) : string3;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string3, pattern4, guard) {
          string3 = toString(string3);
          pattern4 = guard ? undefined2 : pattern4;
          if (pattern4 === undefined2) {
            return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
          }
          return string3.match(pattern4) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object4, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object4, key, bind(object4[key], object4));
          });
          return object4;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method4 = baseRest(function(path, args) {
          return function(object4) {
            return baseInvoke(object4, path, args);
          };
        });
        var methodOf = baseRest(function(object4, args) {
          return function(path) {
            return baseInvoke(object4, path, args);
          };
        });
        function mixin(object4, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object4;
            object4 = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain3 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction3(object4);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object4[methodName] = func;
            if (isFunc) {
              object4.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain3 || chainAll) {
                  var result2 = object4(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object4 });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object4, arrayPush([this.value()], arguments));
              };
            }
          });
          return object4;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop3() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object4) {
          return function(path) {
            return object4 == null ? undefined2 : baseGet(object4, path);
          };
        }
        var range3 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix2) {
          var id = ++idCounter;
          return toString(prefix2) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array4) {
          return array4 && array4.length ? baseExtremum(array4, identity2, baseGt) : undefined2;
        }
        function maxBy(array4, iteratee2) {
          return array4 && array4.length ? baseExtremum(array4, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array4) {
          return baseMean(array4, identity2);
        }
        function meanBy(array4, iteratee2) {
          return baseMean(array4, getIteratee(iteratee2, 2));
        }
        function min(array4) {
          return array4 && array4.length ? baseExtremum(array4, identity2, baseLt) : undefined2;
        }
        function minBy(array4, iteratee2) {
          return array4 && array4.length ? baseExtremum(array4, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array4) {
          return array4 && array4.length ? baseSum(array4, identity2) : 0;
        }
        function sumBy(array4, iteratee2) {
          return array4 && array4.length ? baseSum(array4, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign3;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith2;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain2;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce3;
        lodash.defaults = defaults2;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize2;
        lodash.merge = merge2;
        lodash.mergeWith = mergeWith;
        lodash.method = method4;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once2;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range3;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set2;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle2;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle3;
        lodash.thru = thru;
        lodash.toArray = toArray5;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update3;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize2;
        lodash.ceil = ceil;
        lodash.clamp = clamp2;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep2;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape2;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex2;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get2;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity2;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement2;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual2;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction3;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject2;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined2;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop3;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type4 = index + 1, isFilter = type4 == LAZY_FILTER_FLAG || type4 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type4
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start2, end) {
          start2 = toInteger(start2);
          var result2 = this;
          if (result2.__filtered__ && (start2 > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start2 < 0) {
            result2 = result2.takeRight(-start2);
          } else if (start2) {
            result2 = result2.drop(start2);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start2);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    init_define_process_env();
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    init_define_process_env();
    var defineProperty = require_defineProperty();
    function baseAssignValue(object4, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object4, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object4[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    init_define_process_env();
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object4, key, value) {
      var objValue = object4[key];
      if (!(hasOwnProperty.call(object4, key) && eq(objValue, value)) || value === void 0 && !(key in object4)) {
        baseAssignValue(object4, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    init_define_process_env();
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object4, customizer) {
      var isNew = !object4;
      object4 || (object4 = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object4[key], source[key], key, object4, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object4, key, newValue);
        } else {
          assignValue(object4, key, newValue);
        }
      }
      return object4;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    init_define_process_env();
    function identity2(value) {
      return value;
    }
    module.exports = identity2;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    init_define_process_env();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    init_define_process_env();
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start2, transform) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array4 = Array(length);
        while (++index < length) {
          array4[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array4);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    init_define_process_env();
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    init_define_process_env();
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity2 = require_identity();
    var baseSetToString = !defineProperty ? identity2 : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    init_define_process_env();
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    init_define_process_env();
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    init_define_process_env();
    var identity2 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity2), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    init_define_process_env();
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject2 = require_isObject();
    function isIterateeCall(value, index, object4) {
      if (!isObject2(object4)) {
        return false;
      }
      var type4 = typeof index;
      if (type4 == "number" ? isArrayLike(object4) && isIndex(index, object4.length) : type4 == "string" && index in object4) {
        return eq(object4[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    init_define_process_env();
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object4, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object4 = Object(object4);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object4, source, index, customizer);
          }
        }
        return object4;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/assign.js
var require_assign = __commonJS({
  "node_modules/lodash/assign.js"(exports, module) {
    init_define_process_env();
    var assignValue = require_assignValue();
    var copyObject = require_copyObject();
    var createAssigner = require_createAssigner();
    var isArrayLike = require_isArrayLike();
    var isPrototype = require_isPrototype();
    var keys = require_keys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var assign3 = createAssigner(function(object4, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object4);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object4, key, source[key]);
        }
      }
    });
    module.exports = assign3;
  }
});

// node_modules/lodash/assignWith.js
var require_assignWith = __commonJS({
  "node_modules/lodash/assignWith.js"(exports, module) {
    init_define_process_env();
    var copyObject = require_copyObject();
    var createAssigner = require_createAssigner();
    var keys = require_keys();
    var assignWith2 = createAssigner(function(object4, source, srcIndex, customizer) {
      copyObject(source, keys(source), object4, customizer);
    });
    module.exports = assignWith2;
  }
});

// node_modules/lodash/isUndefined.js
var require_isUndefined = __commonJS({
  "node_modules/lodash/isUndefined.js"(exports, module) {
    init_define_process_env();
    function isUndefined2(value) {
      return value === void 0;
    }
    module.exports = isUndefined2;
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    init_define_process_env();
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce3(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush2() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush2;
      return debounced;
    }
    function isObject2(value) {
      var type4 = typeof value;
      return !!value && (type4 == "object" || type4 == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce3;
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    init_define_process_env();
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce3(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush2() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush2;
      return debounced;
    }
    function throttle3(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce3(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject2(value) {
      var type4 = typeof value;
      return !!value && (type4 == "object" || type4 == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle3;
  }
});

// node_modules/screenfull/dist/screenfull.js
var require_screenfull = __commonJS({
  "node_modules/screenfull/dist/screenfull.js"(exports, module) {
    init_define_process_env();
    (function() {
      "use strict";
      var document2 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
      var isCommonjs = typeof module !== "undefined" && module.exports;
      var fn = function() {
        var val;
        var fnMap = [
          [
            "requestFullscreen",
            "exitFullscreen",
            "fullscreenElement",
            "fullscreenEnabled",
            "fullscreenchange",
            "fullscreenerror"
          ],
          [
            "webkitRequestFullscreen",
            "webkitExitFullscreen",
            "webkitFullscreenElement",
            "webkitFullscreenEnabled",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          [
            "webkitRequestFullScreen",
            "webkitCancelFullScreen",
            "webkitCurrentFullScreenElement",
            "webkitCancelFullScreen",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          [
            "mozRequestFullScreen",
            "mozCancelFullScreen",
            "mozFullScreenElement",
            "mozFullScreenEnabled",
            "mozfullscreenchange",
            "mozfullscreenerror"
          ],
          [
            "msRequestFullscreen",
            "msExitFullscreen",
            "msFullscreenElement",
            "msFullscreenEnabled",
            "MSFullscreenChange",
            "MSFullscreenError"
          ]
        ];
        var i = 0;
        var l = fnMap.length;
        var ret = {};
        for (; i < l; i++) {
          val = fnMap[i];
          if (val && val[1] in document2) {
            for (i = 0; i < val.length; i++) {
              ret[fnMap[0][i]] = val[i];
            }
            return ret;
          }
        }
        return false;
      }();
      var eventNameMap = {
        change: fn.fullscreenchange,
        error: fn.fullscreenerror
      };
      var screenfull2 = {
        request: function(element, options) {
          return new Promise(function(resolve, reject) {
            var onFullScreenEntered = function() {
              this.off("change", onFullScreenEntered);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenEntered);
            element = element || document2.documentElement;
            var returnPromise = element[fn.requestFullscreen](options);
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenEntered).catch(reject);
            }
          }.bind(this));
        },
        exit: function() {
          return new Promise(function(resolve, reject) {
            if (!this.isFullscreen) {
              resolve();
              return;
            }
            var onFullScreenExit = function() {
              this.off("change", onFullScreenExit);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenExit);
            var returnPromise = document2[fn.exitFullscreen]();
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenExit).catch(reject);
            }
          }.bind(this));
        },
        toggle: function(element, options) {
          return this.isFullscreen ? this.exit() : this.request(element, options);
        },
        onchange: function(callback) {
          this.on("change", callback);
        },
        onerror: function(callback) {
          this.on("error", callback);
        },
        on: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.addEventListener(eventName, callback, false);
          }
        },
        off: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.removeEventListener(eventName, callback, false);
          }
        },
        raw: fn
      };
      if (!fn) {
        if (isCommonjs) {
          module.exports = { isEnabled: false };
        } else {
          window.screenfull = { isEnabled: false };
        }
        return;
      }
      Object.defineProperties(screenfull2, {
        isFullscreen: {
          get: function() {
            return Boolean(document2[fn.fullscreenElement]);
          }
        },
        element: {
          enumerable: true,
          get: function() {
            return document2[fn.fullscreenElement];
          }
        },
        isEnabled: {
          enumerable: true,
          get: function() {
            return Boolean(document2[fn.fullscreenEnabled]);
          }
        }
      });
      if (isCommonjs) {
        module.exports = screenfull2;
      } else {
        window.screenfull = screenfull2;
      }
    })();
  }
});

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    init_define_process_env();
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set2(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get2(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie = parts.slice(1).join("=");
            if (!json && cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie = (converter.read || converter)(cookie, name) || decode(cookie);
              if (json) {
                try {
                  cookie = JSON.parse(cookie);
                } catch (e) {
                }
              }
              jar[name] = cookie;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set2;
        api.get = function(key) {
          return get2(key, false);
        };
        api.getJSON = function(key) {
          return get2(key, true);
        };
        api.remove = function(key, attributes) {
          set2(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    init_define_process_env();
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return t2 === void 0;
      } }, D = "en", v = {};
      v[D] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function(t2, e2, n2) {
        var r2;
        if (!t2)
          return D;
        if (typeof t2 == "string")
          v[t2] && (r2 = t2), e2 && (v[t2] = e2, r2 = t2);
        else {
          var i2 = t2.name;
          v[i2] = t2, r2 = i2;
        }
        return !n2 && r2 && (D = r2), r2 || !n2 && D;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = typeof e2 == "object" ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (e2 === null)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if (typeof e2 == "string" && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $2(1, 0) : $2(31, 11);
            case f:
              return r2 ? $2(1, M3) : $2(0, M3 + 1);
            case o:
              var D2 = this.$locale().weekStart || 0, v2 = (y2 < D2 ? y2 + 7 : y2) - D2;
              return $2(r2 ? m3 - v2 : m3 + (6 - v2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $2 && this.$d[$2](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $2 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].substr(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $2) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, D2 = O.m(this, M3);
          return D2 = (l2 = {}, l2[c] = D2 / 12, l2[f] = D2, l2[h] = D2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $2 ? D2 : O.a(D2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return v[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), b = _.prototype;
      return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        b[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = v[D], w.Ls = v, w.p = {}, w;
    });
  }
});

// node_modules/staged-components/index.js
var require_staged_components = __commonJS({
  "node_modules/staged-components/index.js"(exports) {
    init_define_process_env();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    function processNext(next) {
      if (typeof next === "function") {
        return react_1.default.createElement(Stage, { stage: next });
      } else {
        return next;
      }
    }
    function Stage(props) {
      const next = props.stage();
      return processNext(next);
    }
    function staged3(stage) {
      return function Staged(props, ref) {
        const next = stage(props, ref);
        return processNext(next);
      };
    }
    exports.staged = staged3;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    init_define_process_env();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    init_define_process_env();
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        module.exports = _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
      } else {
        module.exports = _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
      }
      return _typeof2(obj);
    }
    module.exports = _typeof2;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports, module) {
    init_define_process_env();
    var _typeof2 = require_typeof()["default"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }
      var cache2 = _getRequireWildcardCache(nodeInterop);
      if (cache2 && cache2.has(obj)) {
        return cache2.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache2) {
        cache2.set(obj, newObj);
      }
      return newObj;
    }
    module.exports = _interopRequireWildcard;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }
});

// node_modules/rc-util/lib/warning.js
var require_warning = __commonJS({
  "node_modules/rc-util/lib/warning.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.warning = warning3;
    exports.note = note;
    exports.resetWarned = resetWarned;
    exports.call = call3;
    exports.warningOnce = warningOnce;
    exports.noteOnce = noteOnce;
    exports.default = void 0;
    var warned = {};
    function warning3(valid, message) {
      if (!valid && console !== void 0) {
        console.error("Warning: ".concat(message));
      }
    }
    function note(valid, message) {
      if (!valid && console !== void 0) {
        console.warn("Note: ".concat(message));
      }
    }
    function resetWarned() {
      warned = {};
    }
    function call3(method4, valid, message) {
      if (!valid && !warned[message]) {
        method4(false, message);
        warned[message] = true;
      }
    }
    function warningOnce(valid, message) {
      call3(warning3, valid, message);
    }
    function noteOnce(valid, message) {
      call3(note, valid, message);
    }
    var _default = warningOnce;
    exports.default = _default;
  }
});

// node_modules/rc-field-form/lib/FieldContext.js
var require_FieldContext = __commonJS({
  "node_modules/rc-field-form/lib/FieldContext.js"(exports) {
    init_define_process_env();
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.HOOK_MARK = void 0;
    var React105 = _interopRequireWildcard(require_react());
    var _warning = _interopRequireDefault(require_warning());
    var HOOK_MARK2 = "RC_FORM_INTERNAL_HOOKS";
    exports.HOOK_MARK = HOOK_MARK2;
    var warningFunc3 = function warningFunc4() {
      (0, _warning.default)(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
    };
    var Context2 = React105.createContext({
      getFieldValue: warningFunc3,
      getFieldsValue: warningFunc3,
      getFieldError: warningFunc3,
      getFieldWarning: warningFunc3,
      getFieldsError: warningFunc3,
      isFieldsTouched: warningFunc3,
      isFieldTouched: warningFunc3,
      isFieldValidating: warningFunc3,
      isFieldsValidating: warningFunc3,
      resetFields: warningFunc3,
      setFields: warningFunc3,
      setFieldsValue: warningFunc3,
      validateFields: warningFunc3,
      submit: warningFunc3,
      getInternalHooks: function getInternalHooks2() {
        warningFunc3();
        return {
          dispatch: warningFunc3,
          initEntityValue: warningFunc3,
          registerField: warningFunc3,
          useSubscribe: warningFunc3,
          setInitialValues: warningFunc3,
          setCallbacks: warningFunc3,
          getFields: warningFunc3,
          setValidateMessages: warningFunc3,
          setPreserve: warningFunc3,
          getInitialValue: warningFunc3
        };
      }
    });
    var _default = Context2;
    exports.default = _default;
  }
});

// dep:antd-mobile
init_define_process_env();

// node_modules/antd-mobile/es/index.js
init_define_process_env();

// node_modules/antd-mobile/es/global/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/global/global.css";

// node_modules/antd-mobile/es/utils/can-use-dom.js
init_define_process_env();
var canUseDom = !!(typeof window !== "undefined" && typeof document !== "undefined" && window.document && window.document.createElement);

// node_modules/antd-mobile/es/global/index.js
if (canUseDom) {
  document.addEventListener("touchstart", function() {
  }, true);
}

// node_modules/antd-mobile/es/components/config-provider/index.js
init_define_process_env();

// node_modules/antd-mobile/es/components/config-provider/config-provider.js
init_define_process_env();
var import_react = __toModule(require_react());

// node_modules/antd-mobile/es/locales/zh-CN.js
init_define_process_env();

// node_modules/antd-mobile/es/utils/merge-locale.js
init_define_process_env();
var import_lodash = __toModule(require_lodash());
function mergeLocale(base2, patch) {
  return (0, import_lodash.merge)((0, import_lodash.cloneDeep)(base2), patch);
}

// node_modules/antd-mobile/es/locales/base.js
init_define_process_env();
var base = {
  common: {
    confirm: "Confirm",
    cancel: "Cancel"
  },
  Dialog: {
    ok: "OK"
  },
  ErrorBlock: {
    "default": {
      title: "Oops, something went wrong",
      description: "Please wait a minute and try again"
    },
    busy: {
      title: "Oops, not loading",
      description: "Try to refresh the page"
    },
    disconnected: {
      title: "Network is busy",
      description: "Try to refresh the page"
    },
    empty: {
      title: "Hmm, couldn't find that...",
      description: "Want to try a new search?"
    }
  },
  ImageUploader: {
    uploading: "Uploading..."
  },
  Mask: {
    name: "Mask"
  }
};

// node_modules/antd-mobile/es/locales/zh-CN.js
var zhCN = mergeLocale(base, {
  common: {
    confirm: "\u786E\u5B9A",
    cancel: "\u53D6\u6D88"
  },
  Dialog: {
    ok: "\u6211\u77E5\u9053\u4E86"
  },
  ErrorBlock: {
    "default": {
      title: "\u9875\u9762\u9047\u5230\u4E00\u4E9B\u5C0F\u95EE\u9898",
      description: "\u5F85\u4F1A\u6765\u8BD5\u8BD5"
    },
    busy: {
      title: "\u524D\u65B9\u62E5\u5835",
      description: "\u5237\u65B0\u8BD5\u8BD5"
    },
    disconnected: {
      title: "\u7F51\u7EDC\u6709\u70B9\u5FD9",
      description: "\u52A8\u52A8\u624B\u6307\u5E2E\u5FD9\u4FEE\u590D"
    },
    empty: {
      title: "\u6CA1\u6709\u627E\u5230\u4F60\u9700\u8981\u7684\u4E1C\u897F",
      description: "\u627E\u627E\u5176\u4ED6\u7684\u5427"
    }
  },
  ImageUploader: {
    uploading: "\u4E0A\u4F20\u4E2D..."
  },
  Mask: {
    name: "\u906E\u7F69\u5C42"
  }
});
var zh_CN_default = zhCN;

// node_modules/antd-mobile/es/components/config-provider/config-provider.js
var __rest = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var defaultConfigRef = {
  current: {
    locale: zh_CN_default
  }
};
function setDefaultConfig(config2) {
  defaultConfigRef.current = config2;
}
function getDefaultConfig() {
  return defaultConfigRef.current;
}
var ConfigContext = import_react.default.createContext(null);
var ConfigProvider = function ConfigProvider2(props) {
  var children = props.children, config2 = __rest(props, ["children"]);
  var parentConfig = useConfig();
  return import_react.default.createElement(ConfigContext.Provider, {
    value: Object.assign(Object.assign({}, parentConfig), config2)
  }, children);
};
function useConfig() {
  var _a;
  return (_a = (0, import_react.useContext)(ConfigContext)) !== null && _a !== void 0 ? _a : getDefaultConfig();
}

// node_modules/antd-mobile/es/components/config-provider/index.js
var config_provider_default = ConfigProvider;

// node_modules/antd-mobile/es/components/action-sheet/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/action-sheet/action-sheet.css";

// node_modules/antd-mobile/es/utils/attach-properties-to-component.js
init_define_process_env();
function attachPropertiesToComponent(component, properties) {
  var ret = component;
  for (var key in properties) {
    if (properties.hasOwnProperty(key)) {
      ret[key] = properties[key];
    }
  }
  return ret;
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
init_define_process_env();
var import_react14 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/native-props.js
init_define_process_env();
var import_react2 = __toModule(require_react());
var import_classnames = __toModule(require_classnames());
function withNativeProps(props, element) {
  var p = Object.assign({}, element.props);
  if (props.className) {
    p.className = (0, import_classnames.default)(element.props.className, props.className);
  }
  if (props.style) {
    p.style = Object.assign(Object.assign({}, p.style), props.style);
  }
  for (var key in props) {
    if (!props.hasOwnProperty(key))
      continue;
    if (key.startsWith("data-") || key.startsWith("aria-")) {
      p[key] = props[key];
    }
  }
  return import_react2.default.cloneElement(element, p);
}

// node_modules/antd-mobile/es/utils/with-default-props.js
init_define_process_env();
var import_assign = __toModule(require_assign());
var import_assignWith = __toModule(require_assignWith());
var import_isUndefined = __toModule(require_isUndefined());
function withDefaultProps(defaultProps49) {
  return function(C) {
    C.defaultProps = defaultProps49;
    return C;
  };
}
function mergeProps() {
  function customizer(objValue, srcValue) {
    return (0, import_isUndefined.default)(srcValue) ? objValue : srcValue;
  }
  var ret = (0, import_assign.default)({}, arguments.length <= 0 ? void 0 : arguments[0]);
  for (var i = 1; i < arguments.length; i++) {
    ret = (0, import_assignWith.default)(ret, i < 0 || arguments.length <= i ? void 0 : arguments[i], customizer);
  }
  return ret;
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
var import_classnames4 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/popup/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/popup/popup.css";

// node_modules/antd-mobile/es/components/popup/popup.js
init_define_process_env();
var import_classnames2 = __toModule(require_classnames());
var import_react11 = __toModule(require_react());

// node_modules/antd-mobile/es/components/mask/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/mask/mask.css";

// node_modules/antd-mobile/es/components/mask/mask.js
init_define_process_env();
var import_react10 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/use-lock-scroll.js
init_define_process_env();

// node_modules/antd-mobile/es/utils/use-touch.js
init_define_process_env();
var import_react3 = __toModule(require_react());
var MIN_DISTANCE = 10;
function getDirection(x, y) {
  if (x > y && x > MIN_DISTANCE) {
    return "horizontal";
  }
  if (y > x && y > MIN_DISTANCE) {
    return "vertical";
  }
  return "";
}
function useTouch() {
  var startX = (0, import_react3.useRef)(0);
  var startY = (0, import_react3.useRef)(0);
  var deltaX = (0, import_react3.useRef)(0);
  var deltaY = (0, import_react3.useRef)(0);
  var offsetX = (0, import_react3.useRef)(0);
  var offsetY = (0, import_react3.useRef)(0);
  var direction = (0, import_react3.useRef)("");
  var isVertical = function isVertical2() {
    return direction.current === "vertical";
  };
  var isHorizontal = function isHorizontal2() {
    return direction.current === "horizontal";
  };
  var reset = function reset2() {
    deltaX.current = 0;
    deltaY.current = 0;
    offsetX.current = 0;
    offsetY.current = 0;
    direction.current = "";
  };
  var start2 = function start3(event) {
    reset();
    startX.current = event.touches[0].clientX;
    startY.current = event.touches[0].clientY;
  };
  var move2 = function move3(event) {
    var touch = event.touches[0];
    deltaX.current = touch.clientX < 0 ? 0 : touch.clientX - startX.current;
    deltaY.current = touch.clientY - startY.current;
    offsetX.current = Math.abs(deltaX.current);
    offsetY.current = Math.abs(deltaY.current);
    if (!direction.current) {
      direction.current = getDirection(offsetX.current, offsetY.current);
    }
  };
  return {
    move: move2,
    start: start2,
    reset,
    startX,
    startY,
    deltaX,
    deltaY,
    offsetX,
    offsetY,
    direction,
    isVertical,
    isHorizontal
  };
}

// node_modules/antd-mobile/es/utils/use-lock-scroll.js
var import_react4 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/get-scroll-parent.js
init_define_process_env();
var overflowScrollReg = /scroll|auto/i;
var defaultRoot = canUseDom ? window : void 0;
function isElement(node) {
  var ELEMENT_NODE_TYPE = 1;
  return node.tagName !== "HTML" && node.tagName !== "BODY" && node.nodeType === ELEMENT_NODE_TYPE;
}
function getScrollParent(el, root) {
  if (root === void 0) {
    root = defaultRoot;
  }
  var node = el;
  while (node && node !== root && isElement(node)) {
    var _window$getComputedSt = window.getComputedStyle(node), overflowY = _window$getComputedSt.overflowY;
    if (overflowScrollReg.test(overflowY)) {
      return node;
    }
    node = node.parentNode;
  }
  return root;
}

// node_modules/antd-mobile/es/utils/supports-passive.js
init_define_process_env();
var supportsPassive = false;
if (canUseDom) {
  try {
    opts = {};
    Object.defineProperty(opts, "passive", {
      get: function get2() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test-passive", null, opts);
  } catch (e) {
  }
}
var opts;

// node_modules/antd-mobile/es/utils/use-lock-scroll.js
var totalLockCount = 0;
var BODY_LOCK_CLASS = "adm-overflow-hidden";
function useLockScroll(rootRef, shouldLock) {
  var touch = useTouch();
  var onTouchMove = function onTouchMove2(event) {
    touch.move(event);
    var direction = touch.deltaY.current > 0 ? "10" : "01";
    var el = getScrollParent(event.target, rootRef.current);
    if (!el)
      return;
    var scrollHeight = el.scrollHeight, offsetHeight = el.offsetHeight, scrollTop = el.scrollTop;
    var status = "11";
    if (scrollTop === 0) {
      status = offsetHeight >= scrollHeight ? "00" : "01";
    } else if (scrollTop + offsetHeight >= scrollHeight) {
      status = "10";
    }
    if (status !== "11" && touch.isVertical() && !(parseInt(status, 2) & parseInt(direction, 2))) {
      if (event.cancelable) {
        event.preventDefault();
      }
    }
  };
  var lock = function lock2() {
    document.addEventListener("touchstart", touch.start);
    document.addEventListener("touchmove", onTouchMove, supportsPassive ? {
      passive: false
    } : false);
    if (!totalLockCount) {
      document.body.classList.add(BODY_LOCK_CLASS);
    }
    totalLockCount++;
  };
  var unlock = function unlock2() {
    if (totalLockCount) {
      document.removeEventListener("touchstart", touch.start);
      document.removeEventListener("touchmove", onTouchMove);
      totalLockCount--;
      if (!totalLockCount) {
        document.body.classList.remove(BODY_LOCK_CLASS);
      }
    }
  };
  (0, import_react4.useEffect)(function() {
    if (shouldLock) {
      lock();
      return function() {
        unlock();
      };
    }
  }, [shouldLock]);
}

// node_modules/@react-spring/web/dist/react-spring-web.esm.js
init_define_process_env();

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
init_define_process_env();

// node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
init_define_process_env();

// node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
init_define_process_env();
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time = raf.now() + ms;
  let cancel = () => {
    let i = timeouts.findIndex((t) => t.cancel == cancel);
    if (~i)
      timeouts.splice(i, 1);
    __raf.count -= ~i ? 1 : 0;
  };
  let timeout = {
    time,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time), 0, timeout);
  __raf.count += 1;
  start();
  return timeout;
};
var findTimeout = (time) => ~(~timeouts.findIndex((t) => t.time > time) || ~timeouts.length);
raf.cancel = (fn) => {
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t) => t.handler());
    __raf.count -= count;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = new Set();
  let current = next;
  return {
    add(fn) {
      __raf.count += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      __raf.count -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = new Set();
        __raf.count -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        __raf.count += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e) {
      raf.catch(e);
    }
  });
}
var __raf = {
  count: 0,
  clear() {
    ts = -1;
    timeouts = [];
    onStartQueue = makeQueue();
    updateQueue = makeQueue();
    onFrameQueue = makeQueue();
    writeQueue = makeQueue();
    onFinishQueue = makeQueue();
    __raf.count = 0;
  }
};

// node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var React3 = __toModule(require_react());
var import_react5 = __toModule(require_react());
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a) => !!a && a.constructor.name === "Object",
  fun: (a) => typeof a === "function",
  str: (a) => typeof a === "string",
  num: (a) => typeof a === "number",
  und: (a) => a === void 0
};
function isEqual(a, b) {
  if (is.arr(a)) {
    if (!is.arr(b) || a.length !== b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  return a === b;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn.call(ctx2, obj[i], `${i}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx2, obj[key], key);
    }
  }
}
var toArray2 = (a) => is.und(a) ? [] : is.arr(a) ? a : [a];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop;
var assign2 = (globals2) => {
  if (globals2.to)
    to = globals2.to;
  if (globals2.now)
    raf.now = globals2.now;
  if (globals2.colors !== void 0)
    colors$1 = globals2.colors;
  if (globals2.skipAnimation != null)
    skipAnimation = globals2.skipAnimation;
  if (globals2.createStringInterpolator)
    createStringInterpolator$1 = globals2.createStringInterpolator;
  if (globals2.requestAnimationFrame)
    raf.use(globals2.requestAnimationFrame);
  if (globals2.batchedUpdates)
    raf.batchedUpdates = globals2.batchedUpdates;
  if (globals2.willAdvance)
    willAdvance = globals2.willAdvance;
  if (globals2.frameLoop)
    raf.frameLoop = globals2.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign: assign2
});
var startQueue = new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i = 0; i < currentFrame.length; i++) {
    const animation = currentFrame[i];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index = arr.findIndex(test);
  return index < 0 ? arr.length : index;
}
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color) {
  let match;
  if (typeof color === "number") {
    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
  }
  if (match = hex6.exec(color))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color] !== void 0) {
    return colors$1[color];
  }
  if (match = rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r = (int32Color & 4278190080) >>> 24;
  let g = (int32Color & 16711680) >>> 16;
  let b = (int32Color & 65280) >>> 8;
  let a = (int32Color & 255) / 255;
  return `rgba(${r}, ${g}, ${b}, ${a})`;
}
var createInterpolator = (range3, output, extrapolate) => {
  if (is.fun(range3)) {
    return range3;
  }
  if (is.arr(range3)) {
    return createInterpolator({
      range: range3,
      output,
      extrapolate
    });
  }
  if (is.str(range3.output[0])) {
    return createStringInterpolator$1(range3);
  }
  const config2 = range3;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t) => t);
  return (input) => {
    const range4 = findRange(input, inputRange);
    return interpolate(input, inputRange[range4], inputRange[range4 + 1], outputRange[range4], outputRange[range4 + 1], easing, extrapolateLeft, extrapolateRight, config2.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
  let result = map ? map(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i)
    if (inputRange[i] >= input)
      break;
  return i - 1;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get2) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get2 && !(get2 = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get2);
  }
};
var setFluidGetter = (target, get2) => setHidden(target, $get, get2);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var namedColorRegex;
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config2.output.map((value) => getFluidValue(value).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba));
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_, i) => keyframes.map((values) => {
    if (!(i in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends2({}, config2, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || value in (colors$1 || {}));
}
var useOnce = (effect) => (0, import_react5.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function useForceUpdate() {
  const update3 = (0, import_react5.useState)()[1];
  const mounted = (0, import_react5.useState)(makeMountedRef)[0];
  useOnce(mounted.unmount);
  return () => {
    if (mounted.current) {
      update3({});
    }
  };
}
function makeMountedRef() {
  const mounted = {
    current: true,
    unmount: () => () => {
      mounted.current = false;
    }
  };
  return mounted;
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react5.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react5.useRef)();
  const prevCache = committed.current;
  let cache2 = prevCache;
  if (cache2) {
    const useCache = Boolean(inputs && cache2.inputs && areInputsEqual(inputs, cache2.inputs));
    if (!useCache) {
      cache2 = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache2 = initial;
  }
  (0, import_react5.useEffect)(() => {
    committed.current = cache2;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache2]);
  return cache2.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i = 0; i < next.length; i++) {
    if (next[i] !== prev[i]) {
      return false;
    }
  }
  return true;
}
function usePrev(value) {
  const prevRef = (0, import_react5.useRef)();
  (0, import_react5.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}
var useLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React3.useLayoutEffect : React3.useEffect;

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React5 = __toModule(require_react());
var import_react7 = __toModule(require_react());

// node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
init_define_process_env();
var React4 = __toModule(require_react());
var import_react6 = __toModule(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i) => node.setValue(source[i])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var withAnimated = (Component2, host2) => {
  const hasInstance = !is.fun(Component2) || Component2.prototype && Component2.prototype.isReactComponent;
  return (0, import_react6.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react6.useRef)(null);
    const ref = hasInstance && (0, import_react6.useCallback)((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react6.useRef)();
    useLayoutEffect2(() => {
      const lastObserver = observerRef.current;
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      if (lastObserver) {
        each(lastObserver.deps, (dep) => removeFluidObserver(dep, lastObserver));
        raf.cancel(lastObserver.update);
      }
    });
    (0, import_react6.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React4.createElement(Component2, _extends3({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = _extends3({}, props, {
      style: host2.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated2 = (Component2) => {
    const displayName = getDisplayName(Component2) || "Anonymous";
    if (is.str(Component2)) {
      Component2 = animated2[Component2] || (animated2[Component2] = withAnimated(Component2, hostConfig));
    } else {
      Component2 = Component2[cacheKey] || (Component2[cacheKey] = withAnimated(Component2, hostConfig));
    }
    Component2.displayName = `Animated(${displayName})`;
    return Component2;
  };
  eachProp(components, (Component2, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component2);
    }
    animated2[key] = animated2(Component2);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/types/animated.js
init_define_process_env();

// node_modules/@react-spring/types/interpolation.js
init_define_process_env();

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray2(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = {
      to: to2
    };
    eachProp(props, (val, key) => key in to2 || (out[key] = val));
    return out;
  }
  return _extends4({}, props);
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var linear = (t) => t;
var defaults = _extends4({}, config.default, {
  mass: 1,
  damping: 1,
  easing: linear,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends4({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends4({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key,
  props,
  defaultProps: defaultProps49,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps49 == null ? void 0 : defaultProps49.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps49 == null ? void 0 : defaultProps49.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0) {
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends4({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps49 = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAniamtionSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends4({}, arg1) : _extends4({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps49, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t) => t.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      pauseQueue: new Set(),
      resumeQueue: new Set(),
      timeouts: new Set()
    };
    this._pendingCalls = new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends4({}, arg1) : _extends4({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config2,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray2(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i) => {
      if (node2.done)
        return;
      const to2 = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];
      let finished = anim.immediate;
      let position = to2;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;
        let velocity;
        if (!is.und(config2.duration)) {
          let p = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p = p > 1 ? 1 : p < 0 ? 0 : p;
            node2.durationProgress = p;
          }
          position = from + config2.easing(p) * (to2 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e);
          finished = Math.abs(node2.lastPosition - position) < 0.1;
          velocity = v0 * e;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n = 0; n < numSteps; ++n) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to2 || position > to2 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to2;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to2);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to2,
        config: config2
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : _extends4({}, arg2, {
        to: to2
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to2
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to2,
      from
    } = props;
    to2 = is.obj(to2) ? to2[key] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range3 = {
      to: to2,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from] = [from, to2];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range3;
  }
  _update(_ref, isLoop) {
    let props = _extends4({}, _ref);
    const {
      key,
      defaultProps: defaultProps49
    } = this;
    if (props.default)
      Object.assign(defaultProps49, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range3 = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps: defaultProps49,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range3)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range3, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range3.to);
    const hasFromProp = !is.und(range3.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key,
      defaultProps: defaultProps49,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to2 = prevTo,
      from = prevFrom
    } = range3;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from;
    }
    if (props.reverse)
      [to2, from] = [from, to2];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config2
    } = anim;
    const {
      decay,
      velocity
    } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config2, callProp(props.config, key), props.config !== defaultProps49.config ? callProp(defaultProps49.config, key) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to2)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps49.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray2(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type4) => mergeActiveFn(this, props, type4));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps49.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  let loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends4({}, props, {
      loop: loop2,
      default: false,
      pause: void 0,
      to: !reverse || isAsyncTo(to2) ? to2 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to2,
    from
  } = props = inferTo(props);
  const keys = new Set();
  if (is.obj(to2))
    findDefined(to2, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update3 = createUpdate(props);
  if (is.und(update3.default)) {
    update3.default = getDefaultProps(update3);
  }
  return update3;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type4) {
  target.animation[type4] = props[type4] !== getDefaultProp(props, type4) ? resolveProp(props[type4], target.key) : void 0;
}
function sendEvent(target, type4, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type4]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type4]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller = class {
  constructor(props, flush2) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = new Set();
    this._changed = new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: new Set(),
      resumeQueue: new Set(),
      timeouts: new Set()
    };
    this._events = {
      onStart: new Map(),
      onChange: new Map(),
      onRest: new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush2) {
      this._flush = flush2;
    }
    if (props) {
      this.start(_extends4({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray2(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray2(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray2(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray2(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to2,
    from,
    loop: loop2,
    onRest,
    onResolve
  } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends4({}, ctrl.springs);
  if (props) {
    each(toArray2(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends4({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["children"];
var SpringContext = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  const inherited = (0, import_react7.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React5.createElement(Provider, {
    value: props
  }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React5.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function SpringRef3(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = _getProps(props, ctrl, i);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i = current.indexOf(ctrl);
    if (~i)
      current.splice(i, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl) => ctrl.set(values));
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = this._getProps(props, ctrl, i);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index) {
    return is.fun(arg) ? arg(index, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react7.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react7.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react7.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react7.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react7.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react7.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; i++) {
      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));
      const update3 = propsFn ? propsFn(i, ctrl) : props[i];
      if (update3) {
        updates[i] = declareUpdate(update3);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));
  const context = (0, import_react7.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update3 = updates[i];
      if (update3) {
        replaceRef(ctrl, update3.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update3);
        } else {
          ctrl.start(update3);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x) => _extends4({}, x));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase;
(function(TransitionPhase2) {
  TransitionPhase2["MOUNT"] = "mount";
  TransitionPhase2["ENTER"] = "enter";
  TransitionPhase2["UPDATE"] = "update";
  TransitionPhase2["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray2(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray2(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray2(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray2(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom = __toModule(require_react_dom());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n) => "-" + n.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i) => {
    instance.setAttribute(name, values[i]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x,
      y,
      z
    } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x || y || z) {
      inputs.push([x || 0, y || 0, z || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v) => addUnit(v, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray2(value));
        transforms.push(key === "rotate3d" ? ([x2, y2, z2, deg]) => [`rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v) => addUnit(v, unit)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity2 = true;
    each(this.inputs, (input, i) => {
      const arg1 = getFluidValue(input[0]);
      const [t, id] = this.transforms[i](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t;
      identity2 = identity2 && id;
    });
    return identity2 ? "none" : transform;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    return props;
  }
});
var animated = host.animated;

// node_modules/antd-mobile/es/utils/render-to-container.js
init_define_process_env();
var import_react_dom2 = __toModule(require_react_dom());

// node_modules/antd-mobile/es/utils/get-container.js
init_define_process_env();
function resolveContainer(getContainer2) {
  var container = typeof getContainer2 === "function" ? getContainer2() : getContainer2;
  return container || document.body;
}

// node_modules/antd-mobile/es/utils/render-to-container.js
function renderToContainer(getContainer2, node) {
  if (canUseDom && getContainer2) {
    var container = resolveContainer(getContainer2);
    return (0, import_react_dom2.createPortal)(node, container);
  }
  return node;
}

// node_modules/antd-mobile/es/utils/use-should-render.js
init_define_process_env();

// node_modules/antd-mobile/es/utils/use-initialized.js
init_define_process_env();
var import_react8 = __toModule(require_react());
function useInitialized(check) {
  var initializedRef = (0, import_react8.useRef)(check);
  if (check) {
    initializedRef.current = true;
  }
  return !!initializedRef.current;
}

// node_modules/antd-mobile/es/utils/use-should-render.js
function useShouldRender(active, forceRender, destroyOnClose) {
  var initialized = useInitialized(active);
  if (forceRender)
    return true;
  if (active)
    return true;
  if (!initialized)
    return false;
  return !destroyOnClose;
}

// node_modules/antd-mobile/es/utils/with-stop-propagation.js
init_define_process_env();
var import_react9 = __toModule(require_react());
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var eventToPropRecord = {
  "click": "onClick"
};
function withStopPropagation(events, element) {
  var props = Object.assign({}, element.props);
  var _loop = function _loop2() {
    var key = _step.value;
    var prop = eventToPropRecord[key];
    props[prop] = function(e) {
      var _a, _b;
      e.stopPropagation();
      (_b = (_a = element.props)[prop]) === null || _b === void 0 ? void 0 : _b.call(_a, e);
    };
  };
  for (var _iterator = _createForOfIteratorHelperLoose(events), _step; !(_step = _iterator()).done; ) {
    _loop();
  }
  return import_react9.default.cloneElement(element, props);
}

// node_modules/antd-mobile/es/components/mask/mask.js
var classPrefix = "adm-mask";
var opacityRecord = {
  "default": 0.55,
  thin: 0.35,
  thick: 0.75
};
var defaultProps = {
  visible: true,
  destroyOnClose: false,
  forceRender: false,
  color: "black",
  opacity: "default",
  disableBodyScroll: true,
  getContainer: null,
  stopPropagation: ["click"]
};
var Mask = function Mask2(p) {
  var props = mergeProps(defaultProps, p);
  var _useConfig = useConfig(), locale = _useConfig.locale;
  var ref = (0, import_react10.useRef)(null);
  useLockScroll(ref, props.visible && props.disableBodyScroll);
  var background = (0, import_react10.useMemo)(function() {
    var _a;
    var opacity2 = (_a = opacityRecord[props.opacity]) !== null && _a !== void 0 ? _a : props.opacity;
    var rgb2 = props.color === "white" ? "255, 255, 255" : "0, 0, 0";
    return "rgba(" + rgb2 + ", " + opacity2 + ")";
  }, [props.color, props.opacity]);
  var _useState = (0, import_react10.useState)(props.visible), active = _useState[0], setActive = _useState[1];
  var _useSpring = useSpring({
    opacity: props.visible ? 1 : 0,
    config: {
      precision: 0.01,
      mass: 1,
      tension: 200,
      friction: 30
    },
    onStart: function onStart() {
      setActive(true);
    },
    onRest: function onRest() {
      var _a, _b;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  }), opacity = _useSpring.opacity;
  var shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);
  var node = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react10.default.createElement(animated.div, {
    className: classPrefix,
    ref,
    style: Object.assign(Object.assign({}, props.style), {
      background,
      opacity,
      display: active ? "unset" : "none"
    })
  }, props.onMaskClick && import_react10.default.createElement("div", {
    className: classPrefix + "-aria-button",
    role: "button",
    "aria-label": locale.Mask.name,
    onClick: props.onMaskClick
  }), import_react10.default.createElement("div", {
    className: classPrefix + "-content"
  }, shouldRender && props.children))));
  return renderToContainer(props.getContainer, node);
};

// node_modules/antd-mobile/es/components/mask/index.js
var mask_default = Mask;

// node_modules/antd-mobile/es/components/popup/popup.js
var classPrefix2 = "adm-popup";
var defaultProps2 = {
  position: "bottom",
  visible: false,
  getContainer: function getContainer() {
    return document.body;
  },
  mask: true,
  stopPropagation: ["click"]
};
var Popup = function Popup2(p) {
  var props = mergeProps(defaultProps2, p);
  var bodyCls = (0, import_classnames2.default)(classPrefix2 + "-body", props.bodyClassName, classPrefix2 + "-body-position-" + props.position);
  var ref = (0, import_react11.useRef)(null);
  var _useState = (0, import_react11.useState)(props.visible), active = _useState[0], setActive = _useState[1];
  useLockScroll(ref, active);
  var shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);
  var _useSpring = useSpring({
    percent: props.visible ? 0 : 100,
    config: {
      precision: 0.1,
      mass: 0.4,
      tension: 300,
      friction: 30
    },
    onStart: function onStart() {
      setActive(true);
    },
    onRest: function onRest() {
      var _a, _b;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  }), percent = _useSpring.percent;
  var node = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react11.default.createElement("div", {
    className: classPrefix2,
    onClick: props.onClick,
    style: {
      display: active ? "unset" : "none"
    }
  }, props.mask && import_react11.default.createElement(mask_default, {
    visible: props.visible,
    onMaskClick: props.onMaskClick,
    className: props.maskClassName,
    style: props.maskStyle,
    disableBodyScroll: false,
    stopPropagation: props.stopPropagation
  }), import_react11.default.createElement(animated.div, {
    className: bodyCls,
    style: Object.assign(Object.assign({}, props.bodyStyle), {
      transform: percent.to(function(v) {
        if (props.position === "bottom") {
          return "translate(0, " + v + "%)";
        }
        if (props.position === "top") {
          return "translate(0, -" + v + "%)";
        }
        if (props.position === "left") {
          return "translate(-" + v + "%, 0)";
        }
        if (props.position === "right") {
          return "translate(" + v + "%, 0)";
        }
        return "none";
      })
    }),
    ref
  }, shouldRender && props.children))));
  return renderToContainer(props.getContainer, node);
};

// node_modules/antd-mobile/es/components/popup/index.js
var popup_default = Popup;

// node_modules/antd-mobile/es/components/button/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/button/button.css";

// node_modules/antd-mobile/es/components/button/button.js
init_define_process_env();
var import_react13 = __toModule(require_react());
var import_classnames3 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/loading/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/loading/loading.css";

// node_modules/antd-mobile/es/components/loading/loading.js
init_define_process_env();
var import_react12 = __toModule(require_react());
var classPrefix3 = "adm-loading";
var colorRecord = {
  "default": "var(--adm-color-weak)",
  primary: "var(--adm-color-primary)",
  white: "var(--adm-color-white)"
};
var defaultProps3 = {
  color: "default"
};
var Loading = (0, import_react12.memo)(function(p) {
  var _a;
  var props = mergeProps(defaultProps3, p);
  return withNativeProps(props, import_react12.default.createElement("div", {
    style: {
      color: (_a = colorRecord[props.color]) !== null && _a !== void 0 ? _a : props.color
    },
    className: classPrefix3
  }, import_react12.default.createElement("svg", {
    height: "1em",
    viewBox: "0 0 100 40",
    style: {
      verticalAlign: "-0.125em"
    }
  }, import_react12.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react12.default.createElement("g", {
    transform: "translate(-100.000000, -71.000000)"
  }, import_react12.default.createElement("g", {
    transform: "translate(95.000000, 71.000000)"
  }, import_react12.default.createElement("g", {
    transform: "translate(5.000000, 0.000000)"
  }, [0, 1, 2].map(function(i) {
    return import_react12.default.createElement("rect", {
      key: i,
      fill: "currentColor",
      x: 20 + i * 26,
      y: "16",
      width: "8",
      height: "8",
      rx: "2"
    }, import_react12.default.createElement("animate", {
      attributeName: "y",
      from: "16",
      to: "16",
      dur: "2s",
      begin: i * 0.2 + "s",
      repeatCount: "indefinite",
      values: "16; 6; 26; 16; 16",
      keyTimes: "0; 0.1; 0.3; 0.4; 1",
      id: "circ-anim"
    }));
  }))))))));
});

// node_modules/antd-mobile/es/components/loading/index.js
var loading_default = Loading;

// node_modules/antd-mobile/es/components/button/button.js
var classPrefix4 = "adm-button";
var defaultProps4 = {
  color: "default",
  fill: "solid",
  block: false,
  loading: false,
  type: "button"
};
var Button = function Button2(p) {
  var _classNames;
  var props = mergeProps(defaultProps4, p);
  var disabled = props.disabled || props.loading;
  return withNativeProps(props, import_react13.default.createElement("button", {
    type: props.type,
    onClick: props.onClick,
    className: (0, import_classnames3.default)(classPrefix4, props.color ? classPrefix4 + "-" + props.color : null, (_classNames = {}, _classNames[classPrefix4 + "-block"] = props.block, _classNames[classPrefix4 + "-disabled"] = disabled, _classNames[classPrefix4 + "-fill-outline"] = props.fill === "outline", _classNames[classPrefix4 + "-fill-none"] = props.fill === "none", _classNames[classPrefix4 + "-mini"] = props.size === "mini", _classNames[classPrefix4 + "-small"] = props.size === "small", _classNames[classPrefix4 + "-large"] = props.size === "large", _classNames[classPrefix4 + "-loading"] = props.loading, _classNames)),
    disabled
  }, props.loading ? import_react13.default.createElement(import_react13.default.Fragment, null, import_react13.default.createElement("div", {
    className: classPrefix4 + "-loading-wrapper"
  }, import_react13.default.createElement(loading_default, {
    color: "currentColor"
  }), props.loadingText)) : props.children));
};

// node_modules/antd-mobile/es/components/button/index.js
var button_default = Button;

// node_modules/antd-mobile/es/utils/render-to-body.js
init_define_process_env();
var import_react_dom3 = __toModule(require_react_dom());
function renderToBody(element) {
  var container = document.createElement("div");
  document.body.appendChild(container);
  function unmount2() {
    var unmountResult = import_react_dom3.default.unmountComponentAtNode(container);
    if (unmountResult && container.parentNode) {
      container.parentNode.removeChild(container);
    }
  }
  import_react_dom3.default.render(element, container);
  return unmount2;
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
var classPrefix5 = "adm-action-sheet";
var defaultProps5 = {
  visible: false,
  actions: [],
  cancelText: "",
  closeOnAction: false,
  closeOnMaskClick: true
};
var ActionSheet = withDefaultProps(defaultProps5)(function(props) {
  return import_react14.default.createElement(popup_default, {
    visible: props.visible,
    onMaskClick: function onMaskClick() {
      var _a, _b;
      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props);
      if (props.closeOnMaskClick) {
        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    },
    afterClose: props.afterClose,
    className: classPrefix5 + "-popup",
    getContainer: props.getContainer
  }, withNativeProps(props, import_react14.default.createElement("div", {
    className: classPrefix5
  }, props.extra && import_react14.default.createElement("div", {
    className: classPrefix5 + "-extra"
  }, props.extra), import_react14.default.createElement("div", {
    className: classPrefix5 + "-button-list"
  }, props.actions.map(function(action, index) {
    var _classNames;
    return import_react14.default.createElement("div", {
      key: action.key,
      className: classPrefix5 + "-button-item-wrapper"
    }, import_react14.default.createElement(button_default, {
      block: true,
      fill: "none",
      disabled: action.disabled,
      onClick: function onClick() {
        var _a, _b, _c;
        (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action);
        (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index);
        if (props.closeOnAction) {
          (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);
        }
      },
      className: (0, import_classnames4.default)(classPrefix5 + "-button-item", (_classNames = {}, _classNames[classPrefix5 + "-button-item-danger"] = action.danger, _classNames))
    }, import_react14.default.createElement("div", {
      className: classPrefix5 + "-button-item-name"
    }, action.text), action.description && import_react14.default.createElement("div", {
      className: classPrefix5 + "-button-item-description"
    }, action.description)));
  })), props.cancelText && import_react14.default.createElement("div", {
    className: classPrefix5 + "-cancel"
  }, import_react14.default.createElement("div", {
    className: classPrefix5 + "-button-item-wrapper"
  }, import_react14.default.createElement(button_default, {
    block: true,
    fill: "none",
    className: classPrefix5 + "-button-item",
    onClick: function onClick() {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react14.default.createElement("div", {
    className: classPrefix5 + "-button-item-name"
  }, props.cancelText)))))));
});
function showActionSheet(props) {
  var Wrapper = (0, import_react14.forwardRef)(function(_, ref2) {
    var _useState = (0, import_react14.useState)(false), visible = _useState[0], setVisible = _useState[1];
    (0, import_react14.useEffect)(function() {
      setVisible(true);
    }, []);
    function handleClose() {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
      setVisible(false);
    }
    (0, import_react14.useImperativeHandle)(ref2, function() {
      return {
        close: handleClose
      };
    });
    return import_react14.default.createElement(ActionSheet, Object.assign({}, props, {
      visible,
      onClose: handleClose,
      afterClose: function afterClose() {
        var _a;
        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
        unmount2();
      }
    }));
  });
  var ref = (0, import_react14.createRef)();
  var unmount2 = renderToBody(import_react14.default.createElement(Wrapper, {
    ref
  }));
  return {
    close: function close() {
      var _a;
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
    }
  };
}

// node_modules/antd-mobile/es/components/action-sheet/index.js
var action_sheet_default = attachPropertiesToComponent(ActionSheet, {
  show: showActionSheet
});

// node_modules/antd-mobile/es/components/badge/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/badge/badge.css";

// node_modules/antd-mobile/es/components/badge/badge.js
init_define_process_env();
var import_classnames5 = __toModule(require_classnames());
var import_react15 = __toModule(require_react());
var classPrefix6 = "adm-badge";
var dot = Symbol();
var Badge = withDefaultProps({
  color: "#FF411C"
})(function(props) {
  var _classNames;
  var content = props.content, color = props.color, children = props.children;
  var isDot = content === dot;
  var badgeCls = (0, import_classnames5.default)(classPrefix6, (_classNames = {}, _classNames[classPrefix6 + "-fixed"] = !!children, _classNames[classPrefix6 + "-dot"] = isDot, _classNames));
  var element = content ? withNativeProps(props, import_react15.default.createElement("div", {
    className: badgeCls,
    style: {
      backgroundColor: color
    }
  }, !isDot && content)) : null;
  return children ? import_react15.default.createElement("div", {
    className: classPrefix6 + "-wrap"
  }, children, element) : element;
});

// node_modules/antd-mobile/es/components/badge/index.js
var badge_default = attachPropertiesToComponent(Badge, {
  dot
});

// node_modules/antd-mobile/es/components/card/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/card/card.css";

// node_modules/antd-mobile/es/components/card/card.js
init_define_process_env();
var import_react16 = __toModule(require_react());
var import_classnames6 = __toModule(require_classnames());
var classPrefix7 = "adm-card";
var Card = function Card2(props) {
  var renderHeader = function renderHeader2() {
    if (!(props.title || props.extra)) {
      return null;
    }
    return import_react16.default.createElement("div", {
      className: (0, import_classnames6.default)(classPrefix7 + "-header", props.headerClassName),
      style: props.headerStyle,
      onClick: props.onHeaderClick
    }, import_react16.default.createElement("div", {
      className: classPrefix7 + "-header-title"
    }, props.title), props.extra);
  };
  var renderBody = function renderBody2() {
    if (!props.children) {
      return null;
    }
    return import_react16.default.createElement("div", {
      className: (0, import_classnames6.default)(classPrefix7 + "-body", props.bodyClassName),
      style: props.bodyStyle,
      onClick: props.onBodyClick
    }, props.children);
  };
  return withNativeProps(props, import_react16.default.createElement("div", {
    className: classPrefix7,
    onClick: props.onClick
  }, renderHeader(), renderBody()));
};

// node_modules/antd-mobile/es/components/card/index.js
var card_default = Card;

// node_modules/antd-mobile/es/components/cascade-picker/index.js
init_define_process_env();

// node_modules/antd-mobile/es/components/cascade-picker/prompt.js
init_define_process_env();

// node_modules/antd-mobile/es/components/cascade-picker/cascade-picker.js
init_define_process_env();
var import_react90 = __toModule(require_react());

// node_modules/antd-mobile/es/components/picker/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/picker/picker.css";

// node_modules/antd-mobile/es/components/picker/picker.js
init_define_process_env();
var import_react88 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/use-props-value.js
init_define_process_env();
var import_react81 = __toModule(require_react());

// node_modules/ahooks/es/index.js
init_define_process_env();

// node_modules/@ahooksjs/use-request/es/index.js
init_define_process_env();
var import_react23 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/useAsync.js
init_define_process_env();
var import_lodash2 = __toModule(require_lodash2());
var import_lodash3 = __toModule(require_lodash3());
var import_react19 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/utils/index.js
init_define_process_env();

// node_modules/@ahooksjs/use-request/es/utils/utils.js
init_define_process_env();
function isDocumentVisible() {
  if (typeof document !== "undefined" && typeof document.visibilityState !== "undefined") {
    return document.visibilityState !== "hidden";
  }
  return true;
}
function isOnline() {
  if (typeof navigator.onLine !== "undefined") {
    return navigator.onLine;
  }
  return true;
}

// node_modules/@ahooksjs/use-request/es/utils/cache.js
init_define_process_env();
var cache = new Map();

// node_modules/@ahooksjs/use-request/es/utils/limit.js
init_define_process_env();
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }
  return ar;
};
function limit(fn, timespan) {
  var pending = false;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (pending)
      return;
    pending = true;
    fn.apply(void 0, __spread(args));
    setTimeout(function() {
      pending = false;
    }, timespan);
  };
}

// node_modules/@ahooksjs/use-request/es/utils/usePersistFn.js
init_define_process_env();
var import_react17 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/utils/useUpdateEffect.js
init_define_process_env();
var import_react18 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/utils/windowFocus.js
init_define_process_env();
var listeners = [];
function subscribe(listener) {
  listeners.push(listener);
  return function unsubscribe() {
    var index = listeners.indexOf(listener);
    listeners.splice(index, 1);
  };
}
var eventsBinded = false;
if (typeof window !== "undefined" && window.addEventListener && !eventsBinded) {
  revalidate = function revalidate2() {
    if (!isDocumentVisible() || !isOnline())
      return;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
  window.addEventListener("focus", revalidate, false);
  eventsBinded = true;
}
var revalidate;
var windowFocus_default = subscribe;

// node_modules/@ahooksjs/use-request/es/utils/windowVisible.js
init_define_process_env();
var listeners2 = [];
function subscribe2(listener) {
  listeners2.push(listener);
  return function unsubscribe() {
    var index = listeners2.indexOf(listener);
    listeners2.splice(index, 1);
  };
}
var eventsBinded2 = false;
if (typeof window !== "undefined" && window.addEventListener && !eventsBinded2) {
  revalidate = function revalidate2() {
    if (!isDocumentVisible())
      return;
    for (var i = 0; i < listeners2.length; i++) {
      var listener = listeners2[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
  eventsBinded2 = true;
}
var revalidate;
var windowVisible_default = subscribe2;

// node_modules/@ahooksjs/use-request/es/useAsync.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread2 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read2(arguments[i]));
  }
  return ar;
};
var Fetch = function() {
  function Fetch2(service, config2, subscribe3, initState2) {
    this.count = 0;
    this.pollingWhenVisibleFlag = false;
    this.pollingTimer = void 0;
    this.loadingDelayTimer = void 0;
    this.unsubscribe = [];
    this.that = this;
    this.state = {
      loading: false,
      params: [],
      data: void 0,
      error: void 0,
      run: this.run.bind(this.that),
      mutate: this.mutate.bind(this.that),
      refresh: this.refresh.bind(this.that),
      cancel: this.cancel.bind(this.that),
      unmount: this.unmount.bind(this.that)
    };
    this.service = service;
    this.config = config2;
    this.subscribe = subscribe3;
    if (initState2) {
      this.state = __assign(__assign({}, this.state), initState2);
    }
    this.debounceRun = this.config.debounceInterval ? (0, import_lodash2.default)(this._run, this.config.debounceInterval) : void 0;
    this.throttleRun = this.config.throttleInterval ? (0, import_lodash3.default)(this._run, this.config.throttleInterval) : void 0;
    this.limitRefresh = limit(this.refresh.bind(this), this.config.focusTimespan);
    if (this.config.pollingInterval) {
      this.unsubscribe.push(windowVisible_default(this.rePolling.bind(this)));
    }
    if (this.config.refreshOnWindowFocus) {
      this.unsubscribe.push(windowFocus_default(this.limitRefresh.bind(this)));
    }
  }
  Fetch2.prototype.setState = function(s) {
    if (s === void 0) {
      s = {};
    }
    this.state = __assign(__assign({}, this.state), s);
    this.subscribe(this.state);
  };
  Fetch2.prototype._run = function() {
    var _this = this;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (this.pollingTimer) {
      clearTimeout(this.pollingTimer);
    }
    if (this.loadingDelayTimer) {
      clearTimeout(this.loadingDelayTimer);
    }
    this.count += 1;
    var currentCount = this.count;
    this.setState({
      loading: !this.config.loadingDelay,
      params: args
    });
    if (this.config.loadingDelay) {
      this.loadingDelayTimer = setTimeout(function() {
        _this.setState({
          loading: true
        });
      }, this.config.loadingDelay);
    }
    return this.service.apply(this, __spread2(args)).then(function(res) {
      if (currentCount !== _this.count) {
        return new Promise(function() {
        });
      }
      if (_this.loadingDelayTimer) {
        clearTimeout(_this.loadingDelayTimer);
      }
      var formattedResult = _this.config.formatResult ? _this.config.formatResult(res) : res;
      _this.setState({
        data: formattedResult,
        error: void 0,
        loading: false
      });
      if (_this.config.onSuccess) {
        _this.config.onSuccess(formattedResult, args);
      }
      return formattedResult;
    })["catch"](function(error) {
      if (currentCount !== _this.count) {
        return new Promise(function() {
        });
      }
      if (_this.loadingDelayTimer) {
        clearTimeout(_this.loadingDelayTimer);
      }
      _this.setState({
        data: void 0,
        error,
        loading: false
      });
      if (_this.config.onError) {
        _this.config.onError(error, args);
      }
      if (_this.config.throwOnError) {
        throw error;
      }
      console.error(error);
      return Promise.reject("useRequest has caught the exception, if you need to handle the exception yourself, you can set options.throwOnError to true.");
    })["finally"](function() {
      if (currentCount === _this.count) {
        if (_this.config.pollingInterval) {
          if (!isDocumentVisible() && !_this.config.pollingWhenHidden) {
            _this.pollingWhenVisibleFlag = true;
            return;
          }
          _this.pollingTimer = setTimeout(function() {
            _this._run.apply(_this, __spread2(args));
          }, _this.config.pollingInterval);
        }
      }
    });
  };
  Fetch2.prototype.run = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (this.debounceRun) {
      this.debounceRun.apply(this, __spread2(args));
      return Promise.resolve(null);
    }
    if (this.throttleRun) {
      this.throttleRun.apply(this, __spread2(args));
      return Promise.resolve(null);
    }
    return this._run.apply(this, __spread2(args));
  };
  Fetch2.prototype.cancel = function() {
    if (this.debounceRun) {
      this.debounceRun.cancel();
    }
    if (this.throttleRun) {
      this.throttleRun.cancel();
    }
    if (this.loadingDelayTimer) {
      clearTimeout(this.loadingDelayTimer);
    }
    if (this.pollingTimer) {
      clearTimeout(this.pollingTimer);
    }
    this.pollingWhenVisibleFlag = false;
    this.count += 1;
    this.setState({
      loading: false
    });
  };
  Fetch2.prototype.refresh = function() {
    return this.run.apply(this, __spread2(this.state.params));
  };
  Fetch2.prototype.rePolling = function() {
    if (this.pollingWhenVisibleFlag) {
      this.pollingWhenVisibleFlag = false;
      this.refresh();
    }
  };
  Fetch2.prototype.mutate = function(data) {
    if (typeof data === "function") {
      this.setState({
        data: data(this.state.data) || {}
      });
    } else {
      this.setState({
        data
      });
    }
  };
  Fetch2.prototype.unmount = function() {
    this.cancel();
    this.unsubscribe.forEach(function(s) {
      s();
    });
  };
  return Fetch2;
}();

// node_modules/@ahooksjs/use-request/es/useLoadMore.js
init_define_process_env();
var import_react20 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/usePaginated.js
init_define_process_env();
var import_react21 = __toModule(require_react());

// node_modules/@ahooksjs/use-request/es/configContext.js
init_define_process_env();
var import_react22 = __toModule(require_react());
var ConfigContext2 = import_react22.default.createContext({});
ConfigContext2.displayName = "UseRequestConfigContext";
var configContext_default = ConfigContext2;

// node_modules/@ahooksjs/use-request/es/index.js
var UseRequestProvider = configContext_default.Provider;

// node_modules/ahooks/es/useControllableValue/index.js
init_define_process_env();
var import_react25 = __toModule(require_react());

// node_modules/ahooks/es/useUpdateEffect/index.js
init_define_process_env();
var import_react24 = __toModule(require_react());
var useUpdateEffect = function useUpdateEffect2(effect, deps) {
  var isMounted = (0, import_react24.useRef)(false);
  (0, import_react24.useEffect)(function() {
    if (!isMounted.current) {
      isMounted.current = true;
    } else {
      return effect();
    }
  }, deps);
};
var useUpdateEffect_default2 = useUpdateEffect;

// node_modules/ahooks/es/useDynamicList/index.js
init_define_process_env();
var import_react26 = __toModule(require_react());

// node_modules/ahooks/es/useEventEmitter/index.js
init_define_process_env();
var import_react27 = __toModule(require_react());
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function next() {
        if (o && i >= o.length)
          o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var EventEmitter = function() {
  function EventEmitter2() {
    var _this = this;
    this.subscriptions = new Set();
    this.emit = function(val) {
      var e_1, _a;
      try {
        for (var _b = __values(_this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subscription = _c.value;
          subscription(val);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"]))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    this.useSubscription = function(callback) {
      var callbackRef = (0, import_react27.useRef)();
      callbackRef.current = callback;
      (0, import_react27.useEffect)(function() {
        function subscription(val) {
          if (callbackRef.current) {
            callbackRef.current(val);
          }
        }
        _this.subscriptions.add(subscription);
        return function() {
          _this.subscriptions["delete"](subscription);
        };
      }, []);
    };
  }
  return EventEmitter2;
}();

// node_modules/ahooks/es/useVirtualList/index.js
init_define_process_env();
var import_react32 = __toModule(require_react());

// node_modules/ahooks/es/useSize/index.js
init_define_process_env();
var import_react31 = __toModule(require_react());

// node_modules/ahooks/es/utils/dom.js
init_define_process_env();
function getTargetElement(target, defaultElement) {
  if (!target) {
    return defaultElement;
  }
  var targetElement;
  if (typeof target === "function") {
    targetElement = target();
  } else if ("current" in target) {
    targetElement = target.current;
  } else {
    targetElement = target;
  }
  return targetElement;
}

// node_modules/ahooks/es/useSize/useRafState.js
init_define_process_env();
var import_react30 = __toModule(require_react());

// node_modules/ahooks/es/useUnmount/index.js
init_define_process_env();
var import_react29 = __toModule(require_react());

// node_modules/ahooks/es/usePersistFn/index.js
init_define_process_env();
var import_react28 = __toModule(require_react());
function usePersistFn(fn) {
  var fnRef = (0, import_react28.useRef)(fn);
  fnRef.current = fn;
  var persistFn = (0, import_react28.useRef)();
  if (!persistFn.current) {
    persistFn.current = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(this, args);
    };
  }
  return persistFn.current;
}
var usePersistFn_default2 = usePersistFn;

// node_modules/ahooks/es/utils/index.js
init_define_process_env();
function isFunction(obj) {
  return typeof obj === "function";
}

// node_modules/ahooks/es/useUnmount/index.js
var useUnmount = function useUnmount2(fn) {
  var fnPersist = usePersistFn_default2(fn);
  (0, import_react29.useEffect)(function() {
    return function() {
      if (isFunction(fnPersist)) {
        fnPersist();
      }
    };
  }, []);
};
var useUnmount_default = useUnmount;

// node_modules/ahooks/es/useResponsive/index.js
init_define_process_env();
var import_react33 = __toModule(require_react());
var subscribers = new Set();

// node_modules/ahooks/es/useLocalStorageState/index.js
init_define_process_env();

// node_modules/ahooks/es/createUseStorageState/index.js
init_define_process_env();
var import_react34 = __toModule(require_react());
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function isFunction2(obj) {
  return typeof obj === "function";
}
function createUseStorageState(nullishStorage) {
  function useStorageState(key, defaultValue) {
    var storage = nullishStorage;
    var _a = __read3((0, import_react34.useState)(function() {
      return getStoredValue();
    }), 2), state = _a[0], setState = _a[1];
    useUpdateEffect_default2(function() {
      setState(getStoredValue());
    }, [key]);
    function getStoredValue() {
      try {
        var raw = storage.getItem(key);
        if (raw) {
          return JSON.parse(raw);
        }
      } catch (e) {
        console.error(e);
      }
      if (isFunction2(defaultValue)) {
        return defaultValue();
      }
      return defaultValue;
    }
    var updateState = (0, import_react34.useCallback)(function(value) {
      if (typeof value === "undefined") {
        storage.removeItem(key);
        setState(void 0);
      } else if (isFunction2(value)) {
        var previousState = getStoredValue();
        var currentState = value(previousState);
        try {
          storage.setItem(key, JSON.stringify(currentState));
          setState(currentState);
        } catch (e) {
          console.error(e);
        }
      } else {
        try {
          storage.setItem(key, JSON.stringify(value));
          setState(value);
        } catch (e) {
          console.error(e);
        }
      }
    }, [key]);
    return [state, updateState];
  }
  if (!nullishStorage) {
    return function(_, defaultValue) {
      return [isFunction2(defaultValue) ? defaultValue() : defaultValue, function() {
      }];
    };
  }
  return useStorageState;
}

// node_modules/ahooks/es/useLocalStorageState/index.js
var useLocalStorageState = createUseStorageState(typeof window === "object" ? window.localStorage : null);

// node_modules/ahooks/es/useSessionStorageState/index.js
init_define_process_env();
var useSessionStorageState = createUseStorageState(typeof window === "object" ? window.sessionStorage : null);

// node_modules/ahooks/es/useUpdateLayoutEffect/index.js
init_define_process_env();
var import_react35 = __toModule(require_react());
var useUpdateLayoutEffect = function useUpdateLayoutEffect2(effect, deps) {
  var isMounted = (0, import_react35.useRef)(false);
  (0, import_react35.useLayoutEffect)(function() {
    if (!isMounted.current) {
      isMounted.current = true;
    } else {
      return effect();
    }
  }, deps);
};
var useUpdateLayoutEffect_default = useUpdateLayoutEffect;

// node_modules/ahooks/es/useBoolean/index.js
init_define_process_env();
var import_react37 = __toModule(require_react());

// node_modules/ahooks/es/useToggle/index.js
init_define_process_env();
var import_react36 = __toModule(require_react());

// node_modules/ahooks/es/useDocumentVisibility/index.js
init_define_process_env();
var import_react39 = __toModule(require_react());

// node_modules/ahooks/es/useEventListener/index.js
init_define_process_env();
var import_react38 = __toModule(require_react());

// node_modules/ahooks/es/utils/canUseDom.js
init_define_process_env();

// node_modules/ahooks/es/useSelections/index.js
init_define_process_env();
var import_react40 = __toModule(require_react());

// node_modules/ahooks/es/useThrottle/index.js
init_define_process_env();
var import_react43 = __toModule(require_react());

// node_modules/ahooks/es/useThrottleFn/index.js
init_define_process_env();
var import_lodash4 = __toModule(require_lodash3());
var import_react42 = __toModule(require_react());

// node_modules/ahooks/es/useCreation/index.js
init_define_process_env();
var import_react41 = __toModule(require_react());
function useCreation(factory, deps) {
  var current = (0, import_react41.useRef)({
    deps,
    obj: void 0,
    initialized: false
  }).current;
  if (current.initialized === false || !depsAreSame(current.deps, deps)) {
    current.deps = deps;
    current.obj = factory();
    current.initialized = true;
  }
  return current.obj;
}
function depsAreSame(oldDeps, deps) {
  if (oldDeps === deps)
    return true;
  for (var i = 0; i < oldDeps.length; i++) {
    if (oldDeps[i] !== deps[i])
      return false;
  }
  return true;
}

// node_modules/ahooks/es/useThrottleFn/index.js
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread3 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read4(arguments[i]));
  }
  return ar;
};
function useThrottleFn(fn, options) {
  var _a;
  var fnRef = (0, import_react42.useRef)(fn);
  fnRef.current = fn;
  var wait = (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 1e3;
  var throttled = useCreation(function() {
    return (0, import_lodash4.default)(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(fnRef, __spread3(args));
    }, wait, options);
  }, []);
  useUnmount_default(function() {
    throttled.cancel();
  });
  return {
    run: throttled,
    cancel: throttled.cancel,
    flush: throttled.flush
  };
}
var useThrottleFn_default = useThrottleFn;

// node_modules/ahooks/es/useThrottleEffect/index.js
init_define_process_env();
var import_react44 = __toModule(require_react());

// node_modules/ahooks/es/useDebounce/index.js
init_define_process_env();
var import_react46 = __toModule(require_react());

// node_modules/ahooks/es/useDebounceFn/index.js
init_define_process_env();
var import_lodash5 = __toModule(require_lodash2());
var import_react45 = __toModule(require_react());
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread4 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read5(arguments[i]));
  }
  return ar;
};
function useDebounceFn(fn, options) {
  var _a;
  var fnRef = (0, import_react45.useRef)(fn);
  fnRef.current = fn;
  var wait = (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 1e3;
  var debounced = useCreation(function() {
    return (0, import_lodash5.default)(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(fnRef, __spread4(args));
    }, wait, options);
  }, []);
  useUnmount_default(function() {
    debounced.cancel();
  });
  return {
    run: debounced,
    cancel: debounced.cancel,
    flush: debounced.flush
  };
}
var useDebounceFn_default = useDebounceFn;

// node_modules/ahooks/es/usePrevious/index.js
init_define_process_env();
var import_react47 = __toModule(require_react());

// node_modules/ahooks/es/useMouse/index.js
init_define_process_env();
var import_react48 = __toModule(require_react());

// node_modules/ahooks/es/useScroll/index.js
init_define_process_env();
var import_react49 = __toModule(require_react());

// node_modules/ahooks/es/useClickAway/index.js
init_define_process_env();
var import_react50 = __toModule(require_react());
var defaultEvent = "click";
function useClickAway(onClickAway, target, eventName) {
  if (eventName === void 0) {
    eventName = defaultEvent;
  }
  var onClickAwayRef = (0, import_react50.useRef)(onClickAway);
  onClickAwayRef.current = onClickAway;
  (0, import_react50.useEffect)(function() {
    var handler = function handler2(event) {
      var targets = Array.isArray(target) ? target : [target];
      if (targets.some(function(targetItem) {
        var targetElement = getTargetElement(targetItem);
        return !targetElement || (targetElement === null || targetElement === void 0 ? void 0 : targetElement.contains(event.target));
      })) {
        return;
      }
      onClickAwayRef.current(event);
    };
    document.addEventListener(eventName, handler);
    return function() {
      document.removeEventListener(eventName, handler);
    };
  }, [target, eventName]);
}

// node_modules/ahooks/es/useFullscreen/index.js
init_define_process_env();
var import_react51 = __toModule(require_react());
var import_screenfull = __toModule(require_screenfull());

// node_modules/ahooks/es/useInViewport/index.js
init_define_process_env();
var import_react52 = __toModule(require_react());

// node_modules/intersection-observer/intersection-observer.js
init_define_process_env();
(function() {
  "use strict";
  if (typeof window !== "object") {
    return;
  }
  if ("IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype) {
    if (!("isIntersecting" in window.IntersectionObserverEntry.prototype)) {
      Object.defineProperty(window.IntersectionObserverEntry.prototype, "isIntersecting", {
        get: function() {
          return this.intersectionRatio > 0;
        }
      });
    }
    return;
  }
  var document2 = window.document;
  var registry = [];
  function IntersectionObserverEntry(entry) {
    this.time = entry.time;
    this.target = entry.target;
    this.rootBounds = entry.rootBounds;
    this.boundingClientRect = entry.boundingClientRect;
    this.intersectionRect = entry.intersectionRect || getEmptyRect();
    this.isIntersecting = !!entry.intersectionRect;
    var targetRect = this.boundingClientRect;
    var targetArea = targetRect.width * targetRect.height;
    var intersectionRect = this.intersectionRect;
    var intersectionArea = intersectionRect.width * intersectionRect.height;
    if (targetArea) {
      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
    } else {
      this.intersectionRatio = this.isIntersecting ? 1 : 0;
    }
  }
  function IntersectionObserver2(callback, opt_options) {
    var options = opt_options || {};
    if (typeof callback != "function") {
      throw new Error("callback must be a function");
    }
    if (options.root && options.root.nodeType != 1) {
      throw new Error("root must be an Element");
    }
    this._checkForIntersections = throttle3(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);
    this._callback = callback;
    this._observationTargets = [];
    this._queuedEntries = [];
    this._rootMarginValues = this._parseRootMargin(options.rootMargin);
    this.thresholds = this._initThresholds(options.threshold);
    this.root = options.root || null;
    this.rootMargin = this._rootMarginValues.map(function(margin) {
      return margin.value + margin.unit;
    }).join(" ");
  }
  IntersectionObserver2.prototype.THROTTLE_TIMEOUT = 100;
  IntersectionObserver2.prototype.POLL_INTERVAL = null;
  IntersectionObserver2.prototype.USE_MUTATION_OBSERVER = true;
  IntersectionObserver2.prototype.observe = function(target) {
    var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
      return item.element == target;
    });
    if (isTargetAlreadyObserved) {
      return;
    }
    if (!(target && target.nodeType == 1)) {
      throw new Error("target must be an Element");
    }
    this._registerInstance();
    this._observationTargets.push({ element: target, entry: null });
    this._monitorIntersections();
    this._checkForIntersections();
  };
  IntersectionObserver2.prototype.unobserve = function(target) {
    this._observationTargets = this._observationTargets.filter(function(item) {
      return item.element != target;
    });
    if (!this._observationTargets.length) {
      this._unmonitorIntersections();
      this._unregisterInstance();
    }
  };
  IntersectionObserver2.prototype.disconnect = function() {
    this._observationTargets = [];
    this._unmonitorIntersections();
    this._unregisterInstance();
  };
  IntersectionObserver2.prototype.takeRecords = function() {
    var records = this._queuedEntries.slice();
    this._queuedEntries = [];
    return records;
  };
  IntersectionObserver2.prototype._initThresholds = function(opt_threshold) {
    var threshold = opt_threshold || [0];
    if (!Array.isArray(threshold))
      threshold = [threshold];
    return threshold.sort().filter(function(t, i, a) {
      if (typeof t != "number" || isNaN(t) || t < 0 || t > 1) {
        throw new Error("threshold must be a number between 0 and 1 inclusively");
      }
      return t !== a[i - 1];
    });
  };
  IntersectionObserver2.prototype._parseRootMargin = function(opt_rootMargin) {
    var marginString = opt_rootMargin || "0px";
    var margins = marginString.split(/\s+/).map(function(margin) {
      var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
      if (!parts) {
        throw new Error("rootMargin must be specified in pixels or percent");
      }
      return { value: parseFloat(parts[1]), unit: parts[2] };
    });
    margins[1] = margins[1] || margins[0];
    margins[2] = margins[2] || margins[0];
    margins[3] = margins[3] || margins[1];
    return margins;
  };
  IntersectionObserver2.prototype._monitorIntersections = function() {
    if (!this._monitoringIntersections) {
      this._monitoringIntersections = true;
      if (this.POLL_INTERVAL) {
        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);
      } else {
        addEvent(window, "resize", this._checkForIntersections, true);
        addEvent(document2, "scroll", this._checkForIntersections, true);
        if (this.USE_MUTATION_OBSERVER && "MutationObserver" in window) {
          this._domObserver = new MutationObserver(this._checkForIntersections);
          this._domObserver.observe(document2, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }
      }
    }
  };
  IntersectionObserver2.prototype._unmonitorIntersections = function() {
    if (this._monitoringIntersections) {
      this._monitoringIntersections = false;
      clearInterval(this._monitoringInterval);
      this._monitoringInterval = null;
      removeEvent(window, "resize", this._checkForIntersections, true);
      removeEvent(document2, "scroll", this._checkForIntersections, true);
      if (this._domObserver) {
        this._domObserver.disconnect();
        this._domObserver = null;
      }
    }
  };
  IntersectionObserver2.prototype._checkForIntersections = function() {
    var rootIsInDom = this._rootIsInDom();
    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();
    this._observationTargets.forEach(function(item) {
      var target = item.element;
      var targetRect = getBoundingClientRect(target);
      var rootContainsTarget = this._rootContainsTarget(target);
      var oldEntry = item.entry;
      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);
      var newEntry = item.entry = new IntersectionObserverEntry({
        time: now(),
        target,
        boundingClientRect: targetRect,
        rootBounds: rootRect,
        intersectionRect
      });
      if (!oldEntry) {
        this._queuedEntries.push(newEntry);
      } else if (rootIsInDom && rootContainsTarget) {
        if (this._hasCrossedThreshold(oldEntry, newEntry)) {
          this._queuedEntries.push(newEntry);
        }
      } else {
        if (oldEntry && oldEntry.isIntersecting) {
          this._queuedEntries.push(newEntry);
        }
      }
    }, this);
    if (this._queuedEntries.length) {
      this._callback(this.takeRecords(), this);
    }
  };
  IntersectionObserver2.prototype._computeTargetAndRootIntersection = function(target, rootRect) {
    if (window.getComputedStyle(target).display == "none")
      return;
    var targetRect = getBoundingClientRect(target);
    var intersectionRect = targetRect;
    var parent = getParentNode(target);
    var atRoot = false;
    while (!atRoot) {
      var parentRect = null;
      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};
      if (parentComputedStyle.display == "none")
        return;
      if (parent == this.root || parent == document2) {
        atRoot = true;
        parentRect = rootRect;
      } else {
        if (parent != document2.body && parent != document2.documentElement && parentComputedStyle.overflow != "visible") {
          parentRect = getBoundingClientRect(parent);
        }
      }
      if (parentRect) {
        intersectionRect = computeRectIntersection(parentRect, intersectionRect);
        if (!intersectionRect)
          break;
      }
      parent = getParentNode(parent);
    }
    return intersectionRect;
  };
  IntersectionObserver2.prototype._getRootRect = function() {
    var rootRect;
    if (this.root) {
      rootRect = getBoundingClientRect(this.root);
    } else {
      var html = document2.documentElement;
      var body = document2.body;
      rootRect = {
        top: 0,
        left: 0,
        right: html.clientWidth || body.clientWidth,
        width: html.clientWidth || body.clientWidth,
        bottom: html.clientHeight || body.clientHeight,
        height: html.clientHeight || body.clientHeight
      };
    }
    return this._expandRectByRootMargin(rootRect);
  };
  IntersectionObserver2.prototype._expandRectByRootMargin = function(rect) {
    var margins = this._rootMarginValues.map(function(margin, i) {
      return margin.unit == "px" ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
    });
    var newRect = {
      top: rect.top - margins[0],
      right: rect.right + margins[1],
      bottom: rect.bottom + margins[2],
      left: rect.left - margins[3]
    };
    newRect.width = newRect.right - newRect.left;
    newRect.height = newRect.bottom - newRect.top;
    return newRect;
  };
  IntersectionObserver2.prototype._hasCrossedThreshold = function(oldEntry, newEntry) {
    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;
    if (oldRatio === newRatio)
      return;
    for (var i = 0; i < this.thresholds.length; i++) {
      var threshold = this.thresholds[i];
      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
        return true;
      }
    }
  };
  IntersectionObserver2.prototype._rootIsInDom = function() {
    return !this.root || containsDeep(document2, this.root);
  };
  IntersectionObserver2.prototype._rootContainsTarget = function(target) {
    return containsDeep(this.root || document2, target);
  };
  IntersectionObserver2.prototype._registerInstance = function() {
    if (registry.indexOf(this) < 0) {
      registry.push(this);
    }
  };
  IntersectionObserver2.prototype._unregisterInstance = function() {
    var index = registry.indexOf(this);
    if (index != -1)
      registry.splice(index, 1);
  };
  function now() {
    return window.performance && performance.now && performance.now();
  }
  function throttle3(fn, timeout) {
    var timer = null;
    return function() {
      if (!timer) {
        timer = setTimeout(function() {
          fn();
          timer = null;
        }, timeout);
      }
    };
  }
  function addEvent(node, event, fn, opt_useCapture) {
    if (typeof node.addEventListener == "function") {
      node.addEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.attachEvent == "function") {
      node.attachEvent("on" + event, fn);
    }
  }
  function removeEvent(node, event, fn, opt_useCapture) {
    if (typeof node.removeEventListener == "function") {
      node.removeEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.detatchEvent == "function") {
      node.detatchEvent("on" + event, fn);
    }
  }
  function computeRectIntersection(rect1, rect2) {
    var top = Math.max(rect1.top, rect2.top);
    var bottom = Math.min(rect1.bottom, rect2.bottom);
    var left = Math.max(rect1.left, rect2.left);
    var right = Math.min(rect1.right, rect2.right);
    var width = right - left;
    var height = bottom - top;
    return width >= 0 && height >= 0 && {
      top,
      bottom,
      left,
      right,
      width,
      height
    };
  }
  function getBoundingClientRect(el) {
    var rect;
    try {
      rect = el.getBoundingClientRect();
    } catch (err) {
    }
    if (!rect)
      return getEmptyRect();
    if (!(rect.width && rect.height)) {
      rect = {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
    }
    return rect;
  }
  function getEmptyRect() {
    return {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    };
  }
  function containsDeep(parent, child) {
    var node = child;
    while (node) {
      if (node == parent)
        return true;
      node = getParentNode(node);
    }
    return false;
  }
  function getParentNode(node) {
    var parent = node.parentNode;
    if (parent && parent.nodeType == 11 && parent.host) {
      return parent.host;
    }
    if (parent && parent.assignedSlot) {
      return parent.assignedSlot.parentNode;
    }
    return parent;
  }
  window.IntersectionObserver = IntersectionObserver2;
  window.IntersectionObserverEntry = IntersectionObserverEntry;
})();

// node_modules/ahooks/es/useInViewport/index.js
var __read6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function next() {
        if (o && i >= o.length)
          o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function isInViewPort(el) {
  if (!el) {
    return void 0;
  }
  var viewPortWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  var viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  var rect = el.getBoundingClientRect();
  if (rect) {
    var top_1 = rect.top, bottom = rect.bottom, left = rect.left, right = rect.right;
    return bottom > 0 && top_1 <= viewPortHeight && left <= viewPortWidth && right > 0;
  }
  return false;
}
function useInViewport(target) {
  var _a = __read6((0, import_react52.useState)(function() {
    var el = getTargetElement(target);
    return isInViewPort(el);
  }), 2), inViewPort = _a[0], setInViewport = _a[1];
  (0, import_react52.useEffect)(function() {
    var el = getTargetElement(target);
    if (!el) {
      return function() {
      };
    }
    var observer = new IntersectionObserver(function(entries) {
      var e_1, _a2;
      try {
        for (var entries_1 = __values2(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
          var entry = entries_1_1.value;
          if (entry.isIntersecting) {
            setInViewport(true);
          } else {
            setInViewport(false);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (entries_1_1 && !entries_1_1.done && (_a2 = entries_1["return"]))
            _a2.call(entries_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    });
    observer.observe(el);
    return function() {
      observer.disconnect();
    };
  }, [target]);
  return inViewPort;
}
var useInViewport_default = useInViewport;

// node_modules/ahooks/es/useKeyPress/index.js
init_define_process_env();
var import_react53 = __toModule(require_react());

// node_modules/ahooks/es/useHover/index.js
init_define_process_env();

// node_modules/ahooks/es/useAntdTable/index.js
init_define_process_env();
var import_react54 = __toModule(require_react());

// node_modules/ahooks/es/useFusionTable/index.js
init_define_process_env();

// node_modules/ahooks/es/useFusionTable/fusionAdapter.js
init_define_process_env();

// node_modules/ahooks/es/useSet/index.js
init_define_process_env();
var import_react55 = __toModule(require_react());

// node_modules/ahooks/es/useMap/index.js
init_define_process_env();
var import_react56 = __toModule(require_react());

// node_modules/ahooks/es/useDrop/index.js
init_define_process_env();
var import_react57 = __toModule(require_react());

// node_modules/ahooks/es/useDrag/index.js
init_define_process_env();

// node_modules/ahooks/es/useMount/index.js
init_define_process_env();
var import_react58 = __toModule(require_react());
var useMount = function useMount2(fn) {
  (0, import_react58.useEffect)(function() {
    fn();
  }, []);
};
var useMount_default = useMount;

// node_modules/ahooks/es/useTextSelection/index.js
init_define_process_env();
var import_react59 = __toModule(require_react());
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var initRect = {
  top: NaN,
  left: NaN,
  bottom: NaN,
  right: NaN,
  height: NaN,
  width: NaN
};
var initState = __assign2({
  text: ""
}, initRect);

// node_modules/ahooks/es/useCounter/index.js
init_define_process_env();
var import_react60 = __toModule(require_react());

// node_modules/ahooks/es/useUpdate/index.js
init_define_process_env();
var import_react61 = __toModule(require_react());
var __read7 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var useUpdate = function useUpdate2() {
  var _a = __read7((0, import_react61.useState)({}), 2), setState = _a[1];
  return (0, import_react61.useCallback)(function() {
    return setState({});
  }, []);
};
var useUpdate_default = useUpdate;

// node_modules/ahooks/es/useEventTarget/index.js
init_define_process_env();
var import_react62 = __toModule(require_react());

// node_modules/ahooks/es/useHistoryTravel/index.js
init_define_process_env();
var import_react63 = __toModule(require_react());

// node_modules/ahooks/es/useDebounceEffect/index.js
init_define_process_env();
var import_react64 = __toModule(require_react());

// node_modules/ahooks/es/useCookieState/index.js
init_define_process_env();
var import_js_cookie = __toModule(require_js_cookie());
var import_react65 = __toModule(require_react());

// node_modules/ahooks/es/useSetState/index.js
init_define_process_env();
var import_react66 = __toModule(require_react());

// node_modules/ahooks/es/useInterval/index.js
init_define_process_env();
var import_react67 = __toModule(require_react());

// node_modules/ahooks/es/useWhyDidYouUpdate/index.js
init_define_process_env();
var import_react68 = __toModule(require_react());

// node_modules/ahooks/es/useTitle/index.js
init_define_process_env();
var import_react69 = __toModule(require_react());

// node_modules/ahooks/es/useNetwork/index.js
init_define_process_env();
var import_react70 = __toModule(require_react());

// node_modules/ahooks/es/useTimeout/index.js
init_define_process_env();
var import_react71 = __toModule(require_react());

// node_modules/ahooks/es/useReactive/index.js
init_define_process_env();
var import_react72 = __toModule(require_react());
var proxyMap = new WeakMap();
var rawMap = new WeakMap();

// node_modules/ahooks/es/useFavicon/index.js
init_define_process_env();
var import_react73 = __toModule(require_react());

// node_modules/ahooks/es/useCountDown/index.js
init_define_process_env();
var import_react74 = __toModule(require_react());
var import_dayjs = __toModule(require_dayjs_min());

// node_modules/ahooks/es/useWebSocket/index.js
init_define_process_env();
var import_react75 = __toModule(require_react());
var ReadyState;
(function(ReadyState2) {
  ReadyState2[ReadyState2["Connecting"] = 0] = "Connecting";
  ReadyState2[ReadyState2["Open"] = 1] = "Open";
  ReadyState2[ReadyState2["Closing"] = 2] = "Closing";
  ReadyState2[ReadyState2["Closed"] = 3] = "Closed";
})(ReadyState || (ReadyState = {}));

// node_modules/ahooks/es/useLockFn/index.js
init_define_process_env();
var import_react76 = __toModule(require_react());
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __read8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread5 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read8(arguments[i]));
  }
  return ar;
};
function useLockFn(fn) {
  var _this = this;
  var lockRef = (0, import_react76.useRef)(false);
  return (0, import_react76.useCallback)(function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return __awaiter(_this, void 0, void 0, function() {
      var ret, e_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (lockRef.current)
              return [
                2
              ];
            lockRef.current = true;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [
              4,
              fn.apply(void 0, __spread5(args))
            ];
          case 2:
            ret = _a.sent();
            lockRef.current = false;
            return [
              2,
              ret
            ];
          case 3:
            e_1 = _a.sent();
            lockRef.current = false;
            throw e_1;
          case 4:
            return [
              2
            ];
        }
      });
    });
  }, [fn]);
}
var useLockFn_default = useLockFn;

// node_modules/ahooks/es/useTrackedEffect/index.js
init_define_process_env();
var import_react77 = __toModule(require_react());

// node_modules/ahooks/es/useUnmountedRef/index.js
init_define_process_env();
var import_react78 = __toModule(require_react());

// node_modules/ahooks/es/useExternal/index.js
init_define_process_env();
var import_react79 = __toModule(require_react());

// node_modules/ahooks/es/useSafeState/index.js
init_define_process_env();
var import_react80 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/use-props-value.js
function usePropsValue(options) {
  var value = options.value, defaultValue = options.defaultValue, onChange = options.onChange;
  var update3 = useUpdate_default();
  var stateRef = (0, import_react81.useRef)(value !== void 0 ? value : defaultValue);
  if (value !== void 0) {
    stateRef.current = value;
  }
  var setState = (0, import_react81.useCallback)(function(v) {
    if (value === void 0) {
      stateRef.current = v;
      update3();
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(v);
  }, [value, update3, onChange]);
  return [stateRef.current, setState];
}

// node_modules/antd-mobile/es/components/picker-view/index.js
init_define_process_env();

// node_modules/antd-mobile/es/components/picker-view/picker-view.js
init_define_process_env();
var import_react86 = __toModule(require_react());

// node_modules/antd-mobile/es/components/picker-view/column.js
init_define_process_env();
var import_react83 = __toModule(require_react());

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
init_define_process_env();

// node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js
init_define_process_env();

// node_modules/@use-gesture/core/dist/actions-c32d6a70.esm.js
init_define_process_env();

// node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
init_define_process_env();
function clamp(v, min, max) {
  return Math.max(min, Math.min(v, max));
}
var V = {
  toVector(v, fallback) {
    if (v === void 0)
      v = fallback;
    return Array.isArray(v) ? v : [v, v];
  },
  add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
  },
  sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
  },
  addTo(v1, v2) {
    v1[0] += v2[0];
    v1[1] += v2[1];
  },
  subTo(v1, v2) {
    v1[0] -= v2[0];
    v1[1] -= v2[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {
  if (constant === 0)
    return clamp(position, min, max);
  if (position < min)
    return -rubberband(min - position, max - min, constant) + min;
  if (position > max)
    return +rubberband(position - max, max - min, constant) + max;
  return position;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}

// node_modules/@use-gesture/core/dist/actions-c32d6a70.esm.js
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string3) {
  if (!string3)
    return "";
  return string3[0].toUpperCase() + string3.slice(1);
}
function toHandlerProp(device, action = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return "on" + capitalize(device) + capitalize(actionKey) + (capture ? "Capture" : "");
}
function toDomEventType(device, action = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e) => {
    var _event$currentTarget, _event$currentTarget$;
    return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P2) {
  const dx = P2.clientX - P1.clientX;
  const dy = P2.clientY - P1.clientY;
  const cx = (P2.clientX + P1.clientX) / 2;
  const cy = (P2.clientY + P1.clientY) / 2;
  const distance = Math.hypot(dx, dy);
  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
  const origin = [cx, cy];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P1, P2);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call2(v, ...args) {
  if (typeof v === "function") {
    return v(...args);
  } else {
    return v;
  }
}
function noop2() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop2;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {
        values: [0, 0],
        initial: [0, 0]
      };
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      config: config2,
      ingKey,
      args
    } = this;
    const {
      transform,
      threshold = [0, 0]
    } = config2;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._delta = [0, 0];
    state._threshold = V.sub(transform(threshold), transform([0, 0])).map(Math.abs);
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config2 = this.config;
    if (!state._active) {
      this.reset();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.initial = state.values;
      state.lastOffset = config2.from ? call2(config2.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  compute(event) {
    const {
      state,
      config: config2,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config2.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    const [_m0, _m1] = config2.transform(state._movement);
    const [_t0, _t1] = state._threshold;
    let [_s0, _s1] = state._step;
    if (_s0 === false)
      _s0 = Math.abs(_m0) >= _t0 && Math.sign(_m0) * _t0;
    if (_s1 === false)
      _s1 = Math.abs(_m1) >= _t1 && Math.sign(_m1) * _t1;
    state.intentional = _s0 !== false || _s1 !== false;
    if (!state.intentional)
      return;
    state._step = [_s0, _s1];
    const movement = [0, 0];
    movement[0] = _s0 !== false ? _m0 - _s0 : 0;
    movement[1] = _s1 !== false ? _m1 - _s1 : 0;
    if (this.intent)
      this.intent(movement);
    if (state._active && !state._blocked || state.active) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config2)
            state._bounds = call2(config2.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        const previousOffset = state.offset;
        this.computeOffset();
        if (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY) {
          state.delta = V.sub(state.offset, previousOffset);
          const absoluteDelta = state.delta.map(Math.abs);
          V.addTo(state.distance, absoluteDelta);
          state.direction = state.delta.map(Math.sign);
          if (!state.first && dt > 0) {
            state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
          }
        }
      }
    }
    const rubberband3 = state._active ? config2.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband3);
    this.computeMovement();
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config2 = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config2.triggerAllEvents)
      return;
    const memo5 = this.handler(_objectSpread22(_objectSpread22(_objectSpread22({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo5 !== void 0)
      state.memo = memo5;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx, dy]) {
  const d = Math.abs(dx) - Math.abs(dy);
  if (d > 0)
    return "x";
  if (d < 0)
    return "y";
  return void 0;
}
function restrictVectorToAxis(v, axis) {
  switch (axis) {
    case "x":
      v[1] = 0;
      break;
    case "y":
      v[0] = 0;
      break;
  }
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  intent(v) {
    this.state.axis = this.state.axis || selectAxis(v);
    this.state._blocked = (this.config.lockDirection || !!this.config.axis) && !this.state.axis || !!this.config.axis && this.config.axis !== this.state.axis;
    if (this.state._blocked)
      return;
    if (this.config.axis || this.config.lockDirection) {
      restrictVectorToAxis(v, this.state.axis);
    }
  }
};
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === "function")
      return value;
    if (value != null)
      return V.toVector(value);
  },
  transform(value, _k, config2) {
    return value || config2.shared.transform;
  }
};
if (true) {
  Object.assign(commonConfigResolver, {
    domTarget(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
    },
    lockDirection(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
    },
    initial(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
    }
  });
}
var coordinatesConfigResolver = _objectSpread22(_objectSpread22({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  bounds(value = {}) {
    if (typeof value === "function") {
      return (state) => coordinatesConfigResolver.bounds(value(state));
    }
    if ("current" in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
      return value;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top = -Infinity,
      bottom = Infinity
    } = value;
    return [[left, right], [top, bottom]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config2 = this.config;
    const state = this.state;
    if (event.buttons != null && event.buttons !== config2.pointerButtons)
      return;
    this.ctrl.setEventIds(event);
    if (config2.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    state.values = pointerValues(event);
    state.initial = state.values;
    if (config2.preventScroll) {
      this.setupScrollPrevention(event);
    } else if (config2.delay > 0) {
      this.setupDelayTrigger(event);
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config2 = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id = pointerId(event);
    if (state._pointerId && id !== state._pointerId)
      return;
    const values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(values, state.values);
      state.values = values;
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config2.preventScroll && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config2.preventScrollAxis || config2.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (true) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config2 = this.config;
    if (!state._pointerActive)
      return;
    const id = pointerId(event);
    if (state._pointerId && id !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= 3 && dy <= 3;
    if (state.tap && config2.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx, vy] = state.velocity;
      const [mx, my] = state.movement;
      const [svx, svy] = config2.swipe.velocity;
      const [sx, sy] = config2.swipe.distance;
      const sdt = config2.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx) > svx && Math.abs(mx) > sx)
          state.swipe[0] = dirx;
        if (Math.abs(vy) > svy && Math.abs(my) > sy)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config2 = this.config;
    let device = config2.device;
    if (true) {
      try {
        if (device === "pointer") {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config2.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config2.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    persistEvent(event);
    this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", this.clean.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", this.clean.bind(this), {
      passive: false
    });
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScroll, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", this.startPointerDrag.bind(this), this.config.delay, event);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    const state = this.state;
    if (deltaFn) {
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      state._delta = deltaFn(factor);
      this.start(event);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
    }
    bindFunction("key", "down", this.keyDown.bind(this));
    bindFunction("key", "up", this.keyUp.bind(this));
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e) {
    return false;
  }
}
var SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: supportsTouchEvents(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var dragConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
  pointerLock(_v, _k, {
    pointer: {
      lock = false,
      touch = false
    } = {}
  }) {
    this.useTouch = SUPPORT.touch && touch;
    return SUPPORT.pointerLock && lock;
  },
  device(_v, _k) {
    if (this.useTouch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScroll(value = false, _k, {
    preventScrollAxis = "y"
  }) {
    if (preventScrollAxis)
      this.preventScrollAxis = preventScrollAxis;
    if (!SUPPORT.touchscreen)
      return false;
    if (typeof value === "number")
      return value;
    return value ? DEFAULT_PREVENT_SCROLL_DELAY : false;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  threshold(value, _k, {
    filterTaps = false,
    axis = void 0
  }) {
    const threshold = V.toVector(value, filterTaps ? 3 : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  }
});
if (true) {
  Object.assign(dragConfigResolver, {
    useTouch(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
    },
    experimental_preventWindowScrollY(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
    },
    swipeVelocity(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
    },
    swipeDistance(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
    },
    swipeDuration(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 36;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "pinching");
    _defineProperty2(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type: type4,
      movement,
      lastOffset
    } = this.state;
    if (type4 === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  intent(v) {
    const state = this.state;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(v[0]) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(v[1]);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
    if (this.config.lockDirection) {
      if (state.axis === "scale")
        v[1] = 0;
      else if (state.axis === "angle")
        v[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    state.values = [payload.distance, payload.angle];
    state.initial = state.values;
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state.values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    state.values = [payload.distance, payload.angle - 360 * delta_turns];
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state.values[0] / state.initial[0] - 1, state.values[1] - state.initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    state.values = [event.scale, event.rotation];
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    state.values = [event.scale, event.rotation];
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    if (!event.ctrlKey)
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (!event.defaultPrevented) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    } else {
      bindFunction("wheel", "", this.wheel.bind(this), {
        passive: false
      });
    }
  }
};
var pinchConfigResolver = _objectSpread22(_objectSpread22({}, commonConfigResolver), {}, {
  useTouch(_v, _k, {
    pointer: {
      touch = false
    } = {}
  }) {
    return SUPPORT.touch && touch;
  },
  device(_v, _k, config2) {
    const sharedConfig = config2.shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (this.useTouch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D = assignDefault(call2(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D.min, D.max];
    };
    const _angleBounds = (state) => {
      const A = assignDefault(call2(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A.min, A.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k, config2) {
    this.lockDirection = config2.axis === "lock";
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  }
});
var MoveEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "moving");
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    if (!this.state._active)
      this.moveStart(event);
    else
      this.moveChange(event);
    this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    const state = this.state;
    state.values = pointerValues(event);
    this.compute(event);
    state.initial = state.values;
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active)
      return;
    const values = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values, state.values);
    V.addTo(state._movement, state._delta);
    state.values = values;
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "change", this.move.bind(this));
    bindFunction("pointer", "leave", this.moveEnd.bind(this));
  }
};
var moveConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var ScrollEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "scrolling");
  }
  scroll(event) {
    if (!this.state._active)
      this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    const values = scrollValues(event);
    state._delta = V.sub(values, state.values);
    V.addTo(state._movement, state._delta);
    state.values = values;
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("scroll", "", this.scroll.bind(this));
  }
};
var scrollConfigResolver = coordinatesConfigResolver;
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(this.state._movement, state._delta);
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var HoverEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty2(this, "ingKey", "hovering");
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    this.start(event);
    this.state.values = pointerValues(event);
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    const state = this.state;
    if (!state._active)
      return;
    state._active = false;
    const values = pointerValues(event);
    state._movement = state._delta = V.sub(values, state.values);
    state.values = values;
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "enter", this.enter.bind(this));
    bindFunction("pointer", "leave", this.leave.bind(this));
  }
};
var hoverConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var EngineMap = new Map();
var ConfigResolverMap = new Map();
function registerAction(action) {
  EngineMap.set(action.key, action.engine);
  ConfigResolverMap.set(action.key, action.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var hoverAction = {
  key: "hover",
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
var moveAction = {
  key: "move",
  engine: MoveEngine,
  resolver: moveConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var scrollAction = {
  key: "scroll",
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react82 = __toModule(require_react());

// node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
init_define_process_env();
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var identity = (v) => v;
var sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => "current" in value ? value.current : value;
    }
    return void 0;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : void 0) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value = identity) {
    return value;
  }
};
var _excluded2 = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config2 = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers))
    switch (typeof resolver) {
      case "function":
        result[key] = resolver.call(result, config2[key], key, config2);
        break;
      case "object":
        result[key] = resolveWith(config2[key], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key] = config2[key];
        break;
    }
  return result;
}
function parse(config2, gestureKey) {
  const _ref = config2, {
    target,
    eventOptions,
    window: window2,
    enabled,
    transform
  } = _ref, rest = _objectWithoutProperties2(_ref, _excluded2);
  const _config = {
    shared: resolveWith({
      target,
      eventOptions,
      window: window2,
      enabled,
      transform
    }, sharedConfigResolver)
  };
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread22({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread22({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (true) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
          if (key === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl) {
    _defineProperty2(this, "_listeners", []);
    this._ctrl = ctrl;
  }
  add(element, device, action, handler, options) {
    const type4 = toDomEventType(device, action);
    const eventOptions = _objectSpread22(_objectSpread22({}, this._ctrl.config.shared.eventOptions), options);
    element.addEventListener(type4, handler, eventOptions);
    this._listeners.push(() => element.removeEventListener(type4, handler, eventOptions));
  }
  clean() {
    this._listeners.forEach((remove) => remove());
    this._listeners = [];
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty2(this, "_timeouts", new Map());
  }
  add(key, callback, ms = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout)
      window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
};
var Controller2 = class {
  constructor(handlers) {
    _defineProperty2(this, "gestures", new Set());
    _defineProperty2(this, "_targetEventStore", new EventStore(this));
    _defineProperty2(this, "gestureEventStores", {});
    _defineProperty2(this, "gestureTimeoutStores", {});
    _defineProperty2(this, "handlers", {});
    _defineProperty2(this, "config", {});
    _defineProperty2(this, "pointerIds", new Set());
    _defineProperty2(this, "touchIds", new Set());
    _defineProperty2(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
    } else if ("pointerId" in event) {
      if (event.type === "pointerup")
        this.pointerIds.delete(event.pointerId);
      else
        this.pointerIds.add(event.pointerId);
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config2, gestureKey) {
    this.config = parse(config2, gestureKey);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const eventOptions = sharedConfig.eventOptions;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target)
        return;
    }
    const bindFunction = bindToProps(props, eventOptions, !!target);
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        if (this.config[gestureKey].enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      for (const eventKey in this.nativeHandlers) {
        bindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread22(_objectSpread22({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target)
      return props;
    for (const handlerProp in props) {
      let eventKey = handlerProp.substr(2).toLowerCase();
      const capture = !!~eventKey.indexOf("capture");
      const passive = !!~eventKey.indexOf("passive");
      if (capture || passive)
        eventKey = eventKey.replace(/capture|passive/g, "");
      this._targetEventStore.add(target, eventKey, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers) {
  const native = {};
  const handlers = {};
  const actions = new Set();
  for (let key in _handlers) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers[key];
    } else {
      native[key] = _handlers[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config2) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key)) {
    if (true) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo5 = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo5 = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo5;
  };
  internalHandlers[key] = fn;
  config2[key] = config2[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.esm.js
init_define_process_env();

// node_modules/@use-gesture/core/types/dist/use-gesture-core-types.esm.js
init_define_process_env();

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config2 = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react82.default.useMemo(() => new Controller2(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config2, gestureKey);
  import_react82.default.useEffect(ctrl.effect.bind(ctrl));
  import_react82.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config2.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function useDrag(handler, config2 = {}) {
  registerAction(dragAction);
  return useRecognizers({
    drag: handler
  }, config2, "drag");
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture2(_handlers, _config = {}) {
    const {
      handlers,
      nativeHandlers,
      config: config2
    } = parseMergedHandlers(_handlers, _config);
    return useRecognizers(handlers, config2, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config2 = {}) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config2);
}

// node_modules/antd-mobile/es/utils/convert-px.js
init_define_process_env();
var onePxTest = null;
var tester = null;
if (canUseDom) {
  onePxTest = document.createElement("div");
  onePxTest.className = "adm-px-tester";
  document.body.appendChild(onePxTest);
  tester = document.createElement("div");
  tester.className = "adm-px-tester";
  document.body.appendChild(tester);
}
function convertPx(px) {
  if (onePxTest === null || tester === null)
    return px;
  if (onePxTest.getBoundingClientRect().height === 1) {
    return px;
  }
  tester.style.setProperty("--size", px.toString());
  return tester.getBoundingClientRect().height;
}

// node_modules/antd-mobile/es/utils/rubberband.js
init_define_process_env();

// node_modules/antd-mobile/es/utils/bound.js
init_define_process_env();
function bound(position, min, max) {
  var ret = position;
  if (min !== void 0) {
    ret = Math.max(position, min);
  }
  if (max !== void 0) {
    ret = Math.min(ret, max);
  }
  return ret;
}

// node_modules/antd-mobile/es/utils/rubberband.js
function rubberband2(distance, dimension, constant) {
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds2(position, min, max, dimension, constant) {
  if (constant === void 0) {
    constant = 0.15;
  }
  if (constant === 0)
    return bound(position, min, max);
  if (position < min)
    return -rubberband2(min - position, dimension, constant) + min;
  if (position > max)
    return +rubberband2(position - max, dimension, constant) + max;
  return position;
}

// node_modules/antd-mobile/es/components/picker-view/column.js
var classPrefix8 = "adm-picker-view";
var Column = function Column2(props) {
  var itemHeight = convertPx(34);
  var value = props.value, onSelect = props.onSelect, column = props.column;
  var _useSpring = useSpring(function() {
    return {
      from: {
        y: 0
      },
      config: {
        tension: 400,
        mass: 0.8
      }
    };
  }), y = _useSpring[0].y, api = _useSpring[1];
  var draggingRef = (0, import_react83.useRef)(false);
  var _useState = (0, import_react83.useState)({}), flag = _useState[0], setFlag = _useState[1];
  (0, import_react83.useLayoutEffect)(function() {
    if (draggingRef.current)
      return;
    if (!value)
      return;
    var targetIndex = column.findIndex(function(item) {
      return item.value === value;
    });
    if (targetIndex < 0)
      return;
    var finalPosition = targetIndex * -itemHeight;
    api.start({
      y: finalPosition,
      immediate: y.idle
    });
  }, [value, column, flag]);
  (0, import_react83.useLayoutEffect)(function() {
    if (column.length === 0) {
      if (value !== null) {
        props.onSelect(null);
      }
    } else {
      if (!column.some(function(item) {
        return item.value === value;
      })) {
        var firstItem = column[0];
        props.onSelect(firstItem.value);
      }
    }
  }, [column, value]);
  var _useDebounceFn = useDebounceFn_default(function() {
    setFlag({});
  }, {
    wait: 1e3,
    leading: false,
    trailing: true
  }), debouncedUpdateFlag = _useDebounceFn.run;
  function scrollSelect(index) {
    var finalPosition = index * -itemHeight;
    api.start({
      y: finalPosition
    });
    onSelect(column[index].value);
    debouncedUpdateFlag();
  }
  var bind = useDrag(function(state) {
    draggingRef.current = true;
    var min = -((column.length - 1) * itemHeight);
    var max = 0;
    if (state.last) {
      draggingRef.current = false;
      var position = state.offset[1] + state.velocity[1] * state.direction[1] * 50;
      var targetIndex = -Math.round(bound(position, min, max) / itemHeight);
      scrollSelect(targetIndex);
    } else {
      var _position = state.offset[1];
      api.start({
        y: rubberbandIfOutOfBounds2(_position, min, max, itemHeight * 50, 0.2)
      });
    }
  }, {
    axis: "y",
    from: function from() {
      return [0, y.get()];
    },
    filterTaps: true
  });
  return import_react83.default.createElement("div", Object.assign({
    className: classPrefix8 + "-column"
  }, bind()), import_react83.default.createElement(animated.div, {
    style: {
      y
    },
    className: classPrefix8 + "-column-wheel"
  }, column.map(function(item, index) {
    function handleClick() {
      draggingRef.current = false;
      scrollSelect(index);
    }
    return import_react83.default.createElement("div", {
      key: item.value,
      className: classPrefix8 + "-column-item",
      onClick: handleClick
    }, import_react83.default.createElement("div", {
      className: classPrefix8 + "-column-item-label"
    }, item.label));
  })));
};

// node_modules/antd-mobile/es/components/picker-view/use-columns.js
init_define_process_env();
var import_react85 = __toModule(require_react());
function useColumns(rawColumns, value) {
  return (0, import_react85.useMemo)(function() {
    var columns = typeof rawColumns === "function" ? rawColumns(value) : rawColumns;
    return columns.map(function(column) {
      return column.map(function(item) {
        return typeof item === "string" ? {
          label: item,
          value: item
        } : item;
      });
    });
  }, [rawColumns, value]);
}

// node_modules/antd-mobile/es/components/picker-view/picker-view.js
var classPrefix9 = "adm-picker-view";
var defaultProps6 = {
  defaultValue: []
};
var PickerView = function PickerView2(p) {
  var props = mergeProps(defaultProps6, p);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var columns = useColumns(props.columns, value);
  return withNativeProps(props, import_react86.default.createElement("div", {
    className: "" + classPrefix9
  }, columns.map(function(column, index) {
    return import_react86.default.createElement(Column, {
      key: index,
      column,
      value: value[index],
      onSelect: function onSelect(val) {
        var nextValue = [].concat(value);
        nextValue[index] = val;
        setValue2(nextValue);
      }
    });
  }), import_react86.default.createElement("div", {
    className: classPrefix9 + "-mask " + classPrefix9 + "-mask-top"
  }), import_react86.default.createElement("div", {
    className: classPrefix9 + "-mask " + classPrefix9 + "-mask-bottom"
  })));
};

// node_modules/antd-mobile/es/components/picker-view/index.js
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/picker-view/picker-view.css";
var picker_view_default = PickerView;

// node_modules/antd-mobile/es/utils/use-lazy-memo.js
init_define_process_env();
var import_lodash6 = __toModule(require_lodash());
var import_react87 = __toModule(require_react());
function useLazyMemo(factory, deps) {
  return (0, import_react87.useMemo)(function() {
    return (0, import_lodash6.memoize)(factory);
  }, deps);
}

// node_modules/antd-mobile/es/components/picker/picker.js
var classPrefix10 = "adm-picker";
var defaultProps7 = {
  defaultValue: []
};
var Picker = function Picker2(p) {
  var _a;
  var _useConfig = useConfig(), locale = _useConfig.locale;
  var props = mergeProps(defaultProps7, {
    confirmText: locale.common.confirm,
    cancelText: locale.common.cancel
  }, p);
  var controllable = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: function onChange(val) {
      var _a2;
      (_a2 = props.onConfirm) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, context);
    }
  });
  var value = controllable[0];
  var setValue2 = controllable[1];
  var context = {
    get items() {
      return getItems();
    }
  };
  var _useState = (0, import_react88.useState)(value), innerValue = _useState[0], setInnerValue = _useState[1];
  (0, import_react88.useEffect)(function() {
    if (!props.visible) {
      setInnerValue(value);
    }
  }, [props.visible]);
  (0, import_react88.useEffect)(function() {
    if (!props.visible) {
      setInnerValue(value);
    }
  }, [value]);
  var innerColumns = useColumns(props.columns, innerValue);
  var columns = useColumns(props.columns, value);
  var pickerElement = withNativeProps(props, import_react88.default.createElement("div", {
    className: classPrefix10
  }, import_react88.default.createElement("div", {
    className: classPrefix10 + "-header"
  }, import_react88.default.createElement("a", {
    className: classPrefix10 + "-header-button",
    onClick: function onClick() {
      var _a2, _b;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
    }
  }, props.cancelText), import_react88.default.createElement("div", {
    className: classPrefix10 + "-header-title"
  }, props.title), import_react88.default.createElement("a", {
    className: classPrefix10 + "-header-button",
    onClick: function onClick() {
      var _a2;
      setValue2(innerValue);
      (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props);
    }
  }, props.confirmText)), import_react88.default.createElement("div", {
    className: classPrefix10 + "-body"
  }, import_react88.default.createElement(picker_view_default, {
    columns: innerColumns,
    value: innerValue,
    onChange: function onChange(val) {
      var _a2;
      setInnerValue(val);
      if (props.visible) {
        (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, context);
      }
    }
  }))));
  var popupElement = import_react88.default.createElement(popup_default, {
    visible: props.visible,
    position: "bottom",
    onMaskClick: function onMaskClick() {
      var _a2, _b;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
    },
    getContainer: props.getContainer,
    destroyOnClose: true,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    stopPropagation: props.stopPropagation
  }, pickerElement);
  var getItems = useLazyMemo(function() {
    return value.map(function(v, index) {
      var _a2;
      var column = columns[index];
      if (!column)
        return null;
      return (_a2 = column.find(function(item) {
        return item.value === v;
      })) !== null && _a2 !== void 0 ? _a2 : null;
    });
  }, [value, columns]);
  return import_react88.default.createElement(import_react88.default.Fragment, null, popupElement, (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, getItems()));
};

// node_modules/antd-mobile/es/components/picker/prompt.js
init_define_process_env();
var import_react89 = __toModule(require_react());
function prompt(props) {
  return new Promise(function(resolve) {
    var Wrapper = function Wrapper2() {
      var _useState = (0, import_react89.useState)(false), visible = _useState[0], setVisible = _useState[1];
      (0, import_react89.useEffect)(function() {
        setVisible(true);
      }, []);
      return import_react89.default.createElement(Picker, Object.assign({}, props, {
        visible,
        onConfirm: function onConfirm(val) {
          resolve(val);
        },
        onClose: function onClose() {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: function afterClose() {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    var unmount2 = renderToBody(import_react89.default.createElement(Wrapper, null));
  });
}

// node_modules/antd-mobile/es/components/picker/index.js
var picker_default = attachPropertiesToComponent(Picker, {
  prompt
});

// node_modules/antd-mobile/es/components/cascade-picker/cascade-picker.js
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CascadePicker = function CascadePicker2(props) {
  var options = props.options, pickerProps = __rest2(props, ["options"]);
  var _useMemo = (0, import_react90.useMemo)(function() {
    var depth2 = 1;
    var subOptionsRecord2 = {};
    function traverse(option, currentDepth) {
      if (!option.children) {
        return;
      }
      subOptionsRecord2[option.value] = option.children;
      var nextDepth = currentDepth + 1;
      if (nextDepth > depth2) {
        depth2 = nextDepth;
      }
      option.children.forEach(function(option2) {
        traverse(option2, nextDepth);
      });
    }
    options.forEach(function(option) {
      traverse(option, 1);
    });
    return {
      depth: depth2,
      subOptionsRecord: subOptionsRecord2
    };
  }, [options]), depth = _useMemo.depth, subOptionsRecord = _useMemo.subOptionsRecord;
  function columns(value) {
    var columns2 = [];
    columns2.push(options.map(function(option) {
      return {
        label: option.label,
        value: option.value
      };
    }));
    for (var i = 0; i < depth - 1; i++) {
      var x = value[i];
      var subOptions = subOptionsRecord[x];
      if (!subOptions) {
        columns2.push([]);
      } else {
        columns2.push(subOptions.map(function(option) {
          return {
            label: option.label,
            value: option.value
          };
        }));
      }
    }
    return columns2;
  }
  return import_react90.default.createElement(picker_default, Object.assign({}, pickerProps, {
    columns
  }));
};

// node_modules/antd-mobile/es/components/cascade-picker/prompt.js
var import_react91 = __toModule(require_react());
function prompt2(props) {
  return new Promise(function(resolve) {
    var Wrapper = function Wrapper2() {
      var _useState = (0, import_react91.useState)(false), visible = _useState[0], setVisible = _useState[1];
      (0, import_react91.useEffect)(function() {
        setVisible(true);
      }, []);
      return import_react91.default.createElement(CascadePicker, Object.assign({}, props, {
        visible,
        onConfirm: function onConfirm(val) {
          resolve(val);
        },
        onClose: function onClose() {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: function afterClose() {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    var unmount2 = renderToBody(import_react91.default.createElement(Wrapper, null));
  });
}

// node_modules/antd-mobile/es/components/cascade-picker/index.js
var cascade_picker_default = attachPropertiesToComponent(CascadePicker, {
  prompt: prompt2
});

// node_modules/antd-mobile/es/components/check-list/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/check-list/check-list.css";

// node_modules/antd-mobile/es/components/check-list/check-list.js
init_define_process_env();
var import_react95 = __toModule(require_react());

// node_modules/antd-mobile/es/components/list/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/list/list.css";

// node_modules/antd-mobile/es/components/list/list.js
init_define_process_env();
var import_react92 = __toModule(require_react());
var import_classnames7 = __toModule(require_classnames());
var classPrefix11 = "adm-list";
var defaultProps8 = {
  mode: "default"
};
var List = function List2(p) {
  var props = mergeProps(defaultProps8, p);
  return withNativeProps(props, import_react92.default.createElement("div", {
    className: (0, import_classnames7.default)(classPrefix11, classPrefix11 + "-" + props.mode)
  }, import_react92.default.createElement("div", {
    className: classPrefix11 + "-inner"
  }, props.children)));
};

// node_modules/antd-mobile/es/components/list/list-item.js
init_define_process_env();
var import_react93 = __toModule(require_react());
var import_classnames8 = __toModule(require_classnames());
var classPrefix12 = "adm-list-item";
var ListItem = function ListItem2(props) {
  var _a;
  var clickable = (_a = props.clickable) !== null && _a !== void 0 ? _a : !!props.onClick;
  var arrow = props.arrow === void 0 ? clickable : props.arrow;
  var content = import_react93.default.createElement("div", {
    className: classPrefix12 + "-content"
  }, props.prefix && import_react93.default.createElement("div", {
    className: classPrefix12 + "-content-prefix"
  }, props.prefix), import_react93.default.createElement("div", {
    className: classPrefix12 + "-content-main"
  }, props.title && import_react93.default.createElement("div", {
    className: classPrefix12 + "-title"
  }, props.title), props.children, props.description && import_react93.default.createElement("div", {
    className: classPrefix12 + "-description"
  }, props.description)), props.extra && import_react93.default.createElement("div", {
    className: classPrefix12 + "-content-extra"
  }, props.extra), arrow && import_react93.default.createElement("div", {
    className: classPrefix12 + "-content-arrow"
  }, arrow === true ? import_react93.default.createElement(RightOutline_default, null) : arrow));
  return withNativeProps(props, import_react93.default.createElement(clickable ? "a" : "div", {
    className: (0, import_classnames8.default)("" + classPrefix12, clickable ? ["adm-plain-anchor"] : [], props.disabled && classPrefix12 + "-disabled"),
    onClick: props.disabled ? void 0 : props.onClick
  }, content));
};

// node_modules/antd-mobile/es/components/list/index.js
var list_default = attachPropertiesToComponent(List, {
  Item: ListItem
});

// node_modules/antd-mobile/es/components/check-list/context.js
init_define_process_env();
var import_react94 = __toModule(require_react());
var CheckListContext = (0, import_react94.createContext)(null);

// node_modules/antd-mobile/es/components/check-list/check-list.js
var defaultProps9 = {
  multiple: false,
  defaultValue: [],
  activeIcon: import_react95.default.createElement(CheckOutline_default, null)
};
var CheckList = function CheckList2(p) {
  var props = mergeProps(defaultProps9, p);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  function check(val) {
    if (props.multiple) {
      setValue2([].concat(value, [val]));
    } else {
      setValue2([val]);
    }
  }
  function uncheck(val) {
    setValue2(value.filter(function(item) {
      return item !== val;
    }));
  }
  var activeIcon = props.activeIcon, disabled = props.disabled, readOnly = props.readOnly;
  return import_react95.default.createElement(CheckListContext.Provider, {
    value: {
      value,
      check,
      uncheck,
      activeIcon,
      disabled,
      readOnly
    }
  }, withNativeProps(props, import_react95.default.createElement(list_default, {
    mode: props.mode
  }, props.children)));
};

// node_modules/antd-mobile/es/components/check-list/check-list-item.js
init_define_process_env();
var import_react96 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/dev-log.js
init_define_process_env();

// node_modules/antd-mobile/es/utils/is-dev.js
init_define_process_env();
var isDev = true;

// node_modules/antd-mobile/es/utils/dev-log.js
function devWarning(component, message) {
  if (isDev) {
    console.warn("[antd-mobile: " + component + "] " + message);
  }
}

// node_modules/antd-mobile/es/components/check-list/check-list-item.js
var import_classnames9 = __toModule(require_classnames());
var classPrefix13 = "adm-check-list-item";
var CheckListItem = function CheckListItem2(props) {
  var _classNames;
  var context = (0, import_react96.useContext)(CheckListContext);
  if (context === null) {
    devWarning("CheckList.Item", "CheckList.Item can only be used inside CheckList.");
    return null;
  }
  var active = context.value.includes(props.value);
  var readOnly = props.readOnly || context.readOnly;
  var extra = import_react96.default.createElement("div", {
    className: classPrefix13 + "-extra"
  }, active ? context.activeIcon : null);
  return withNativeProps(props, import_react96.default.createElement(list_default.Item, {
    title: props.title,
    className: (0, import_classnames9.default)((_classNames = {}, _classNames[classPrefix13 + "-readonly"] = readOnly, _classNames)),
    description: props.description,
    prefix: props.prefix,
    onClick: function onClick(e) {
      var _a;
      if (readOnly)
        return;
      if (active) {
        context.uncheck(props.value);
      } else {
        context.check(props.value);
      }
      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    arrow: false,
    clickable: !readOnly,
    extra,
    disabled: props.disabled || context.disabled
  }, props.children));
};

// node_modules/antd-mobile/es/components/check-list/index.js
var check_list_default = attachPropertiesToComponent(CheckList, {
  Item: CheckListItem
});

// node_modules/antd-mobile/es/components/checkbox/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/checkbox/checkbox.css";

// node_modules/antd-mobile/es/components/checkbox/group.js
init_define_process_env();
var import_react98 = __toModule(require_react());

// node_modules/antd-mobile/es/components/checkbox/group-context.js
init_define_process_env();
var import_react97 = __toModule(require_react());
var CheckboxGroupContext = (0, import_react97.createContext)(null);

// node_modules/antd-mobile/es/components/checkbox/group.js
var defaultProps10 = {
  disabled: false,
  defaultValue: []
};
var Group = withDefaultProps(defaultProps10)(function(props) {
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  return import_react98.default.createElement(CheckboxGroupContext.Provider, {
    value: {
      value,
      disabled: props.disabled,
      check: function check(v) {
        setValue2([].concat(value, [v]));
      },
      uncheck: function uncheck(v) {
        setValue2(value.filter(function(item) {
          return item !== v;
        }));
      }
    }
  }, props.children);
});

// node_modules/antd-mobile/es/components/checkbox/checkbox.js
init_define_process_env();
var import_react100 = __toModule(require_react());
var import_classnames10 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/checkbox/check-icon.js
init_define_process_env();
var import_react99 = __toModule(require_react());
var CheckIcon = (0, import_react99.memo)(function(props) {
  return withNativeProps(props, import_react99.default.createElement("svg", {
    viewBox: "0 0 24 16"
  }, import_react99.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react99.default.createElement("g", {
    transform: "translate(-35.000000, -40.000000)",
    fill: "currentColor"
  }, import_react99.default.createElement("g", {
    transform: "translate(24.000000, 26.000000)"
  }, import_react99.default.createElement("path", {
    d: "M18.8574375,25.9363304 L14.4138058,21.4926987 C13.8001225,20.8790154 12.8051453,20.8790154 12.1914621,21.4926987 C11.5777807,22.10638 11.5777807,23.1013541 12.1914621,23.7150354 C12.1914632,23.7150366 12.1914644,23.7150377 12.1914656,23.7150389 L17.4442507,28.9677909 C18.225314,29.7488091 19.4916285,29.7488141 20.2726979,28.9678021 L21.0808125,28.1597054 L21.0808125,28.1597054 L32.5627182,16.6759191 C33.176366,16.0621709 33.1763252,15.0671824 32.5626272,14.4534844 C31.948944,13.8398011 30.9539668,13.8398011 30.3402835,14.4534844 L18.8574375,25.9363304 L18.8574375,25.9363304 Z"
  }))))));
});

// node_modules/antd-mobile/es/components/checkbox/checkbox.js
var classPrefix14 = "adm-checkbox";
var defaultProps11 = {
  defaultChecked: false,
  indeterminate: false
};
var Checkbox = function Checkbox2(p) {
  var _classNames;
  var groupContext = (0, import_react100.useContext)(CheckboxGroupContext);
  var props = mergeProps(defaultProps11, p);
  var _usePropsValue = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  }), checked = _usePropsValue[0], setChecked = _usePropsValue[1];
  var disabled = props.disabled;
  var usageWarning = function usageWarning2() {
    if (p.checked !== void 0) {
      devWarning("Checkbox", "When used with `Checkbox.Group`, the `checked` prop of `Checkbox` will not work if `value` prop of `Checkbox` is not undefined.");
    }
    if (p.defaultChecked !== void 0) {
      devWarning("Checkbox", "When used with `Checkbox.Group`, the `defaultChecked` prop of `Checkbox` will not work if `value` prop of `Checkbox` is not undefined.");
    }
  };
  var value = props.value;
  if (groupContext && value !== void 0) {
    usageWarning();
    checked = groupContext.value.includes(value);
    setChecked = function setChecked2(checked2) {
      var _a;
      if (checked2) {
        groupContext.check(value);
      } else {
        groupContext.uncheck(value);
      }
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, checked2);
    };
    disabled = disabled || groupContext.disabled;
  }
  var renderIcon = function renderIcon2() {
    if (props.icon) {
      return import_react100.default.createElement("div", {
        className: classPrefix14 + "-custom-icon"
      }, props.icon(checked, props.indeterminate));
    }
    return import_react100.default.createElement("div", {
      className: classPrefix14 + "-icon"
    }, import_react100.default.createElement(CheckIcon, {
      className: classPrefix14 + "-icon-checked"
    }), import_react100.default.createElement("div", {
      className: classPrefix14 + "-indeterminate-checked"
    }));
  };
  return withNativeProps(props, import_react100.default.createElement("label", {
    className: (0, import_classnames10.default)(classPrefix14, (_classNames = {}, _classNames[classPrefix14 + "-checked"] = checked, _classNames[classPrefix14 + "-indeterminate"] = props.indeterminate, _classNames[classPrefix14 + "-disabled"] = disabled, _classNames[classPrefix14 + "-block"] = props.block, _classNames))
  }, import_react100.default.createElement("input", {
    type: "checkbox",
    checked,
    onChange: function onChange(e) {
      setChecked(e.target.checked);
    },
    onClick: function onClick(e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
    },
    disabled,
    id: props.id
  }), renderIcon(), props.children && import_react100.default.createElement("div", {
    className: classPrefix14 + "-content"
  }, props.children)));
};

// node_modules/antd-mobile/es/components/checkbox/index.js
var checkbox_default = attachPropertiesToComponent(Checkbox, {
  Group
});

// node_modules/antd-mobile/es/components/collapse/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/collapse/collapse.css";

// node_modules/antd-mobile/es/components/collapse/collapse.js
init_define_process_env();
var import_react101 = __toModule(require_react());
var import_classnames11 = __toModule(require_classnames());
var classPrefix15 = "adm-collapse";
var CollapsePanel = function CollapsePanel2() {
  return null;
};
var CollapsePanelContent = function CollapsePanelContent2(props) {
  var visible = props.visible;
  var innerRef = (0, import_react101.useRef)(null);
  var shouldRender = useShouldRender(visible, props.forceRender, props.destroyOnClose);
  var _useSpring = useSpring(function() {
    return {
      from: {
        height: 0
      }
    };
  }), height = _useSpring[0].height, api = _useSpring[1];
  useMount_default(function() {
    if (!visible)
      return;
    var inner = innerRef.current;
    if (!inner)
      return;
    api.start({
      height: inner.offsetHeight,
      immediate: true
    });
  });
  useUpdateLayoutEffect_default(function() {
    var inner = innerRef.current;
    if (!inner)
      return;
    if (visible) {
      api.start({
        height: inner.offsetHeight
      });
    } else {
      api.start({
        height: inner.offsetHeight,
        immediate: true
      });
      api.start({
        height: 0
      });
    }
  }, [visible]);
  return import_react101.default.createElement(animated.div, {
    className: classPrefix15 + "-panel-content",
    style: {
      height: height.to(function(v) {
        if (height.idle && visible) {
          return "auto";
        } else {
          return v;
        }
      })
    }
  }, import_react101.default.createElement("div", {
    className: classPrefix15 + "-panel-content-inner",
    ref: innerRef
  }, import_react101.default.createElement(list_default.Item, null, shouldRender && props.children)));
};
var Collapse = function Collapse2(props) {
  var _a;
  var panels = [];
  import_react101.default.Children.forEach(props.children, function(child) {
    if (!import_react101.default.isValidElement(child))
      return;
    var key = child.key;
    if (typeof key !== "string")
      return;
    panels.push(child);
  });
  var _usePropsValue = usePropsValue(props.accordion ? {
    value: props.activeKey === void 0 ? void 0 : props.activeKey === null ? [] : [props.activeKey],
    defaultValue: props.defaultActiveKey === void 0 || props.defaultActiveKey === null ? [] : [props.defaultActiveKey],
    onChange: function onChange(v) {
      var _a2, _b;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, (_b = v[0]) !== null && _b !== void 0 ? _b : null);
    }
  } : {
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : [],
    onChange: props.onChange
  }), activeKey = _usePropsValue[0], setActiveKey = _usePropsValue[1];
  var activeKeyList = activeKey === null ? [] : Array.isArray(activeKey) ? activeKey : [activeKey];
  return withNativeProps(props, import_react101.default.createElement("div", {
    className: classPrefix15
  }, import_react101.default.createElement(list_default, null, panels.map(function(panel) {
    var _classNames, _classNames2;
    var key = panel.key;
    var active = activeKeyList.includes(key);
    function handleClick(event) {
      var _a2, _b;
      if (props.accordion) {
        if (active) {
          setActiveKey([]);
        } else {
          setActiveKey([key]);
        }
      } else {
        if (active) {
          setActiveKey(activeKeyList.filter(function(v) {
            return v !== key;
          }));
        } else {
          setActiveKey([].concat(activeKeyList, [key]));
        }
      }
      (_b = (_a2 = panel.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a2, event);
    }
    return import_react101.default.createElement(import_react101.default.Fragment, {
      key
    }, withNativeProps(panel.props, import_react101.default.createElement(list_default.Item, {
      className: (0, import_classnames11.default)(classPrefix15 + "-panel-header", (_classNames = {}, _classNames[classPrefix15 + "-panel-header-disabled"] = panel.props.disabled, _classNames)),
      onClick: panel.props.disabled ? void 0 : handleClick,
      arrow: import_react101.default.createElement("div", {
        className: (0, import_classnames11.default)(classPrefix15 + "-arrow", (_classNames2 = {}, _classNames2[classPrefix15 + "-arrow-active"] = active, _classNames2))
      }, import_react101.default.createElement(RightOutline_default, null))
    }, panel.props.title)), import_react101.default.createElement(CollapsePanelContent, {
      visible: active,
      forceRender: !!panel.props.forceRender,
      destroyOnClose: !!panel.props.destroyOnClose
    }, panel.props.children));
  }))));
};

// node_modules/antd-mobile/es/components/collapse/index.js
var collapse_default = attachPropertiesToComponent(Collapse, {
  Panel: CollapsePanel
});

// node_modules/antd-mobile/es/components/date-picker/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/date-picker/date-picker.css";

// node_modules/antd-mobile/es/components/date-picker/date-picker.js
init_define_process_env();
var import_react102 = __toModule(require_react());
var import_dayjs2 = __toModule(require_dayjs_min());

// node_modules/antd-mobile/es/utils/generate-int-array.js
init_define_process_env();
function generateIntArray(from, to2) {
  var array4 = [];
  for (var i = from; i <= to2; i++) {
    array4.push(i);
  }
  return array4;
}

// node_modules/antd-mobile/es/components/date-picker/date-picker.js
var precisionRankRecord = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
var thisYear = new Date().getFullYear();
var defaultProps12 = {
  min: new Date(new Date().setFullYear(thisYear - 10)),
  max: new Date(new Date().setFullYear(thisYear + 10)),
  precision: "day"
};
var DatePicker = withDefaultProps(defaultProps12)(function(props) {
  var _a;
  var _usePropsValue = usePropsValue({
    value: props.value,
    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null,
    onChange: props.onConfirm
  }), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  function columns(selected) {
    var ret = [];
    var minYear = props.min.getFullYear();
    var minMonth = props.min.getMonth() + 1;
    var minDay = props.min.getDate();
    var minHour = props.min.getHours();
    var minMinute = props.min.getMinutes();
    var minSecond = props.min.getSeconds();
    var maxYear = props.max.getFullYear();
    var maxMonth = props.max.getMonth() + 1;
    var maxDay = props.max.getDate();
    var maxHour = props.max.getHours();
    var maxMinute = props.max.getMinutes();
    var maxSecond = props.max.getSeconds();
    var rank = precisionRankRecord[props.precision];
    if (rank >= precisionRankRecord.year) {
      var years = [];
      for (var i = minYear; i <= maxYear; i++) {
        years.push(i.toString());
      }
      ret.push(years);
    }
    var firstDayInSelectedMonth = (0, import_dayjs2.default)(convertStringArrayToDate([selected[0], selected[1], "1"]));
    var selectedYear = parseInt(selected[0]);
    var selectedMonth = parseInt(selected[1]);
    var selectedDay = parseInt(selected[2]);
    var selectedHour = parseInt(selected[3]);
    var selectedMinute = parseInt(selected[4]);
    var isInMinYear = selectedYear === minYear;
    var isInMaxYear = selectedYear === maxYear;
    var isInMinMonth = isInMinYear && selectedMonth === minMonth;
    var isInMaxMonth = isInMaxYear && selectedMonth === maxMonth;
    var isInMinDay = isInMinMonth && selectedDay === minDay;
    var isInMaxDay = isInMaxMonth && selectedDay === maxDay;
    var isInMinHour = isInMinDay && selectedHour === minHour;
    var isInMaxHour = isInMaxDay && selectedHour === maxHour;
    var isInMinMinute = isInMinHour && selectedMinute === minMinute;
    var isInMaxMinute = isInMaxHour && selectedMinute === maxMinute;
    if (rank >= precisionRankRecord.month) {
      var lower = isInMinYear ? minMonth : 1;
      var upper = isInMaxYear ? maxMonth : 12;
      var months = generateIntArray(lower, upper);
      ret.push(months.map(function(v) {
        return v.toString();
      }));
    }
    if (rank >= precisionRankRecord.day) {
      var _lower = isInMinMonth ? minDay : 1;
      var _upper = isInMaxMonth ? maxDay : firstDayInSelectedMonth.daysInMonth();
      var days = generateIntArray(_lower, _upper);
      ret.push(days.map(function(v) {
        return v.toString();
      }));
    }
    if (rank >= precisionRankRecord.hour) {
      var _lower2 = isInMinDay ? minHour : 0;
      var _upper2 = isInMaxDay ? maxHour : 23;
      var hours = generateIntArray(_lower2, _upper2);
      ret.push(hours.map(function(v) {
        return {
          label: ("0" + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }
    if (rank >= precisionRankRecord.minute) {
      var _lower3 = isInMinHour ? minMinute : 0;
      var _upper3 = isInMaxHour ? maxMinute : 59;
      var minutes = generateIntArray(_lower3, _upper3);
      ret.push(minutes.map(function(v) {
        return {
          label: ("0" + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }
    if (rank >= precisionRankRecord.second) {
      var _lower4 = isInMinMinute ? minSecond : 0;
      var _upper4 = isInMaxMinute ? maxSecond : 59;
      var seconds = generateIntArray(_lower4, _upper4);
      ret.push(seconds.map(function(v) {
        return {
          label: ("0" + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }
    return ret;
  }
  var pickerValue = (0, import_react102.useMemo)(function() {
    return convertDateToStringArray(value);
  }, [value]);
  var onConfirm = (0, import_react102.useCallback)(function(val) {
    setValue2(convertStringArrayToDate(val));
  }, [setValue2]);
  var onSelect = (0, import_react102.useCallback)(function(val) {
    var _a2;
    var date4 = convertStringArrayToDate(val);
    if (date4) {
      (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, date4);
    }
  }, [props.onSelect]);
  return withNativeProps(props, import_react102.default.createElement(picker_default, {
    columns,
    value: pickerValue,
    onCancel: props.onCancel,
    onClose: props.onClose,
    visible: props.visible,
    confirmText: props.confirmText,
    cancelText: props.cancelText,
    onConfirm,
    onSelect,
    getContainer: props.getContainer,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    title: props.title,
    stopPropagation: props.stopPropagation
  }, function(items) {
    var _a2;
    return (_a2 = props.children) === null || _a2 === void 0 ? void 0 : _a2.call(props, convertStringArrayToDate(items.map(function(item) {
      return item === null || item === void 0 ? void 0 : item.value;
    })));
  }));
});
function convertDateToStringArray(date4) {
  if (!date4)
    return [];
  return [date4.getFullYear().toString(), (date4.getMonth() + 1).toString(), date4.getDate().toString(), date4.getHours().toString(), date4.getMinutes().toString(), date4.getSeconds().toString()];
}
function convertStringArrayToDate(value) {
  var _a, _b, _c, _d, _e, _f;
  if (value.length === 0)
    return null;
  var yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : "1900";
  var monthString = (_b = value[1]) !== null && _b !== void 0 ? _b : "1";
  var dateString = (_c = value[2]) !== null && _c !== void 0 ? _c : "1";
  var hourString = (_d = value[3]) !== null && _d !== void 0 ? _d : "0";
  var minuteString = (_e = value[4]) !== null && _e !== void 0 ? _e : "0";
  var secondString = (_f = value[5]) !== null && _f !== void 0 ? _f : "0";
  return new Date(parseInt(yearString), parseInt(monthString) - 1, parseInt(dateString), parseInt(hourString), parseInt(minuteString), parseInt(secondString));
}

// node_modules/antd-mobile/es/components/date-picker/prompt.js
init_define_process_env();
var import_react103 = __toModule(require_react());
function prompt3(props) {
  return new Promise(function(resolve) {
    var Wrapper = function Wrapper2() {
      var _useState = (0, import_react103.useState)(false), visible = _useState[0], setVisible = _useState[1];
      (0, import_react103.useEffect)(function() {
        setVisible(true);
      }, []);
      return import_react103.default.createElement(DatePicker, Object.assign({}, props, {
        visible,
        onConfirm: function onConfirm(val) {
          var _a;
          (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val);
          resolve(val);
        },
        onClose: function onClose() {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: function afterClose() {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    var unmount2 = renderToBody(import_react103.default.createElement(Wrapper, null));
  });
}

// node_modules/antd-mobile/es/components/date-picker/index.js
var date_picker_default = attachPropertiesToComponent(DatePicker, {
  prompt: prompt3
});

// node_modules/antd-mobile/es/components/desense-text/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/desense-text/desense-text.css";

// node_modules/antd-mobile/es/components/desense-text/desense-text.js
init_define_process_env();
var import_react104 = __toModule(require_react());
var import_classnames12 = __toModule(require_classnames());
var classPrefix16 = "adm-desense-text";
var defaultProps13 = {
  defaultDesense: true
};
var DesenseText = function DesenseText2(p) {
  var props = mergeProps(defaultProps13, p);
  var text = props.text, desenseText = props.desenseText;
  var _usePropsValue = usePropsValue({
    value: props.desense,
    defaultValue: props.defaultDesense,
    onChange: props.onChange
  }), isDesense = _usePropsValue[0], setIsDesense = _usePropsValue[1];
  return withNativeProps(props, import_react104.default.createElement("span", {
    className: classPrefix16
  }, isDesense ? desenseText : text, import_react104.default.createElement("a", {
    className: (0, import_classnames12.default)(classPrefix16 + "-icon-wrap", "adm-plain-anchor"),
    onClick: function onClick() {
      setIsDesense(!isDesense);
    }
  }, isDesense ? import_react104.default.createElement(EyeInvisibleOutline_default, null) : import_react104.default.createElement(EyeOutline_default, null))));
};

// node_modules/antd-mobile/es/components/desense-text/index.js
var desense_text_default = DesenseText;

// node_modules/antd-mobile/es/components/dialog/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/dialog/dialog.css";

// node_modules/antd-mobile/es/components/dialog/show.js
init_define_process_env();
var import_react109 = __toModule(require_react());

// node_modules/antd-mobile/es/components/dialog/dialog.js
init_define_process_env();
var import_react108 = __toModule(require_react());
var import_classnames15 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/dialog/dialog-action-button.js
init_define_process_env();
var import_react105 = __toModule(require_react());
var import_classnames13 = __toModule(require_classnames());
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DialogActionButton = function DialogActionButton2(props) {
  var action = props.action;
  var _useState = (0, import_react105.useState)(false), loading = _useState[0], setLoading = _useState[1];
  return withNativeProps(props.action, import_react105.default.createElement(button_default, {
    key: action.key,
    onClick: function onClick() {
      return __awaiter2(void 0, void 0, void 0, regeneratorRuntime.mark(function _callee() {
        var _a, _b;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setLoading(true);
                _context.prev = 1;
                _context.next = 4;
                return (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action);
              case 4:
                _context.next = 6;
                return (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props);
              case 6:
                _context.next = 12;
                break;
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](1);
                setLoading(false);
                throw _context.t0;
              case 12:
                setLoading(false);
              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 8]]);
      }));
    },
    className: (0, import_classnames13.default)("adm-dialog-button", {
      "adm-dialog-button-bold": action.bold
    }),
    fill: "none",
    block: true,
    color: action.danger ? "danger" : "primary",
    loading,
    disabled: action.disabled
  }, action.text));
};

// node_modules/antd-mobile/es/components/image/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/image/image.css";

// node_modules/antd-mobile/es/components/image/image.js
init_define_process_env();
var import_react106 = __toModule(require_react());
var import_staged_components = __toModule(require_staged_components());

// node_modules/antd-mobile/es/utils/to-css-length.js
init_define_process_env();
function toCSSLength(val) {
  return typeof val === "number" ? val + "px" : val;
}

// node_modules/antd-mobile/es/components/image/image.js
var classPrefix17 = "adm-image";
var defaultProps14 = {
  fit: "fill",
  placeholder: import_react106.default.createElement("div", {
    className: classPrefix17 + "-tip"
  }, import_react106.default.createElement(PictureOutline_default, null)),
  fallback: import_react106.default.createElement("div", {
    className: classPrefix17 + "-tip"
  }, import_react106.default.createElement(PictureWrongOutline_default, null)),
  lazy: false
};
var Image2 = (0, import_staged_components.staged)(function(p) {
  var props = mergeProps(defaultProps14, p);
  var _useState = (0, import_react106.useState)(false), loaded = _useState[0], setLoaded = _useState[1];
  var _useState2 = (0, import_react106.useState)(false), failed = _useState2[0], setFailed = _useState2[1];
  var ref = (0, import_react106.useRef)(null);
  var src = props.src;
  var srcSet = props.srcSet;
  if (!props.lazy) {
    return render();
  }
  return function() {
    var inViewport = useInViewport_default(ref);
    var initialized = useInitialized(inViewport);
    src = initialized ? props.src : void 0;
    srcSet = initialized ? props.srcSet : void 0;
    return render();
  };
  function renderInner() {
    if (failed) {
      return props.fallback;
    }
    return import_react106.default.createElement(import_react106.default.Fragment, null, !loaded && props.placeholder, import_react106.default.createElement("img", {
      className: classPrefix17 + "-img",
      src,
      alt: props.alt,
      onClick: props.onClick,
      onLoad: function onLoad() {
        setLoaded(true);
      },
      onError: function onError(e) {
        var _a;
        setFailed(true);
        (_a = props.onError) === null || _a === void 0 ? void 0 : _a.call(props, e);
      },
      style: {
        objectFit: props.fit,
        display: loaded ? "block" : "none"
      },
      crossOrigin: props.crossOrigin,
      decoding: props.decoding,
      loading: props.loading,
      referrerPolicy: props.referrerPolicy,
      sizes: props.sizes,
      srcSet,
      useMap: props.useMap
    }));
  }
  function render() {
    var style = {};
    if (props.width) {
      style["--width"] = toCSSLength(props.width);
    }
    if (props.height) {
      style["--height"] = toCSSLength(props.height);
    }
    return withNativeProps(props, import_react106.default.createElement("div", {
      ref,
      className: classPrefix17,
      style
    }, renderInner()));
  }
});

// node_modules/antd-mobile/es/components/image/index.js
var image_default = Image2;

// node_modules/antd-mobile/es/components/space/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/space/space.css";

// node_modules/antd-mobile/es/components/space/space.js
init_define_process_env();
var import_react107 = __toModule(require_react());
var import_classnames14 = __toModule(require_classnames());
var classPrefix18 = "adm-space";
var Space = withDefaultProps({
  direction: "horizontal"
})(function(props) {
  var _classNames;
  var direction = props.direction;
  return withNativeProps(props, import_react107.default.createElement("div", {
    className: (0, import_classnames14.default)(classPrefix18, (_classNames = {}, _classNames[classPrefix18 + "-wrap"] = props.wrap, _classNames[classPrefix18 + "-block"] = props.block, _classNames[classPrefix18 + "-" + direction] = true, _classNames[classPrefix18 + "-align-" + props.align] = !!props.align, _classNames[classPrefix18 + "-justify-" + props.justify] = !!props.justify, _classNames))
  }, import_react107.default.Children.map(props.children, function(child) {
    return child !== null && child !== void 0 && import_react107.default.createElement("div", {
      className: classPrefix18 + "-item"
    }, child);
  })));
});

// node_modules/antd-mobile/es/components/space/index.js
var space_default = Space;

// node_modules/antd-mobile/es/components/dialog/dialog.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var classPrefix19 = "adm-dialog";
var defaultProps15 = {
  actions: [],
  closeOnAction: false,
  closeOnMaskClick: false,
  stopPropagation: ["click"]
};
var Dialog = function Dialog2(p) {
  var props = mergeProps(defaultProps15, p);
  return import_react108.default.createElement(mask_default, {
    visible: props.visible,
    destroyOnClose: true,
    getContainer: props.getContainer,
    afterClose: props.afterClose,
    onMaskClick: props.closeOnMaskClick ? props.onClose : void 0,
    style: props.maskStyle,
    className: (0, import_classnames15.default)(classPrefix19 + "-mask", props.maskClassName),
    stopPropagation: props.stopPropagation
  }, import_react108.default.createElement("div", {
    onClick: function onClick(e) {
      return e.stopPropagation();
    },
    className: classPrefix19 + "-wrap"
  }, !!props.image && import_react108.default.createElement(image_default, {
    src: props.image,
    alt: "dialog header image",
    width: "100%"
  }), import_react108.default.createElement("div", {
    style: props.bodyStyle,
    className: (0, import_classnames15.default)(classPrefix19 + "-body", props.bodyClassName)
  }, import_react108.default.createElement(space_default, {
    direction: "vertical",
    block: true
  }, !!props.header && import_react108.default.createElement("div", {
    className: classPrefix19 + "-body-header-wrapper"
  }, import_react108.default.createElement("div", {
    className: classPrefix19 + "-body-header"
  }, props.header)), !!props.title && import_react108.default.createElement("div", {
    className: classPrefix19 + "-body-title"
  }, props.title), !!props.content && import_react108.default.createElement("div", {
    className: classPrefix19 + "-body-message-wrapper"
  }, import_react108.default.createElement("div", {
    className: classPrefix19 + "-body-message"
  }, props.content)))), import_react108.default.createElement("div", {
    className: classPrefix19 + "-footer"
  }, props.actions.map(function(row, index) {
    var actions = Array.isArray(row) ? row : [row];
    return import_react108.default.createElement("div", {
      className: classPrefix19 + "-action-row",
      key: index
    }, actions.map(function(action, index2) {
      return import_react108.default.createElement(DialogActionButton, {
        key: action.key,
        action,
        onAction: function onAction() {
          return __awaiter3(void 0, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            var _a, _b;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (_a = props.onAction) === null || _a === void 0 ? void 0 : _a.call(props, action, index2);
                  case 2:
                    if (props.closeOnAction) {
                      (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
                    }
                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
        }
      });
    }));
  }))));
};

// node_modules/antd-mobile/es/components/dialog/show.js
function show(props) {
  var Wrapper = (0, import_react109.forwardRef)(function(_, ref2) {
    var _useState = (0, import_react109.useState)(false), visible = _useState[0], setVisible = _useState[1];
    (0, import_react109.useEffect)(function() {
      setVisible(true);
    }, []);
    function handleClose() {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
      setVisible(false);
    }
    (0, import_react109.useImperativeHandle)(ref2, function() {
      return {
        close: handleClose
      };
    });
    return import_react109.default.createElement(Dialog, Object.assign({}, props, {
      visible,
      onClose: handleClose,
      afterClose: function afterClose() {
        var _a;
        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
        unmount2();
      }
    }));
  });
  var ref = (0, import_react109.createRef)();
  var unmount2 = renderToBody(import_react109.default.createElement(Wrapper, {
    ref
  }));
  return {
    close: function close() {
      var _a;
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
    }
  };
}

// node_modules/antd-mobile/es/components/dialog/alert.js
init_define_process_env();
function alert(p) {
  var defaultProps49 = {
    confirmText: getDefaultConfig().locale.Dialog.ok
  };
  var props = mergeProps(defaultProps49, p);
  return new Promise(function(resolve) {
    show(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      actions: [{
        key: "confirm",
        text: props.confirmText
      }],
      onAction: props.onConfirm,
      onClose: function onClose() {
        resolve();
      }
    }));
  });
}

// node_modules/antd-mobile/es/components/dialog/confirm.js
init_define_process_env();
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var defaultProps16 = {
  confirmText: "\u786E\u8BA4",
  cancelText: "\u53D6\u6D88"
};
function confirm(p) {
  var _this = this;
  var props = mergeProps(defaultProps16, p);
  return new Promise(function(resolve) {
    show(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      onClose: function onClose() {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        resolve(false);
      },
      actions: [[{
        key: "cancel",
        text: props.cancelText,
        onClick: function onClick() {
          return __awaiter4(_this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
            var _a;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);
                  case 2:
                    resolve(false);
                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
        }
      }, {
        key: "confirm",
        text: props.confirmText,
        bold: true,
        onClick: function onClick() {
          return __awaiter4(_this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
            var _b;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return (_b = props.onConfirm) === null || _b === void 0 ? void 0 : _b.call(props);
                  case 2:
                    resolve(true);
                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
        }
      }]]
    }));
  });
}

// node_modules/antd-mobile/es/components/dialog/index.js
var dialog_default = attachPropertiesToComponent(Dialog, {
  show,
  alert,
  confirm
});

// node_modules/antd-mobile/es/components/divider/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/divider/divider.css";

// node_modules/antd-mobile/es/components/divider/divider.js
init_define_process_env();
var import_react110 = __toModule(require_react());
var import_classnames16 = __toModule(require_classnames());
var classPrefix20 = "adm-divider";
var defaultProps17 = {
  contentPosition: "center"
};
var Divider = function Divider2(p) {
  var props = mergeProps(defaultProps17, p);
  return withNativeProps(props, import_react110.default.createElement("div", {
    className: (0, import_classnames16.default)(classPrefix20, classPrefix20 + "-" + props.contentPosition)
  }, props.children && import_react110.default.createElement("div", {
    className: classPrefix20 + "-content"
  }, props.children)));
};

// node_modules/antd-mobile/es/components/divider/index.js
var divider_default = Divider;

// node_modules/antd-mobile/es/components/dropdown/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/dropdown/dropdown.css";

// node_modules/antd-mobile/es/components/dropdown/dropdown.js
init_define_process_env();
var import_classnames18 = __toModule(require_classnames());
var import_react112 = __toModule(require_react());

// node_modules/antd-mobile/es/components/dropdown/item.js
init_define_process_env();
var import_classnames17 = __toModule(require_classnames());
var import_react111 = __toModule(require_react());
var classPrefix21 = "adm-dropdown-item";
var Item = function Item2(props) {
  var _classNames;
  var cls = (0, import_classnames17.default)(classPrefix21, (_classNames = {}, _classNames[classPrefix21 + "-active"] = props.active, _classNames[classPrefix21 + "-highlight"] = props.highlight, _classNames));
  return withNativeProps(props, import_react111.default.createElement("div", {
    className: cls,
    onClick: props.onClick
  }, import_react111.default.createElement("div", {
    className: classPrefix21 + "-title"
  }, import_react111.default.createElement("span", null, props.title))));
};
var item_default = Item;
var ItemChildrenWrap = function ItemChildrenWrap2(props) {
  var _classNames2;
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active;
  var shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);
  var cls = (0, import_classnames17.default)(classPrefix21 + "-content", (_classNames2 = {}, _classNames2[classPrefix21 + "-content-hidden"] = !active, _classNames2));
  return shouldRender ? import_react111.default.createElement("div", {
    className: cls,
    onClick: props.onClick
  }, props.children) : null;
};

// node_modules/antd-mobile/es/components/dropdown/dropdown.js
var classPrefix22 = "adm-dropdown";
var defaultProps18 = {
  defaultActiveKey: null
};
var Dropdown = function Dropdown2(p) {
  var _classNames;
  var props = mergeProps(defaultProps18, p);
  var _usePropsValue = usePropsValue({
    value: props.activeKey,
    defaultValue: props.defaultActiveKey,
    onChange: props.onChange
  }), value = _usePropsValue[0], onChange = _usePropsValue[1];
  var navRef = (0, import_react112.useRef)(null);
  var contentRef = (0, import_react112.useRef)(null);
  useClickAway(function() {
    onChange(null);
  }, [navRef, contentRef]);
  var _useState = (0, import_react112.useState)(), top = _useState[0], setTop = _useState[1];
  var containerRef = (0, import_react112.useRef)(null);
  (0, import_react112.useEffect)(function() {
    var container = containerRef.current;
    if (!container)
      return;
    if (value) {
      var rect = container.getBoundingClientRect();
      setTop(rect.bottom);
    }
  }, [value]);
  var changeActive = function changeActive2(key) {
    if (value === key) {
      onChange(null);
    } else {
      onChange(key);
    }
  };
  var popupForceRender = false;
  var items = [];
  var navs = import_react112.default.Children.map(props.children, function(child) {
    if (import_react112.default.isValidElement(child)) {
      var childProps = Object.assign(Object.assign({}, child.props), {
        onClick: function onClick() {
          changeActive(child.key);
        },
        active: child.key === value
      });
      items.push(child);
      if (child.props.forceRender)
        popupForceRender = true;
      return (0, import_react112.cloneElement)(child, childProps);
    } else {
      return child;
    }
  });
  return withNativeProps(props, import_react112.default.createElement("div", {
    className: (0, import_classnames18.default)(classPrefix22, (_classNames = {}, _classNames[classPrefix22 + "-open"] = !!value, _classNames)),
    ref: containerRef
  }, import_react112.default.createElement("div", {
    className: classPrefix22 + "-nav",
    ref: navRef
  }, navs), import_react112.default.createElement(popup_default, {
    visible: !!value,
    position: "top",
    className: classPrefix22 + "-popup",
    maskClassName: classPrefix22 + "-popup-mask",
    bodyClassName: classPrefix22 + "-popup-body",
    style: {
      top
    },
    forceRender: popupForceRender
  }, import_react112.default.createElement("div", {
    ref: contentRef
  }, items.map(function(item) {
    var isActive = item.key === value;
    return import_react112.default.createElement(ItemChildrenWrap, {
      key: item.key,
      active: isActive,
      forceRender: item.props.forceRender,
      destroyOnClose: item.props.destroyOnClose,
      onClick: item.props.closeOnContentClick ? function() {
        changeActive(null);
      } : void 0
    }, item.props.children);
  })))));
};
Dropdown.Item = item_default;
var dropdown_default = Dropdown;

// node_modules/antd-mobile/es/components/dropdown/index.js
var dropdown_default2 = dropdown_default;

// node_modules/antd-mobile/es/components/ellipsis/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/ellipsis/ellipsis.css";

// node_modules/antd-mobile/es/components/ellipsis/ellipsis.js
init_define_process_env();
var import_react114 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/use-resize-effect.js
init_define_process_env();
var import_react113 = __toModule(require_react());
function useResizeEffect(effect, targetRef) {
  var fn = usePersistFn_default2(effect);
  (0, import_react113.useLayoutEffect)(function() {
    var target = targetRef.current;
    if (!target)
      return;
    if (window.ResizeObserver) {
      var observer = new ResizeObserver(function() {
        fn();
      });
      observer.observe(target);
      return function() {
        observer.disconnect();
      };
    } else {
      fn();
    }
  }, [targetRef]);
}

// node_modules/antd-mobile/es/components/ellipsis/ellipsis.js
var classPrefix23 = "adm-ellipsis";
var defaultProps19 = {
  direction: "end",
  rows: 1
};
var Ellipsis = withDefaultProps(defaultProps19)(function(props) {
  var rootRef = (0, import_react114.useRef)(null);
  var _useState = (0, import_react114.useState)(""), ellipsised = _useState[0], setEllipsised = _useState[1];
  useResizeEffect(function() {
    var root = rootRef.current;
    if (!root)
      return;
    var originStyle = window.getComputedStyle(root);
    var container = document.createElement("div");
    var styleNames = Array.prototype.slice.apply(originStyle);
    styleNames.forEach(function(name) {
      container.style.setProperty(name, originStyle.getPropertyValue(name));
    });
    container.style.position = "fixed";
    container.style.left = "999999px";
    container.style.top = "999999px";
    container.style.zIndex = "-1000";
    container.style.height = "auto";
    container.style.minHeight = "auto";
    container.style.maxHeight = "auto";
    container.style.textOverflow = "clip";
    container.style.whiteSpace = "normal";
    container.style.webkitLineClamp = "unset";
    container.style.webkitBoxOrient = "unset";
    container.style.display = "block";
    var lineHeight = pxToNumber(originStyle.lineHeight);
    var maxHeight = Math.floor(lineHeight * props.rows + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));
    container.innerText = props.content;
    document.body.appendChild(container);
    if (container.offsetHeight <= maxHeight) {
      setEllipsised(props.content);
    } else {
      var check = function check2(left, right) {
        if (right - left <= 1) {
          if (props.direction === "end") {
            return props.content.slice(0, left) + "...";
          } else {
            return "..." + props.content.slice(right, end);
          }
        }
        var middle2 = Math.round((left + right) / 2);
        if (props.direction === "end") {
          container.innerText = props.content.slice(0, middle2) + "...";
        } else {
          container.innerText = "..." + props.content.slice(middle2, end);
        }
        if (container.offsetHeight <= maxHeight) {
          if (props.direction === "end") {
            return check2(middle2, right);
          } else {
            return check2(left, middle2);
          }
        } else {
          if (props.direction === "end") {
            return check2(left, middle2);
          } else {
            return check2(middle2, right);
          }
        }
      };
      var checkMiddle = function checkMiddle2(leftPart, rightPart) {
        if (leftPart[1] - leftPart[0] <= 1 && rightPart[1] - rightPart[0] <= 1) {
          return props.content.slice(0, leftPart[0]) + "..." + props.content.slice(rightPart[1], end);
        }
        var leftPartMiddle = Math.floor((leftPart[0] + leftPart[1]) / 2);
        var rightPartMiddle = Math.floor((rightPart[0] + rightPart[1]) / 2);
        container.innerText = props.content.slice(0, leftPartMiddle) + "..." + props.content.slice(rightPartMiddle, end);
        if (container.offsetHeight <= maxHeight) {
          return checkMiddle2([leftPartMiddle, leftPart[1]], [rightPart[0], rightPartMiddle]);
        } else {
          return checkMiddle2([leftPart[0], leftPartMiddle], [rightPartMiddle, rightPart[1]]);
        }
      };
      var end = props.content.length;
      var middle = Math.floor((0 + end) / 2);
      setEllipsised(props.direction === "middle" ? checkMiddle([0, middle], [middle, end]) : check(0, end));
    }
    document.body.removeChild(container);
  }, rootRef);
  return withNativeProps(props, import_react114.default.createElement("div", {
    ref: rootRef,
    className: classPrefix23
  }, ellipsised));
});
function pxToNumber(value) {
  if (!value)
    return 0;
  var match = value.match(/^\d*(\.\d*)?/);
  return match ? Number(match[0]) : 0;
}

// node_modules/antd-mobile/es/components/ellipsis/index.js
var ellipsis_default = Ellipsis;

// node_modules/antd-mobile/es/components/empty/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/empty/empty.css";

// node_modules/antd-mobile/es/components/empty/empty.js
init_define_process_env();
var import_react115 = __toModule(require_react());
var import_classnames19 = __toModule(require_classnames());
import EmptyIcon from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/empty-icon.svg";
var classPrefix24 = "adm-empty";
var defaultProps20 = {
  image: EmptyIcon
};
var Empty = function Empty2(p) {
  var props = mergeProps(defaultProps20, p);
  var imageNode = typeof props.image === "string" ? import_react115.default.createElement("img", {
    className: classPrefix24 + "-image",
    style: props.imageStyle,
    src: props.image,
    alt: "empty"
  }) : props.image;
  return withNativeProps(props, import_react115.default.createElement("div", {
    className: classPrefix24
  }, import_react115.default.createElement("div", {
    className: classPrefix24 + "-image-container"
  }, imageNode), props.description && import_react115.default.createElement("div", {
    className: (0, import_classnames19.default)(classPrefix24 + "-description")
  }, props.description)));
};

// node_modules/antd-mobile/es/components/empty/index.js
var empty_default = Empty;

// node_modules/antd-mobile/es/components/error-block/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/error-block/error-block.css";

// node_modules/antd-mobile/es/components/error-block/error-block.js
init_define_process_env();
var import_react116 = __toModule(require_react());
var import_classnames20 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/error-block/error.js
init_define_process_env();
import DefaultErrorIcon from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/default.svg";
import Busy from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/busy.svg";
import DisconnectedIcon from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/disconnected.svg";
import EmptyErrorIcon from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/empty.svg";
var iconRecord = {
  "default": DefaultErrorIcon,
  busy: Busy,
  disconnected: DisconnectedIcon,
  empty: EmptyErrorIcon
};

// node_modules/antd-mobile/es/components/error-block/error-block.js
var classPrefix25 = "adm-error-block";
var defaultProps21 = {
  status: "default"
};
var ErrorBlock = withDefaultProps(defaultProps21)(function(props) {
  var _classNames;
  var icon = iconRecord[props.status];
  var _useConfig = useConfig(), locale = _useConfig.locale;
  var contentPack = locale.ErrorBlock[props.status];
  var des = "description" in props ? props.description : contentPack.description;
  var title = "title" in props ? props.title : contentPack.title;
  var imageNode = import_react116.default.createElement("img", {
    src: icon
  });
  if (props.image) {
    if (typeof props.image === "string") {
      imageNode = import_react116.default.createElement("img", {
        src: props.image
      });
    } else {
      imageNode = props.image;
    }
  }
  return withNativeProps(props, import_react116.default.createElement("div", {
    className: (0, import_classnames20.default)(classPrefix25, (_classNames = {}, _classNames[classPrefix25 + "-full-page"] = props.fullPage, _classNames))
  }, import_react116.default.createElement("div", {
    className: classPrefix25 + "-image"
  }, imageNode), import_react116.default.createElement("div", {
    className: classPrefix25 + "-description"
  }, title && import_react116.default.createElement("div", {
    className: classPrefix25 + "-description-title"
  }, title), des && import_react116.default.createElement("div", {
    className: classPrefix25 + "-description-subtitle"
  }, des)), props.children && import_react116.default.createElement("div", {
    className: classPrefix25 + "-content"
  }, props.children)));
});

// node_modules/antd-mobile/es/components/error-block/index.js
var error_block_default = ErrorBlock;

// node_modules/antd-mobile/es/components/floating-panel/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/floating-panel/floating-panel.css";

// node_modules/antd-mobile/es/components/floating-panel/floating-panel.js
init_define_process_env();
var import_react117 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/nearest.js
init_define_process_env();
function nearest(arr, target) {
  return arr.reduce(function(pre, cur) {
    return Math.abs(pre - target) < Math.abs(cur - target) ? pre : cur;
  });
}

// node_modules/antd-mobile/es/components/floating-panel/floating-panel.js
var FloatingPanel = (0, import_react117.forwardRef)(function(props, ref) {
  var _a;
  var anchors = props.anchors;
  var maxHeight = (_a = anchors[anchors.length - 1]) !== null && _a !== void 0 ? _a : window.innerHeight;
  var possibles = anchors.map(function(x) {
    return -x;
  });
  var elementRef = (0, import_react117.useRef)(null);
  var headerRef = (0, import_react117.useRef)(null);
  var contentRef = (0, import_react117.useRef)(null);
  var _useState = (0, import_react117.useState)(false), pulling = _useState[0], setPulling = _useState[1];
  var pullingRef = (0, import_react117.useRef)(false);
  var bounds = {
    top: possibles[possibles.length - 1],
    bottom: possibles[0]
  };
  var _useSpring = useSpring(function() {
    return {
      y: bounds.bottom,
      config: {
        tension: 300
      }
    };
  }), y = _useSpring[0].y, api = _useSpring[1];
  useDrag(function(state) {
    var _state$offset = state.offset, offsetY = _state$offset[1];
    if (state.first) {
      var target = state.event.target;
      var header = headerRef.current;
      if (header === target || (header === null || header === void 0 ? void 0 : header.contains(target))) {
        pullingRef.current = true;
      } else {
        var reachedTop = y.goal <= bounds.top;
        var content = contentRef.current;
        if (!content)
          return;
        if (reachedTop) {
          if (content.scrollTop <= 0 && state.direction[1] > 0) {
            pullingRef.current = true;
          }
        } else {
          pullingRef.current = true;
        }
      }
    }
    setPulling(pullingRef.current);
    if (!pullingRef.current)
      return;
    var event = state.event;
    if (event.cancelable) {
      event.preventDefault();
    }
    event.stopPropagation();
    var nextY = offsetY;
    if (state.last) {
      pullingRef.current = false;
      setPulling(false);
      nextY = nearest(possibles, offsetY);
    }
    api.start({
      y: nextY
    });
  }, {
    axis: "y",
    bounds,
    rubberband: true,
    from: function from() {
      return [0, y.get()];
    },
    pointer: {
      touch: true
    },
    target: elementRef,
    eventOptions: supportsPassive ? {
      passive: false
    } : false
  });
  (0, import_react117.useImperativeHandle)(ref, function() {
    return {
      setHeight: function setHeight(height, options) {
        api.start({
          y: -height,
          immediate: options === null || options === void 0 ? void 0 : options.immediate
        });
      }
    };
  }, [api]);
  return withNativeProps(props, import_react117.default.createElement(animated.div, {
    ref: elementRef,
    className: "adm-floating-panel",
    style: {
      height: maxHeight,
      y
    }
  }, import_react117.default.createElement("div", {
    className: "adm-floating-panel-mask",
    style: {
      display: pulling ? "block" : "none"
    }
  }), import_react117.default.createElement("div", {
    className: "adm-floating-panel-header",
    ref: headerRef
  }, import_react117.default.createElement("div", {
    className: "adm-floating-panel-bar"
  })), import_react117.default.createElement("div", {
    className: "adm-floating-panel-content",
    ref: contentRef
  }, props.children)));
});

// node_modules/antd-mobile/es/components/floating-panel/index.js
var floating_panel_default = FloatingPanel;

// node_modules/antd-mobile/es/components/form/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/form/index.css";

// node_modules/antd-mobile/es/components/form/form.js
init_define_process_env();
var import_react120 = __toModule(require_react());
var import_classnames21 = __toModule(require_classnames());

// node_modules/rc-field-form/es/index.js
init_define_process_env();
var React53 = __toModule(require_react());

// node_modules/rc-field-form/es/Field.js
init_define_process_env();
var React48 = __toModule(require_react());

// node_modules/rc-field-form/es/FieldContext.js
init_define_process_env();
var React46 = __toModule(require_react());
var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
var warningFunc = function warningFunc2() {
  warning_default(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
};
var Context = React46.createContext({
  getFieldValue: warningFunc,
  getFieldsValue: warningFunc,
  getFieldError: warningFunc,
  getFieldWarning: warningFunc,
  getFieldsError: warningFunc,
  isFieldsTouched: warningFunc,
  isFieldTouched: warningFunc,
  isFieldValidating: warningFunc,
  isFieldsValidating: warningFunc,
  resetFields: warningFunc,
  setFields: warningFunc,
  setFieldsValue: warningFunc,
  validateFields: warningFunc,
  submit: warningFunc,
  getInternalHooks: function getInternalHooks() {
    warningFunc();
    return {
      dispatch: warningFunc,
      initEntityValue: warningFunc,
      registerField: warningFunc,
      useSubscribe: warningFunc,
      setInitialValues: warningFunc,
      setCallbacks: warningFunc,
      getFields: warningFunc,
      setValidateMessages: warningFunc,
      setPreserve: warningFunc,
      getInitialValue: warningFunc
    };
  }
});
var FieldContext_default = Context;

// node_modules/rc-field-form/es/utils/typeUtil.js
init_define_process_env();
function toArray3(value) {
  if (value === void 0 || value === null) {
    return [];
  }
  return Array.isArray(value) ? value : [value];
}

// node_modules/rc-field-form/es/utils/validateUtil.js
init_define_process_env();
var import_regenerator = __toModule(require_regenerator());

// node_modules/rc-field-form/node_modules/async-validator/dist-web/index.js
init_define_process_env();
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning = function warning2() {
};
if (typeof process !== "undefined" && define_process_env_default && true && typeof window !== "undefined" && typeof document !== "undefined") {
  warning = function warning3(type4, errors) {
    if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
      if (errors.every(function(e) {
        return typeof e === "string";
      })) {
        console.warn(type4, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var i = 0;
  var len = args.length;
  if (typeof template === "function") {
    return template.apply(null, args);
  }
  if (typeof template === "string") {
    var str = template.replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    return str;
  }
  return template;
}
function isNativeStringType(type4) {
  return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
}
function isEmptyValue(value, type4) {
  if (value === void 0 || value === null) {
    return true;
  }
  if (type4 === "array" && Array.isArray(value) && !value.length) {
    return true;
  }
  if (isNativeStringType(type4) && typeof value === "string" && !value) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors || []);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index;
    index = index + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k) {
    ret.push.apply(ret, objArr[k] || []);
  });
  return ret;
}
var AsyncValidationError = function(_Error) {
  _inheritsLoose(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(_wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
  if (option.first) {
    var _pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next);
    });
    _pending["catch"](function(e) {
      return e;
    });
    return _pending;
  }
  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function(resolve, reject) {
    var next = function next2(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve(source);
    }
    objArrKeys.forEach(function(key) {
      var arr = objArr[key];
      if (firstFields.indexOf(key) !== -1) {
        asyncSerialArray(arr, func, next);
      } else {
        asyncParallelArray(arr, func, next);
      }
    });
  });
  pending["catch"](function(e) {
    return e;
  });
  return pending;
}
function isErrorObj(obj) {
  return !!(obj && obj.message !== void 0);
}
function getValue(value, path) {
  var v = value;
  for (var i = 0; i < path.length; i++) {
    if (v == void 0) {
      return v;
    }
    v = v[path[i]];
  }
  return v;
}
function complementError(rule, source) {
  return function(oe) {
    var fieldValue;
    if (rule.fullFields) {
      fieldValue = getValue(source, rule.fullFields);
    } else {
      fieldValue = source[oe.field || rule.fullField];
    }
    if (isErrorObj(oe)) {
      oe.field = oe.field || rule.fullField;
      oe.fieldValue = fieldValue;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      fieldValue,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value = source[s];
        if (typeof value === "object" && typeof target[s] === "object") {
          target[s] = _extends5({}, target[s], value);
        } else {
          target[s] = value;
        }
      }
    }
  }
  return target;
}
var required$1 = function required(rule, value, source, errors, options, type4) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
    errors.push(format(options.messages.required, rule.fullField));
  }
};
var whitespace = function whitespace2(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === "") {
    errors.push(format(options.messages.whitespace, rule.fullField));
  }
};
var pattern$2 = {
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i"),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  "float": function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value);
    } catch (e) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }
    return typeof value === "number";
  },
  object: function object(value) {
    return typeof value === "object" && !types.array(value);
  },
  method: function method(value) {
    return typeof value === "function";
  },
  email: function email(value) {
    return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
  },
  url: function url(value) {
    return typeof value === "string" && value.length <= 2048 && !!value.match(pattern$2.url);
  },
  hex: function hex(value) {
    return typeof value === "string" && !!value.match(pattern$2.hex);
  }
};
var type$1 = function type(rule, value, source, errors, options) {
  if (rule.required && value === void 0) {
    required$1(rule, value, source, errors, options);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value !== rule.type) {
    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
  }
};
var range = function range2(rule, value, source, errors, options) {
  var len = typeof rule.len === "number";
  var min = typeof rule.min === "number";
  var max = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === "number";
  var str = typeof value === "string";
  var arr = Array.isArray(value);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value.length;
  }
  if (str) {
    val = value.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val < rule.min) {
    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
  } else if (max && !min && val > rule.max) {
    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
  } else if (min && max && (val < rule.min || val > rule.max)) {
    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
};
var ENUM$1 = "enum";
var enumerable$1 = function enumerable(rule, value, source, errors, options) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value) === -1) {
    errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
};
var pattern$1 = function pattern(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
};
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
var string = function string2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "string");
    if (!isEmptyValue(value, "string")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }
  callback(errors);
};
var method2 = function method3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var number2 = function number3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (value === "") {
      value = void 0;
    }
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var _boolean = function _boolean2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var regexp2 = function regexp3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var integer2 = function integer3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var floatFn = function floatFn2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var array2 = function array3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if ((value === void 0 || value === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "array");
    if (value !== void 0 && value !== null) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var object2 = function object3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var ENUM = "enum";
var enumerable2 = function enumerable3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules[ENUM](rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var pattern2 = function pattern3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "string")) {
      rules.pattern(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var date2 = function date3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "date")) {
      var dateObject;
      if (value instanceof Date) {
        dateObject = value;
      } else {
        dateObject = new Date(value);
      }
      rules.type(rule, dateObject, source, errors, options);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }
  callback(errors);
};
var required2 = function required3(rule, value, callback, source, options) {
  var errors = [];
  var type4 = Array.isArray(value) ? "array" : typeof value;
  rules.required(rule, value, source, errors, options, type4);
  callback(errors);
};
var type2 = function type3(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, ruleType);
    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var any = function any2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
  }
  callback(errors);
};
var validators = {
  string,
  method: method2,
  number: number2,
  "boolean": _boolean,
  regexp: regexp2,
  integer: integer2,
  "float": floatFn,
  array: array2,
  object: object2,
  "enum": enumerable2,
  pattern: pattern2,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required: required2,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
var Schema = function() {
  function Schema2(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  var _proto = Schema2.prototype;
  _proto.define = function define2(rules2) {
    var _this = this;
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    Object.keys(rules2).forEach(function(name) {
      var item = rules2[name];
      _this.rules[name] = Array.isArray(item) ? item : [item];
    });
  };
  _proto.messages = function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  };
  _proto.validate = function validate(source_, o, oc) {
    var _this2 = this;
    if (o === void 0) {
      o = {};
    }
    if (oc === void 0) {
      oc = function oc2() {
      };
    }
    var source = source_;
    var options = o;
    var callback = oc;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback(null, source);
      }
      return Promise.resolve(source);
    }
    function complete(results) {
      var errors = [];
      var fields = {};
      function add(e) {
        if (Array.isArray(e)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e);
        } else {
          errors.push(e);
        }
      }
      for (var i = 0; i < results.length; i++) {
        add(results[i]);
      }
      if (!errors.length) {
        callback(null, source);
      } else {
        fields = convertFieldsError(errors);
        callback(errors, fields);
      }
    }
    if (options.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options.messages);
      options.messages = messages$1;
    } else {
      options.messages = this.messages();
    }
    var series = {};
    var keys = options.keys || Object.keys(this.rules);
    keys.forEach(function(z) {
      var arr = _this2.rules[z];
      var value = source[z];
      arr.forEach(function(r) {
        var rule = r;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _extends5({}, source);
          }
          value = source[z] = rule.transform(value);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends5({}, rule);
        }
        rule.validator = _this2.getValidationMethod(rule);
        if (!rule.validator) {
          return;
        }
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this2.getType(rule);
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options, function(data, doIt) {
      var rule = data.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data.value);
      rule.field = data.field;
      function addFullField(key, schema) {
        return _extends5({}, schema, {
          fullField: rule.fullField + "." + key,
          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
        });
      }
      function cb(e) {
        if (e === void 0) {
          e = [];
        }
        var errorList = Array.isArray(e) ? e : [e];
        if (!options.suppressWarning && errorList.length) {
          Schema2.warning("async-validator:", errorList);
        }
        if (errorList.length && rule.message !== void 0) {
          errorList = [].concat(rule.message);
        }
        var filledErrors = errorList.map(complementError(rule, source));
        if (options.first && filledErrors.length) {
          errorFields[rule.field] = 1;
          return doIt(filledErrors);
        }
        if (!deep) {
          doIt(filledErrors);
        } else {
          if (rule.required && !data.value) {
            if (rule.message !== void 0) {
              filledErrors = [].concat(rule.message).map(complementError(rule, source));
            } else if (options.error) {
              filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
            }
            return doIt(filledErrors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            Object.keys(data.value).map(function(key) {
              fieldsSchema[key] = rule.defaultField;
            });
          }
          fieldsSchema = _extends5({}, fieldsSchema, data.rule.fields);
          var paredFieldsSchema = {};
          Object.keys(fieldsSchema).forEach(function(field) {
            var fieldSchema = fieldsSchema[field];
            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
          });
          var schema = new Schema2(paredFieldsSchema);
          schema.messages(options.messages);
          if (data.rule.options) {
            data.rule.options.messages = options.messages;
            data.rule.options.error = options.error;
          }
          schema.validate(data.value, data.rule.options || options, function(errs) {
            var finalErrors = [];
            if (filledErrors && filledErrors.length) {
              finalErrors.push.apply(finalErrors, filledErrors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data.value, cb, data.source, options);
      } else if (rule.validator) {
        res = rule.validator(rule, data.value, cb, data.source, options);
        if (res === true) {
          cb();
        } else if (res === false) {
          cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e) {
          return cb(e);
        });
      }
    }, function(results) {
      complete(results);
    }, source);
  };
  _proto.getType = function getType(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  };
  _proto.getValidationMethod = function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys = Object.keys(rule);
    var messageIndex = keys.indexOf("message");
    if (messageIndex !== -1) {
      keys.splice(messageIndex, 1);
    }
    if (keys.length === 1 && keys[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || void 0;
  };
  return Schema2;
}();
Schema.register = function register(type4, validator) {
  if (typeof validator !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type4] = validator;
};
Schema.warning = warning;
Schema.messages = messages;
Schema.validators = validators;

// node_modules/rc-field-form/es/utils/validateUtil.js
var React47 = __toModule(require_react());

// node_modules/rc-field-form/es/utils/messages.js
init_define_process_env();
var typeTemplate = "'${name}' is not a valid ${type}";
var defaultValidateMessages = {
  default: "Validation error on field '${name}'",
  required: "'${name}' is required",
  enum: "'${name}' must be one of [${enum}]",
  whitespace: "'${name}' cannot be empty",
  date: {
    format: "'${name}' is invalid for format date",
    parse: "'${name}' could not be parsed as date",
    invalid: "'${name}' is invalid date"
  },
  types: {
    string: typeTemplate,
    method: typeTemplate,
    array: typeTemplate,
    object: typeTemplate,
    number: typeTemplate,
    date: typeTemplate,
    boolean: typeTemplate,
    integer: typeTemplate,
    float: typeTemplate,
    regexp: typeTemplate,
    email: typeTemplate,
    url: typeTemplate,
    hex: typeTemplate
  },
  string: {
    len: "'${name}' must be exactly ${len} characters",
    min: "'${name}' must be at least ${min} characters",
    max: "'${name}' cannot be longer than ${max} characters",
    range: "'${name}' must be between ${min} and ${max} characters"
  },
  number: {
    len: "'${name}' must equal ${len}",
    min: "'${name}' cannot be less than ${min}",
    max: "'${name}' cannot be greater than ${max}",
    range: "'${name}' must be between ${min} and ${max}"
  },
  array: {
    len: "'${name}' must be exactly ${len} in length",
    min: "'${name}' cannot be less than ${min} in length",
    max: "'${name}' cannot be greater than ${max} in length",
    range: "'${name}' must be between ${min} and ${max} in length"
  },
  pattern: {
    mismatch: "'${name}' does not match pattern ${pattern}"
  }
};

// node_modules/rc-field-form/es/utils/valueUtil.js
init_define_process_env();
function getNamePath(path) {
  return toArray3(path);
}
function getValue2(store, namePath) {
  var value = get(store, namePath);
  return value;
}
function setValue(store, namePath, value) {
  var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var newStore = set(store, namePath, value, removeIfUndefined);
  return newStore;
}
function cloneByNamePathList(store, namePathList) {
  var newStore = {};
  namePathList.forEach(function(namePath) {
    var value = getValue2(store, namePath);
    newStore = setValue(newStore, namePath, value);
  });
  return newStore;
}
function containsNamePath(namePathList, namePath) {
  return namePathList && namePathList.some(function(path) {
    return matchNamePath(path, namePath);
  });
}
function isObject(obj) {
  return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
function internalSetValues(store, values) {
  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread2({}, store);
  if (!values) {
    return newStore;
  }
  Object.keys(values).forEach(function(key) {
    var prevValue = newStore[key];
    var value = values[key];
    var recursive = isObject(prevValue) && isObject(value);
    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;
  });
  return newStore;
}
function setValues(store) {
  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    restValues[_key - 1] = arguments[_key];
  }
  return restValues.reduce(function(current, newStore) {
    return internalSetValues(current, newStore);
  }, store);
}
function matchNamePath(namePath, changedNamePath) {
  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
    return false;
  }
  return namePath.every(function(nameUnit, i) {
    return changedNamePath[i] === nameUnit;
  });
}
function isSimilar(source, target) {
  if (source === target) {
    return true;
  }
  if (!source && target || source && !target) {
    return false;
  }
  if (!source || !target || _typeof(source) !== "object" || _typeof(target) !== "object") {
    return false;
  }
  var sourceKeys = Object.keys(source);
  var targetKeys = Object.keys(target);
  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));
  return _toConsumableArray(keys).every(function(key) {
    var sourceValue = source[key];
    var targetValue = target[key];
    if (typeof sourceValue === "function" && typeof targetValue === "function") {
      return true;
    }
    return sourceValue === targetValue;
  });
}
function defaultGetValueFromEvent(valuePropName) {
  var event = arguments.length <= 1 ? void 0 : arguments[1];
  if (event && event.target && valuePropName in event.target) {
    return event.target[valuePropName];
  }
  return event;
}
function move(array4, moveIndex, toIndex) {
  var length = array4.length;
  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {
    return array4;
  }
  var item = array4[moveIndex];
  var diff = moveIndex - toIndex;
  if (diff > 0) {
    return [].concat(_toConsumableArray(array4.slice(0, toIndex)), [item], _toConsumableArray(array4.slice(toIndex, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, length)));
  }
  if (diff < 0) {
    return [].concat(_toConsumableArray(array4.slice(0, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array4.slice(toIndex + 1, length)));
  }
  return array4;
}

// node_modules/rc-field-form/es/utils/validateUtil.js
var AsyncValidator = Schema;
function replaceMessage(template, kv) {
  return template.replace(/\$\{\w+\}/g, function(str) {
    var key = str.slice(2, -1);
    return kv[key];
  });
}
function validateRule(_x, _x2, _x3, _x4, _x5) {
  return _validateRule.apply(this, arguments);
}
function _validateRule() {
  _validateRule = _asyncToGenerator(import_regenerator.default.mark(function _callee2(name, value, rule, options, messageVariables) {
    var cloneRule, subRuleField, validator, messages2, result, subResults, kv, fillVariableResult;
    return import_regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            cloneRule = _objectSpread2({}, rule);
            delete cloneRule.ruleIndex;
            subRuleField = null;
            if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
              subRuleField = cloneRule.defaultField;
              delete cloneRule.defaultField;
            }
            validator = new AsyncValidator(_defineProperty({}, name, [cloneRule]));
            messages2 = setValues({}, defaultValidateMessages, options.validateMessages);
            validator.messages(messages2);
            result = [];
            _context2.prev = 8;
            _context2.next = 11;
            return Promise.resolve(validator.validate(_defineProperty({}, name, value), _objectSpread2({}, options)));
          case 11:
            _context2.next = 16;
            break;
          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](8);
            if (_context2.t0.errors) {
              result = _context2.t0.errors.map(function(_ref4, index) {
                var message = _ref4.message;
                return React47.isValidElement(message) ? React47.cloneElement(message, {
                  key: "error_".concat(index)
                }) : message;
              });
            } else {
              console.error(_context2.t0);
              result = [messages2.default];
            }
          case 16:
            if (!(!result.length && subRuleField)) {
              _context2.next = 21;
              break;
            }
            _context2.next = 19;
            return Promise.all(value.map(function(subValue, i) {
              return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
            }));
          case 19:
            subResults = _context2.sent;
            return _context2.abrupt("return", subResults.reduce(function(prev, errors) {
              return [].concat(_toConsumableArray(prev), _toConsumableArray(errors));
            }, []));
          case 21:
            kv = _objectSpread2(_objectSpread2({}, rule), {}, {
              name,
              enum: (rule.enum || []).join(", ")
            }, messageVariables);
            fillVariableResult = result.map(function(error) {
              if (typeof error === "string") {
                return replaceMessage(error, kv);
              }
              return error;
            });
            return _context2.abrupt("return", fillVariableResult);
          case 24:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[8, 13]]);
  }));
  return _validateRule.apply(this, arguments);
}
function validateRules(namePath, value, rules2, options, validateFirst, messageVariables) {
  var name = namePath.join(".");
  var filledRules = rules2.map(function(currentRule, ruleIndex) {
    var originValidatorFunc = currentRule.validator;
    var cloneRule = _objectSpread2(_objectSpread2({}, currentRule), {}, {
      ruleIndex
    });
    if (originValidatorFunc) {
      cloneRule.validator = function(rule, val, callback) {
        var hasPromise = false;
        var wrappedCallback = function wrappedCallback2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          Promise.resolve().then(function() {
            warning_default(!hasPromise, "Your validator function has already return a promise. `callback` will be ignored.");
            if (!hasPromise) {
              callback.apply(void 0, args);
            }
          });
        };
        var promise = originValidatorFunc(rule, val, wrappedCallback);
        hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
        warning_default(hasPromise, "`callback` is deprecated. Please return a promise instead.");
        if (hasPromise) {
          promise.then(function() {
            callback();
          }).catch(function(err) {
            callback(err || " ");
          });
        }
      };
    }
    return cloneRule;
  }).sort(function(_ref, _ref2) {
    var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
    var w2 = _ref2.warningOnly, i2 = _ref2.ruleIndex;
    if (!!w1 === !!w2) {
      return i1 - i2;
    }
    if (w1) {
      return 1;
    }
    return -1;
  });
  var summaryPromise;
  if (validateFirst === true) {
    summaryPromise = new Promise(function() {
      var _ref3 = _asyncToGenerator(import_regenerator.default.mark(function _callee(resolve, reject) {
        var i, rule, errors;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                i = 0;
              case 1:
                if (!(i < filledRules.length)) {
                  _context.next = 12;
                  break;
                }
                rule = filledRules[i];
                _context.next = 5;
                return validateRule(name, value, rule, options, messageVariables);
              case 5:
                errors = _context.sent;
                if (!errors.length) {
                  _context.next = 9;
                  break;
                }
                reject([{
                  errors,
                  rule
                }]);
                return _context.abrupt("return");
              case 9:
                i += 1;
                _context.next = 1;
                break;
              case 12:
                resolve([]);
              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function(_x6, _x7) {
        return _ref3.apply(this, arguments);
      };
    }());
  } else {
    var rulePromises = filledRules.map(function(rule) {
      return validateRule(name, value, rule, options, messageVariables).then(function(errors) {
        return {
          errors,
          rule
        };
      });
    });
    summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
      return Promise.reject(errors);
    });
  }
  summaryPromise.catch(function(e) {
    return e;
  });
  return summaryPromise;
}
function finishOnAllFailed(_x8) {
  return _finishOnAllFailed.apply(this, arguments);
}
function _finishOnAllFailed() {
  _finishOnAllFailed = _asyncToGenerator(import_regenerator.default.mark(function _callee3(rulePromises) {
    return import_regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
              var _ref5;
              var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArray(errorsList));
              return errors;
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _finishOnAllFailed.apply(this, arguments);
}
function finishOnFirstFailed(_x9) {
  return _finishOnFirstFailed.apply(this, arguments);
}
function _finishOnFirstFailed() {
  _finishOnFirstFailed = _asyncToGenerator(import_regenerator.default.mark(function _callee4(rulePromises) {
    var count;
    return import_regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            count = 0;
            return _context4.abrupt("return", new Promise(function(resolve) {
              rulePromises.forEach(function(promise) {
                promise.then(function(ruleError) {
                  if (ruleError.errors.length) {
                    resolve([ruleError]);
                  }
                  count += 1;
                  if (count === rulePromises.length) {
                    resolve([]);
                  }
                });
              });
            }));
          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _finishOnFirstFailed.apply(this, arguments);
}

// node_modules/rc-field-form/es/Field.js
var _excluded3 = ["name"];
var EMPTY_ERRORS = [];
function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
  if (typeof shouldUpdate === "function") {
    return shouldUpdate(prev, next, "source" in info ? {
      source: info.source
    } : {});
  }
  return prevValue !== nextValue;
}
var Field = function(_React$Component) {
  _inherits(Field2, _React$Component);
  var _super = _createSuper(Field2);
  function Field2(props) {
    var _this;
    _classCallCheck(this, Field2);
    _this = _super.call(this, props);
    _this.state = {
      resetCount: 0
    };
    _this.cancelRegisterFunc = null;
    _this.mounted = false;
    _this.touched = false;
    _this.dirty = false;
    _this.validatePromise = null;
    _this.prevValidating = void 0;
    _this.errors = EMPTY_ERRORS;
    _this.warnings = EMPTY_ERRORS;
    _this.cancelRegister = function() {
      var _this$props = _this.props, preserve = _this$props.preserve, isListField = _this$props.isListField, name = _this$props.name;
      if (_this.cancelRegisterFunc) {
        _this.cancelRegisterFunc(isListField, preserve, getNamePath(name));
      }
      _this.cancelRegisterFunc = null;
    };
    _this.getNamePath = function() {
      var _this$props2 = _this.props, name = _this$props2.name, fieldContext = _this$props2.fieldContext;
      var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
      return name !== void 0 ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name)) : [];
    };
    _this.getRules = function() {
      var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules2 = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
      return rules2.map(function(rule) {
        if (typeof rule === "function") {
          return rule(fieldContext);
        }
        return rule;
      });
    };
    _this.refresh = function() {
      if (!_this.mounted)
        return;
      _this.setState(function(_ref) {
        var resetCount = _ref.resetCount;
        return {
          resetCount: resetCount + 1
        };
      });
    };
    _this.triggerMetaEvent = function(destroy) {
      var onMetaChange = _this.props.onMetaChange;
      onMetaChange === null || onMetaChange === void 0 ? void 0 : onMetaChange(_objectSpread2(_objectSpread2({}, _this.getMeta()), {}, {
        destroy
      }));
    };
    _this.onStoreChange = function(prevStore, namePathList, info) {
      var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
      var store = info.store;
      var namePath = _this.getNamePath();
      var prevValue = _this.getValue(prevStore);
      var curValue = _this.getValue(store);
      var namePathMatch = namePathList && containsNamePath(namePathList, namePath);
      if (info.type === "valueUpdate" && info.source === "external" && prevValue !== curValue) {
        _this.touched = true;
        _this.dirty = true;
        _this.validatePromise = null;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.triggerMetaEvent();
      }
      switch (info.type) {
        case "reset":
          if (!namePathList || namePathMatch) {
            _this.touched = false;
            _this.dirty = false;
            _this.validatePromise = null;
            _this.errors = EMPTY_ERRORS;
            _this.warnings = EMPTY_ERRORS;
            _this.triggerMetaEvent();
            onReset === null || onReset === void 0 ? void 0 : onReset();
            _this.refresh();
            return;
          }
          break;
        case "setField": {
          if (namePathMatch) {
            var data = info.data;
            if ("touched" in data) {
              _this.touched = data.touched;
            }
            if ("validating" in data && !("originRCField" in data)) {
              _this.validatePromise = data.validating ? Promise.resolve([]) : null;
            }
            if ("errors" in data) {
              _this.errors = data.errors || EMPTY_ERRORS;
            }
            if ("warnings" in data) {
              _this.warnings = data.warnings || EMPTY_ERRORS;
            }
            _this.dirty = true;
            _this.triggerMetaEvent();
            _this.reRender();
            return;
          }
          if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
            _this.reRender();
            return;
          }
          break;
        }
        case "dependenciesUpdate": {
          var dependencyList = dependencies.map(getNamePath);
          if (dependencyList.some(function(dependency) {
            return containsNamePath(info.relatedFields, dependency);
          })) {
            _this.reRender();
            return;
          }
          break;
        }
        default:
          if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
            _this.reRender();
            return;
          }
          break;
      }
      if (shouldUpdate === true) {
        _this.reRender();
      }
    };
    _this.validateRules = function(options) {
      var namePath = _this.getNamePath();
      var currentValue = _this.getValue();
      var rootPromise = Promise.resolve().then(function() {
        if (!_this.mounted) {
          return [];
        }
        var _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables;
        var _ref2 = options || {}, triggerName = _ref2.triggerName;
        var filteredRules = _this.getRules();
        if (triggerName) {
          filteredRules = filteredRules.filter(function(rule) {
            var validateTrigger = rule.validateTrigger;
            if (!validateTrigger) {
              return true;
            }
            var triggerList = toArray3(validateTrigger);
            return triggerList.includes(triggerName);
          });
        }
        var promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
        promise.catch(function(e) {
          return e;
        }).then(function() {
          var ruleErrors = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_ERRORS;
          if (_this.validatePromise === rootPromise) {
            _this.validatePromise = null;
            var nextErrors = [];
            var nextWarnings = [];
            ruleErrors.forEach(function(_ref3) {
              var warningOnly = _ref3.rule.warningOnly, _ref3$errors = _ref3.errors, errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;
              if (warningOnly) {
                nextWarnings.push.apply(nextWarnings, _toConsumableArray(errors));
              } else {
                nextErrors.push.apply(nextErrors, _toConsumableArray(errors));
              }
            });
            _this.errors = nextErrors;
            _this.warnings = nextWarnings;
            _this.triggerMetaEvent();
            _this.reRender();
          }
        });
        return promise;
      });
      _this.validatePromise = rootPromise;
      _this.dirty = true;
      _this.errors = EMPTY_ERRORS;
      _this.warnings = EMPTY_ERRORS;
      _this.triggerMetaEvent();
      _this.reRender();
      return rootPromise;
    };
    _this.isFieldValidating = function() {
      return !!_this.validatePromise;
    };
    _this.isFieldTouched = function() {
      return _this.touched;
    };
    _this.isFieldDirty = function() {
      if (_this.dirty || _this.props.initialValue !== void 0) {
        return true;
      }
      var fieldContext = _this.props.fieldContext;
      var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
      if (getInitialValue(_this.getNamePath()) !== void 0) {
        return true;
      }
      return false;
    };
    _this.getErrors = function() {
      return _this.errors;
    };
    _this.getWarnings = function() {
      return _this.warnings;
    };
    _this.isListField = function() {
      return _this.props.isListField;
    };
    _this.isList = function() {
      return _this.props.isList;
    };
    _this.isPreserve = function() {
      return _this.props.preserve;
    };
    _this.getMeta = function() {
      _this.prevValidating = _this.isFieldValidating();
      var meta = {
        touched: _this.isFieldTouched(),
        validating: _this.prevValidating,
        errors: _this.errors,
        warnings: _this.warnings,
        name: _this.getNamePath()
      };
      return meta;
    };
    _this.getOnlyChild = function(children) {
      if (typeof children === "function") {
        var meta = _this.getMeta();
        return _objectSpread2(_objectSpread2({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
          isFunction: true
        });
      }
      var childList = toArray(children);
      if (childList.length !== 1 || !React48.isValidElement(childList[0])) {
        return {
          child: childList,
          isFunction: false
        };
      }
      return {
        child: childList[0],
        isFunction: false
      };
    };
    _this.getValue = function(store) {
      var getFieldsValue = _this.props.fieldContext.getFieldsValue;
      var namePath = _this.getNamePath();
      return getValue2(store || getFieldsValue(true), namePath);
    };
    _this.getControlled = function() {
      var childProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize2 = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
      var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : fieldContext.validateTrigger;
      var namePath = _this.getNamePath();
      var getInternalHooks3 = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
      var _getInternalHooks = getInternalHooks3(HOOK_MARK), dispatch = _getInternalHooks.dispatch;
      var value = _this.getValue();
      var mergedGetValueProps = getValueProps || function(val) {
        return _defineProperty({}, valuePropName, val);
      };
      var originTriggerFunc = childProps[trigger];
      var control = _objectSpread2(_objectSpread2({}, childProps), mergedGetValueProps(value));
      control[trigger] = function() {
        _this.touched = true;
        _this.dirty = true;
        _this.triggerMetaEvent();
        var newValue;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (getValueFromEvent) {
          newValue = getValueFromEvent.apply(void 0, args);
        } else {
          newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
        }
        if (normalize2) {
          newValue = normalize2(newValue, value, getFieldsValue(true));
        }
        dispatch({
          type: "updateValue",
          namePath,
          value: newValue
        });
        if (originTriggerFunc) {
          originTriggerFunc.apply(void 0, args);
        }
      };
      var validateTriggerList = toArray3(mergedValidateTrigger || []);
      validateTriggerList.forEach(function(triggerName) {
        var originTrigger = control[triggerName];
        control[triggerName] = function() {
          if (originTrigger) {
            originTrigger.apply(void 0, arguments);
          }
          var rules2 = _this.props.rules;
          if (rules2 && rules2.length) {
            dispatch({
              type: "validateField",
              namePath,
              triggerName
            });
          }
        };
      });
      return control;
    };
    if (props.fieldContext) {
      var getInternalHooks2 = props.fieldContext.getInternalHooks;
      var _getInternalHooks2 = getInternalHooks2(HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
      initEntityValue(_assertThisInitialized(_this));
    }
    return _this;
  }
  _createClass(Field2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
      this.mounted = true;
      if (fieldContext) {
        var getInternalHooks2 = fieldContext.getInternalHooks;
        var _getInternalHooks3 = getInternalHooks2(HOOK_MARK), registerField = _getInternalHooks3.registerField;
        this.cancelRegisterFunc = registerField(this);
      }
      if (shouldUpdate === true) {
        this.reRender();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelRegister();
      this.triggerMetaEvent(true);
      this.mounted = false;
    }
  }, {
    key: "reRender",
    value: function reRender() {
      if (!this.mounted)
        return;
      this.forceUpdate();
    }
  }, {
    key: "render",
    value: function render() {
      var resetCount = this.state.resetCount;
      var children = this.props.children;
      var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction3 = _this$getOnlyChild.isFunction;
      var returnChildNode;
      if (isFunction3) {
        returnChildNode = child;
      } else if (React48.isValidElement(child)) {
        returnChildNode = React48.cloneElement(child, this.getControlled(child.props));
      } else {
        warning_default(!child, "`children` of Field is not validate ReactElement.");
        returnChildNode = child;
      }
      return React48.createElement(React48.Fragment, {
        key: resetCount
      }, returnChildNode);
    }
  }]);
  return Field2;
}(React48.Component);
Field.contextType = FieldContext_default;
Field.defaultProps = {
  trigger: "onChange",
  valuePropName: "value"
};
function WrapperField(_ref5) {
  var name = _ref5.name, restProps = _objectWithoutProperties(_ref5, _excluded3);
  var fieldContext = React48.useContext(FieldContext_default);
  var namePath = name !== void 0 ? getNamePath(name) : void 0;
  var key = "keep";
  if (!restProps.isListField) {
    key = "_".concat((namePath || []).join("_"));
  }
  if (restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
    warning_default(false, "`preserve` should not apply on Form.List fields.");
  }
  return React48.createElement(Field, _extends({
    key,
    name: namePath
  }, restProps, {
    fieldContext
  }));
}
var Field_default = WrapperField;

// node_modules/rc-field-form/es/List.js
init_define_process_env();
var React49 = __toModule(require_react());
var List3 = function List4(_ref) {
  var name = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules2 = _ref.rules, validateTrigger = _ref.validateTrigger;
  var context = React49.useContext(FieldContext_default);
  var keyRef = React49.useRef({
    keys: [],
    id: 0
  });
  var keyManager = keyRef.current;
  if (typeof children !== "function") {
    warning_default(false, "Form.List only accepts function as children.");
    return null;
  }
  var parentPrefixName = getNamePath(context.prefixName) || [];
  var prefixName = [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));
  var shouldUpdate = function shouldUpdate2(prevValue, nextValue, _ref2) {
    var source = _ref2.source;
    if (source === "internal") {
      return false;
    }
    return prevValue !== nextValue;
  };
  return React49.createElement(FieldContext_default.Provider, {
    value: _objectSpread2(_objectSpread2({}, context), {}, {
      prefixName
    })
  }, React49.createElement(Field_default, {
    name: [],
    shouldUpdate,
    rules: rules2,
    validateTrigger,
    initialValue,
    isList: true
  }, function(_ref3, meta) {
    var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange = _ref3.onChange;
    var getFieldValue = context.getFieldValue;
    var getNewValue = function getNewValue2() {
      var values = getFieldValue(prefixName || []);
      return values || [];
    };
    var operations = {
      add: function add(defaultValue, index) {
        var newValue = getNewValue();
        if (index >= 0 && index <= newValue.length) {
          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index)));
          onChange([].concat(_toConsumableArray(newValue.slice(0, index)), [defaultValue], _toConsumableArray(newValue.slice(index))));
        } else {
          if (index < 0 || index > newValue.length) {
            warning_default(false, "The second parameter of the add function should be a valid positive number.");
          }
          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
          onChange([].concat(_toConsumableArray(newValue), [defaultValue]));
        }
        keyManager.id += 1;
      },
      remove: function remove(index) {
        var newValue = getNewValue();
        var indexSet = new Set(Array.isArray(index) ? index : [index]);
        if (indexSet.size <= 0) {
          return;
        }
        keyManager.keys = keyManager.keys.filter(function(_, keysIndex) {
          return !indexSet.has(keysIndex);
        });
        onChange(newValue.filter(function(_, valueIndex) {
          return !indexSet.has(valueIndex);
        }));
      },
      move: function move2(from, to2) {
        if (from === to2) {
          return;
        }
        var newValue = getNewValue();
        if (from < 0 || from >= newValue.length || to2 < 0 || to2 >= newValue.length) {
          return;
        }
        keyManager.keys = move(keyManager.keys, from, to2);
        onChange(move(newValue, from, to2));
      }
    };
    var listValue = value || [];
    if (!Array.isArray(listValue)) {
      listValue = [];
      if (true) {
        warning_default(false, "Current value of '".concat(prefixName.join(" > "), "' is not an array type."));
      }
    }
    return children(listValue.map(function(__, index) {
      var key = keyManager.keys[index];
      if (key === void 0) {
        keyManager.keys[index] = keyManager.id;
        key = keyManager.keys[index];
        keyManager.id += 1;
      }
      return {
        name: index,
        key,
        isListField: true
      };
    }), operations, meta);
  }));
};
var List_default = List3;

// node_modules/rc-field-form/es/useForm.js
init_define_process_env();
var React50 = __toModule(require_react());

// node_modules/rc-field-form/es/utils/asyncUtil.js
init_define_process_env();
function allPromiseFinish(promiseList) {
  var hasError = false;
  var count = promiseList.length;
  var results = [];
  if (!promiseList.length) {
    return Promise.resolve([]);
  }
  return new Promise(function(resolve, reject) {
    promiseList.forEach(function(promise, index) {
      promise.catch(function(e) {
        hasError = true;
        return e;
      }).then(function(result) {
        count -= 1;
        results[index] = result;
        if (count > 0) {
          return;
        }
        if (hasError) {
          reject(results);
        }
        resolve(results);
      });
    });
  });
}

// node_modules/rc-field-form/es/utils/NameMap.js
init_define_process_env();
var SPLIT = "__@field_split__";
function normalize(namePath) {
  return namePath.map(function(cell) {
    return "".concat(_typeof(cell), ":").concat(cell);
  }).join(SPLIT);
}
var NameMap = function() {
  function NameMap2() {
    _classCallCheck(this, NameMap2);
    this.kvs = new Map();
  }
  _createClass(NameMap2, [{
    key: "set",
    value: function set2(key, value) {
      this.kvs.set(normalize(key), value);
    }
  }, {
    key: "get",
    value: function get2(key) {
      return this.kvs.get(normalize(key));
    }
  }, {
    key: "update",
    value: function update3(key, updater) {
      var origin = this.get(key);
      var next = updater(origin);
      if (!next) {
        this.delete(key);
      } else {
        this.set(key, next);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this.kvs.delete(normalize(key));
    }
  }, {
    key: "map",
    value: function map(callback) {
      return _toConsumableArray(this.kvs.entries()).map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
        var cells = key.split(SPLIT);
        return callback({
          key: cells.map(function(cell) {
            var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArray(_cell$match, 3), type4 = _cell$match2[1], unit = _cell$match2[2];
            return type4 === "number" ? Number(unit) : unit;
          }),
          value
        });
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var json = {};
      this.map(function(_ref3) {
        var key = _ref3.key, value = _ref3.value;
        json[key.join(".")] = value;
        return null;
      });
      return json;
    }
  }]);
  return NameMap2;
}();
var NameMap_default = NameMap;

// node_modules/rc-field-form/es/useForm.js
var _excluded4 = ["name", "errors"];
var FormStore = function FormStore2(forceRootUpdate) {
  var _this = this;
  _classCallCheck(this, FormStore2);
  this.formHooked = false;
  this.forceRootUpdate = void 0;
  this.subscribable = true;
  this.store = {};
  this.fieldEntities = [];
  this.initialValues = {};
  this.callbacks = {};
  this.validateMessages = null;
  this.preserve = null;
  this.lastValidatePromise = null;
  this.getForm = function() {
    return {
      getFieldValue: _this.getFieldValue,
      getFieldsValue: _this.getFieldsValue,
      getFieldError: _this.getFieldError,
      getFieldWarning: _this.getFieldWarning,
      getFieldsError: _this.getFieldsError,
      isFieldsTouched: _this.isFieldsTouched,
      isFieldTouched: _this.isFieldTouched,
      isFieldValidating: _this.isFieldValidating,
      isFieldsValidating: _this.isFieldsValidating,
      resetFields: _this.resetFields,
      setFields: _this.setFields,
      setFieldsValue: _this.setFieldsValue,
      validateFields: _this.validateFields,
      submit: _this.submit,
      getInternalHooks: _this.getInternalHooks
    };
  };
  this.getInternalHooks = function(key) {
    if (key === HOOK_MARK) {
      _this.formHooked = true;
      return {
        dispatch: _this.dispatch,
        initEntityValue: _this.initEntityValue,
        registerField: _this.registerField,
        useSubscribe: _this.useSubscribe,
        setInitialValues: _this.setInitialValues,
        setCallbacks: _this.setCallbacks,
        setValidateMessages: _this.setValidateMessages,
        getFields: _this.getFields,
        setPreserve: _this.setPreserve,
        getInitialValue: _this.getInitialValue
      };
    }
    warning_default(false, "`getInternalHooks` is internal usage. Should not call directly.");
    return null;
  };
  this.useSubscribe = function(subscribable) {
    _this.subscribable = subscribable;
  };
  this.setInitialValues = function(initialValues, init) {
    _this.initialValues = initialValues || {};
    if (init) {
      _this.store = setValues({}, initialValues, _this.store);
    }
  };
  this.getInitialValue = function(namePath) {
    return getValue2(_this.initialValues, namePath);
  };
  this.setCallbacks = function(callbacks) {
    _this.callbacks = callbacks;
  };
  this.setValidateMessages = function(validateMessages) {
    _this.validateMessages = validateMessages;
  };
  this.setPreserve = function(preserve) {
    _this.preserve = preserve;
  };
  this.timeoutId = null;
  this.warningUnhooked = function() {
    if (!_this.timeoutId && typeof window !== "undefined") {
      _this.timeoutId = setTimeout(function() {
        _this.timeoutId = null;
        if (!_this.formHooked) {
          warning_default(false, "Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?");
        }
      });
    }
  };
  this.getFieldEntities = function() {
    var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (!pure) {
      return _this.fieldEntities;
    }
    return _this.fieldEntities.filter(function(field) {
      return field.getNamePath().length;
    });
  };
  this.getFieldsMap = function() {
    var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var cache2 = new NameMap_default();
    _this.getFieldEntities(pure).forEach(function(field) {
      var namePath = field.getNamePath();
      cache2.set(namePath, field);
    });
    return cache2;
  };
  this.getFieldEntitiesForNamePathList = function(nameList) {
    if (!nameList) {
      return _this.getFieldEntities(true);
    }
    var cache2 = _this.getFieldsMap(true);
    return nameList.map(function(name) {
      var namePath = getNamePath(name);
      return cache2.get(namePath) || {
        INVALIDATE_NAME_PATH: getNamePath(name)
      };
    });
  };
  this.getFieldsValue = function(nameList, filterFunc) {
    _this.warningUnhooked();
    if (nameList === true && !filterFunc) {
      return _this.store;
    }
    var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);
    var filteredNameList = [];
    fieldEntities.forEach(function(entity) {
      var _entity$isListField;
      var namePath = "INVALIDATE_NAME_PATH" in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();
      if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {
        return;
      }
      if (!filterFunc) {
        filteredNameList.push(namePath);
      } else {
        var meta = "getMeta" in entity ? entity.getMeta() : null;
        if (filterFunc(meta)) {
          filteredNameList.push(namePath);
        }
      }
    });
    return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
  };
  this.getFieldValue = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    return getValue2(_this.store, namePath);
  };
  this.getFieldsError = function(nameList) {
    _this.warningUnhooked();
    var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
    return fieldEntities.map(function(entity, index) {
      if (entity && !("INVALIDATE_NAME_PATH" in entity)) {
        return {
          name: entity.getNamePath(),
          errors: entity.getErrors(),
          warnings: entity.getWarnings()
        };
      }
      return {
        name: getNamePath(nameList[index]),
        errors: [],
        warnings: []
      };
    });
  };
  this.getFieldError = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    var fieldError = _this.getFieldsError([namePath])[0];
    return fieldError.errors;
  };
  this.getFieldWarning = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    var fieldError = _this.getFieldsError([namePath])[0];
    return fieldError.warnings;
  };
  this.isFieldsTouched = function() {
    _this.warningUnhooked();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var arg0 = args[0], arg1 = args[1];
    var namePathList;
    var isAllFieldsTouched = false;
    if (args.length === 0) {
      namePathList = null;
    } else if (args.length === 1) {
      if (Array.isArray(arg0)) {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = false;
      } else {
        namePathList = null;
        isAllFieldsTouched = arg0;
      }
    } else {
      namePathList = arg0.map(getNamePath);
      isAllFieldsTouched = arg1;
    }
    var fieldEntities = _this.getFieldEntities(true);
    var isFieldTouched = function isFieldTouched2(field) {
      return field.isFieldTouched();
    };
    if (!namePathList) {
      return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
    }
    var map = new NameMap_default();
    namePathList.forEach(function(shortNamePath) {
      map.set(shortNamePath, []);
    });
    fieldEntities.forEach(function(field) {
      var fieldNamePath = field.getNamePath();
      namePathList.forEach(function(shortNamePath) {
        if (shortNamePath.every(function(nameUnit, i) {
          return fieldNamePath[i] === nameUnit;
        })) {
          map.update(shortNamePath, function(list) {
            return [].concat(_toConsumableArray(list), [field]);
          });
        }
      });
    });
    var isNamePathListTouched = function isNamePathListTouched2(entities) {
      return entities.some(isFieldTouched);
    };
    var namePathListEntities = map.map(function(_ref) {
      var value = _ref.value;
      return value;
    });
    return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
  };
  this.isFieldTouched = function(name) {
    _this.warningUnhooked();
    return _this.isFieldsTouched([name]);
  };
  this.isFieldsValidating = function(nameList) {
    _this.warningUnhooked();
    var fieldEntities = _this.getFieldEntities();
    if (!nameList) {
      return fieldEntities.some(function(testField) {
        return testField.isFieldValidating();
      });
    }
    var namePathList = nameList.map(getNamePath);
    return fieldEntities.some(function(testField) {
      var fieldNamePath = testField.getNamePath();
      return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
    });
  };
  this.isFieldValidating = function(name) {
    _this.warningUnhooked();
    return _this.isFieldsValidating([name]);
  };
  this.resetWithFieldInitialValue = function() {
    var info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var cache2 = new NameMap_default();
    var fieldEntities = _this.getFieldEntities(true);
    fieldEntities.forEach(function(field) {
      var initialValue = field.props.initialValue;
      var namePath = field.getNamePath();
      if (initialValue !== void 0) {
        var records = cache2.get(namePath) || new Set();
        records.add({
          entity: field,
          value: initialValue
        });
        cache2.set(namePath, records);
      }
    });
    var resetWithFields = function resetWithFields2(entities) {
      entities.forEach(function(field) {
        var initialValue = field.props.initialValue;
        if (initialValue !== void 0) {
          var namePath = field.getNamePath();
          var formInitialValue = _this.getInitialValue(namePath);
          if (formInitialValue !== void 0) {
            warning_default(false, "Form already set 'initialValues' with path '".concat(namePath.join("."), "'. Field can not overwrite it."));
          } else {
            var records = cache2.get(namePath);
            if (records && records.size > 1) {
              warning_default(false, "Multiple Field with path '".concat(namePath.join("."), "' set 'initialValue'. Can not decide which one to pick."));
            } else if (records) {
              var originValue = _this.getFieldValue(namePath);
              if (!info.skipExist || originValue === void 0) {
                _this.store = setValue(_this.store, namePath, _toConsumableArray(records)[0].value);
              }
            }
          }
        }
      });
    };
    var requiredFieldEntities;
    if (info.entities) {
      requiredFieldEntities = info.entities;
    } else if (info.namePathList) {
      requiredFieldEntities = [];
      info.namePathList.forEach(function(namePath) {
        var records = cache2.get(namePath);
        if (records) {
          var _requiredFieldEntitie;
          (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function(r) {
            return r.entity;
          })));
        }
      });
    } else {
      requiredFieldEntities = fieldEntities;
    }
    resetWithFields(requiredFieldEntities);
  };
  this.resetFields = function(nameList) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    if (!nameList) {
      _this.store = setValues({}, _this.initialValues);
      _this.resetWithFieldInitialValue();
      _this.notifyObservers(prevStore, null, {
        type: "reset"
      });
      return;
    }
    var namePathList = nameList.map(getNamePath);
    namePathList.forEach(function(namePath) {
      var initialValue = _this.getInitialValue(namePath);
      _this.store = setValue(_this.store, namePath, initialValue);
    });
    _this.resetWithFieldInitialValue({
      namePathList
    });
    _this.notifyObservers(prevStore, namePathList, {
      type: "reset"
    });
  };
  this.setFields = function(fields) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    fields.forEach(function(fieldData) {
      var name = fieldData.name, errors = fieldData.errors, data = _objectWithoutProperties(fieldData, _excluded4);
      var namePath = getNamePath(name);
      if ("value" in data) {
        _this.store = setValue(_this.store, namePath, data.value);
      }
      _this.notifyObservers(prevStore, [namePath], {
        type: "setField",
        data: fieldData
      });
    });
  };
  this.getFields = function() {
    var entities = _this.getFieldEntities(true);
    var fields = entities.map(function(field) {
      var namePath = field.getNamePath();
      var meta = field.getMeta();
      var fieldData = _objectSpread2(_objectSpread2({}, meta), {}, {
        name: namePath,
        value: _this.getFieldValue(namePath)
      });
      Object.defineProperty(fieldData, "originRCField", {
        value: true
      });
      return fieldData;
    });
    return fields;
  };
  this.initEntityValue = function(entity) {
    var initialValue = entity.props.initialValue;
    if (initialValue !== void 0) {
      var namePath = entity.getNamePath();
      var prevValue = getValue2(_this.store, namePath);
      if (prevValue === void 0) {
        _this.store = setValue(_this.store, namePath, initialValue);
      }
    }
  };
  this.registerField = function(entity) {
    _this.fieldEntities.push(entity);
    if (entity.props.initialValue !== void 0) {
      var prevStore = _this.store;
      _this.resetWithFieldInitialValue({
        entities: [entity],
        skipExist: true
      });
      _this.notifyObservers(prevStore, [entity.getNamePath()], {
        type: "valueUpdate",
        source: "internal"
      });
    }
    return function(isListField, preserve) {
      var subNamePath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      _this.fieldEntities = _this.fieldEntities.filter(function(item) {
        return item !== entity;
      });
      var mergedPreserve = preserve !== void 0 ? preserve : _this.preserve;
      if (mergedPreserve === false && (!isListField || subNamePath.length > 1)) {
        var namePath = entity.getNamePath();
        var defaultValue = isListField ? void 0 : getValue2(_this.initialValues, namePath);
        if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
          return !matchNamePath(field.getNamePath(), namePath);
        })) {
          _this.store = setValue(_this.store, namePath, defaultValue, true);
        }
      }
    };
  };
  this.dispatch = function(action) {
    switch (action.type) {
      case "updateValue": {
        var namePath = action.namePath, value = action.value;
        _this.updateValue(namePath, value);
        break;
      }
      case "validateField": {
        var _namePath = action.namePath, triggerName = action.triggerName;
        _this.validateFields([_namePath], {
          triggerName
        });
        break;
      }
      default:
    }
  };
  this.notifyObservers = function(prevStore, namePathList, info) {
    if (_this.subscribable) {
      var mergedInfo = _objectSpread2(_objectSpread2({}, info), {}, {
        store: _this.getFieldsValue(true)
      });
      _this.getFieldEntities().forEach(function(_ref2) {
        var onStoreChange = _ref2.onStoreChange;
        onStoreChange(prevStore, namePathList, mergedInfo);
      });
    } else {
      _this.forceRootUpdate();
    }
  };
  this.updateValue = function(name, value) {
    var namePath = getNamePath(name);
    var prevStore = _this.store;
    _this.store = setValue(_this.store, namePath, value);
    _this.notifyObservers(prevStore, [namePath], {
      type: "valueUpdate",
      source: "internal"
    });
    var childrenFields = _this.getDependencyChildrenFields(namePath);
    if (childrenFields.length) {
      _this.validateFields(childrenFields);
    }
    _this.notifyObservers(prevStore, childrenFields, {
      type: "dependenciesUpdate",
      relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
    });
    var onValuesChange = _this.callbacks.onValuesChange;
    if (onValuesChange) {
      var changedValues = cloneByNamePathList(_this.store, [namePath]);
      onValuesChange(changedValues, _this.getFieldsValue());
    }
    _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
  };
  this.setFieldsValue = function(store) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    if (store) {
      _this.store = setValues(_this.store, store);
    }
    _this.notifyObservers(prevStore, null, {
      type: "valueUpdate",
      source: "external"
    });
  };
  this.getDependencyChildrenFields = function(rootNamePath) {
    var children = new Set();
    var childrenFields = [];
    var dependencies2fields = new NameMap_default();
    _this.getFieldEntities().forEach(function(field) {
      var dependencies = field.props.dependencies;
      (dependencies || []).forEach(function(dependency) {
        var dependencyNamePath = getNamePath(dependency);
        dependencies2fields.update(dependencyNamePath, function() {
          var fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Set();
          fields.add(field);
          return fields;
        });
      });
    });
    var fillChildren = function fillChildren2(namePath) {
      var fields = dependencies2fields.get(namePath) || new Set();
      fields.forEach(function(field) {
        if (!children.has(field)) {
          children.add(field);
          var fieldNamePath = field.getNamePath();
          if (field.isFieldDirty() && fieldNamePath.length) {
            childrenFields.push(fieldNamePath);
            fillChildren2(fieldNamePath);
          }
        }
      });
    };
    fillChildren(rootNamePath);
    return childrenFields;
  };
  this.triggerOnFieldsChange = function(namePathList, filedErrors) {
    var onFieldsChange = _this.callbacks.onFieldsChange;
    if (onFieldsChange) {
      var fields = _this.getFields();
      if (filedErrors) {
        var cache2 = new NameMap_default();
        filedErrors.forEach(function(_ref3) {
          var name = _ref3.name, errors = _ref3.errors;
          cache2.set(name, errors);
        });
        fields.forEach(function(field) {
          field.errors = cache2.get(field.name) || field.errors;
        });
      }
      var changedFields = fields.filter(function(_ref4) {
        var fieldName = _ref4.name;
        return containsNamePath(namePathList, fieldName);
      });
      onFieldsChange(changedFields, fields);
    }
  };
  this.validateFields = function(nameList, options) {
    _this.warningUnhooked();
    var provideNameList = !!nameList;
    var namePathList = provideNameList ? nameList.map(getNamePath) : [];
    var promiseList = [];
    _this.getFieldEntities(true).forEach(function(field) {
      if (!provideNameList) {
        namePathList.push(field.getNamePath());
      }
      if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {
        var namePath = field.getNamePath();
        if (namePath.every(function(nameUnit, i) {
          return nameList[i] === nameUnit || nameList[i] === void 0;
        })) {
          namePathList.push(namePath);
        }
      }
      if (!field.props.rules || !field.props.rules.length) {
        return;
      }
      var fieldNamePath = field.getNamePath();
      if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
        var promise = field.validateRules(_objectSpread2({
          validateMessages: _objectSpread2(_objectSpread2({}, defaultValidateMessages), _this.validateMessages)
        }, options));
        promiseList.push(promise.then(function() {
          return {
            name: fieldNamePath,
            errors: [],
            warnings: []
          };
        }).catch(function(ruleErrors) {
          var mergedErrors = [];
          var mergedWarnings = [];
          ruleErrors.forEach(function(_ref5) {
            var warningOnly = _ref5.rule.warningOnly, errors = _ref5.errors;
            if (warningOnly) {
              mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
            } else {
              mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
            }
          });
          if (mergedErrors.length) {
            return Promise.reject({
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            });
          }
          return {
            name: fieldNamePath,
            errors: mergedErrors,
            warnings: mergedWarnings
          };
        }));
      }
    });
    var summaryPromise = allPromiseFinish(promiseList);
    _this.lastValidatePromise = summaryPromise;
    summaryPromise.catch(function(results) {
      return results;
    }).then(function(results) {
      var resultNamePathList = results.map(function(_ref6) {
        var name = _ref6.name;
        return name;
      });
      _this.notifyObservers(_this.store, resultNamePathList, {
        type: "validateFinish"
      });
      _this.triggerOnFieldsChange(resultNamePathList, results);
    });
    var returnPromise = summaryPromise.then(function() {
      if (_this.lastValidatePromise === summaryPromise) {
        return Promise.resolve(_this.getFieldsValue(namePathList));
      }
      return Promise.reject([]);
    }).catch(function(results) {
      var errorList = results.filter(function(result) {
        return result && result.errors.length;
      });
      return Promise.reject({
        values: _this.getFieldsValue(namePathList),
        errorFields: errorList,
        outOfDate: _this.lastValidatePromise !== summaryPromise
      });
    });
    returnPromise.catch(function(e) {
      return e;
    });
    return returnPromise;
  };
  this.submit = function() {
    _this.warningUnhooked();
    _this.validateFields().then(function(values) {
      var onFinish = _this.callbacks.onFinish;
      if (onFinish) {
        try {
          onFinish(values);
        } catch (err) {
          console.error(err);
        }
      }
    }).catch(function(e) {
      var onFinishFailed = _this.callbacks.onFinishFailed;
      if (onFinishFailed) {
        onFinishFailed(e);
      }
    });
  };
  this.forceRootUpdate = forceRootUpdate;
};
function useForm(form) {
  var formRef = React50.useRef();
  var _React$useState = React50.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
  if (!formRef.current) {
    if (form) {
      formRef.current = form;
    } else {
      var forceReRender = function forceReRender2() {
        forceUpdate({});
      };
      var formStore = new FormStore(forceReRender);
      formRef.current = formStore.getForm();
    }
  }
  return [formRef.current];
}
var useForm_default = useForm;

// node_modules/rc-field-form/es/Form.js
init_define_process_env();
var React52 = __toModule(require_react());

// node_modules/rc-field-form/es/FormContext.js
init_define_process_env();
var React51 = __toModule(require_react());
var FormContext = React51.createContext({
  triggerFormChange: function triggerFormChange() {
  },
  triggerFormFinish: function triggerFormFinish() {
  },
  registerForm: function registerForm() {
  },
  unregisterForm: function unregisterForm() {
  }
});
var FormProvider = function FormProvider2(_ref) {
  var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
  var formContext = React51.useContext(FormContext);
  var formsRef = React51.useRef({});
  return React51.createElement(FormContext.Provider, {
    value: _objectSpread2(_objectSpread2({}, formContext), {}, {
      validateMessages: _objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages),
      triggerFormChange: function triggerFormChange2(name, changedFields) {
        if (onFormChange) {
          onFormChange(name, {
            changedFields,
            forms: formsRef.current
          });
        }
        formContext.triggerFormChange(name, changedFields);
      },
      triggerFormFinish: function triggerFormFinish2(name, values) {
        if (onFormFinish) {
          onFormFinish(name, {
            values,
            forms: formsRef.current
          });
        }
        formContext.triggerFormFinish(name, values);
      },
      registerForm: function registerForm2(name, form) {
        if (name) {
          formsRef.current = _objectSpread2(_objectSpread2({}, formsRef.current), {}, _defineProperty({}, name, form));
        }
        formContext.registerForm(name, form);
      },
      unregisterForm: function unregisterForm2(name) {
        var newForms = _objectSpread2({}, formsRef.current);
        delete newForms[name];
        formsRef.current = newForms;
        formContext.unregisterForm(name);
      }
    })
  }, children);
};
var FormContext_default = FormContext;

// node_modules/rc-field-form/es/Form.js
var _excluded5 = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
var Form = function Form2(_ref, ref) {
  var name = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component2 = _ref$component === void 0 ? "form" : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? "onChange" : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutProperties(_ref, _excluded5);
  var formContext = React52.useContext(FormContext_default);
  var _useForm = useForm_default(form), _useForm2 = _slicedToArray(_useForm, 1), formInstance = _useForm2[0];
  var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK), useSubscribe = _formInstance$getInte.useSubscribe, setInitialValues = _formInstance$getInte.setInitialValues, setCallbacks = _formInstance$getInte.setCallbacks, setValidateMessages = _formInstance$getInte.setValidateMessages, setPreserve = _formInstance$getInte.setPreserve;
  React52.useImperativeHandle(ref, function() {
    return formInstance;
  });
  React52.useEffect(function() {
    formContext.registerForm(name, formInstance);
    return function() {
      formContext.unregisterForm(name);
    };
  }, [formContext, formInstance, name]);
  setValidateMessages(_objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages));
  setCallbacks({
    onValuesChange,
    onFieldsChange: function onFieldsChange(changedFields) {
      formContext.triggerFormChange(name, changedFields);
      if (_onFieldsChange) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        _onFieldsChange.apply(void 0, [changedFields].concat(rest));
      }
    },
    onFinish: function onFinish(values2) {
      formContext.triggerFormFinish(name, values2);
      if (_onFinish) {
        _onFinish(values2);
      }
    },
    onFinishFailed
  });
  setPreserve(preserve);
  var mountRef = React52.useRef(null);
  setInitialValues(initialValues, !mountRef.current);
  if (!mountRef.current) {
    mountRef.current = true;
  }
  var childrenNode = children;
  var childrenRenderProps = typeof children === "function";
  if (childrenRenderProps) {
    var values = formInstance.getFieldsValue(true);
    childrenNode = children(values, formInstance);
  }
  useSubscribe(!childrenRenderProps);
  var prevFieldsRef = React52.useRef();
  React52.useEffect(function() {
    if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
      formInstance.setFields(fields || []);
    }
    prevFieldsRef.current = fields;
  }, [fields, formInstance]);
  var formContextValue = React52.useMemo(function() {
    return _objectSpread2(_objectSpread2({}, formInstance), {}, {
      validateTrigger
    });
  }, [formInstance, validateTrigger]);
  var wrapperNode = React52.createElement(FieldContext_default.Provider, {
    value: formContextValue
  }, childrenNode);
  if (Component2 === false) {
    return wrapperNode;
  }
  return React52.createElement(Component2, _extends({}, restProps, {
    onSubmit: function onSubmit(event) {
      event.preventDefault();
      event.stopPropagation();
      formInstance.submit();
    },
    onReset: function onReset(event) {
      var _restProps$onReset;
      event.preventDefault();
      formInstance.resetFields();
      (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);
    }
  }), wrapperNode);
};
var Form_default = Form;

// node_modules/rc-field-form/es/index.js
var InternalForm = React53.forwardRef(Form_default);
var RefForm = InternalForm;
RefForm.FormProvider = FormProvider;
RefForm.Field = Field_default;
RefForm.List = List_default;
RefForm.useForm = useForm_default;
var es_default3 = RefForm;

// node_modules/antd-mobile/es/components/form/context.js
init_define_process_env();
var import_react119 = __toModule(require_react());
var DEFAULT_FORM_CONTEXT = {
  hasFeedback: true,
  layout: "vertical"
};
var FormContext2 = import_react119.default.createContext(DEFAULT_FORM_CONTEXT);

// node_modules/antd-mobile/es/components/form/form.js
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var classPrefix26 = "adm-form";
var defaultProps22 = {
  hasFeedback: true,
  layout: "vertical"
};
var Form3 = (0, import_react120.forwardRef)(function(p, ref) {
  var props = mergeProps(defaultProps22, p);
  var className = props.className, style = props.style, hasFeedback = props.hasFeedback, children = props.children, layout = props.layout, footer = props.footer, formProps = __rest3(props, ["className", "style", "hasFeedback", "children", "layout", "footer"]);
  return import_react120.default.createElement(es_default3, Object.assign({
    className: (0, import_classnames21.default)(classPrefix26, classPrefix26 + "-" + layout, className),
    style,
    ref
  }, formProps), import_react120.default.createElement(list_default, {
    style: {
      "--prefix-width": "6em",
      "--align-items": "stretch"
    }
  }, import_react120.default.createElement(FormContext2.Provider, {
    value: {
      hasFeedback,
      layout
    }
  }, children)), footer && import_react120.default.createElement("div", {
    className: classPrefix26 + "-footer"
  }, footer));
});

// node_modules/antd-mobile/es/components/form/form-item.js
init_define_process_env();
var import_react121 = __toModule(require_react());
var import_classnames22 = __toModule(require_classnames());
var import_FieldContext5 = __toModule(require_FieldContext());

// node_modules/antd-mobile/es/components/form/utils.js
init_define_process_env();
function toArray4(candidate) {
  if (candidate === void 0 || candidate === false)
    return [];
  return Array.isArray(candidate) ? candidate : [candidate];
}

// node_modules/antd-mobile/es/components/form/form-item.js
var __rest4 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var classPrefix27 = "adm-form-item";
var MemoInput = import_react121.default.memo(function(_ref) {
  var children = _ref.children;
  return children;
}, function(prev, next) {
  return prev.value === next.value && prev.update === next.update;
});
var FormItemLayout = function FormItemLayout2(props) {
  var _classNames;
  var className = props.className, style = props.style, label = props.label, help = props.help, required4 = props.required, disabled = props.disabled, meta = props.meta, children = props.children, htmlFor = props.htmlFor, hidden = props.hidden;
  var context = (0, import_react121.useContext)(FormContext2);
  var hasFeedback = props.hasFeedback || context.hasFeedback;
  var layout = props.layout || context.layout;
  var feedback = hasFeedback && meta && meta.errors.length > 0 ? meta.errors[0] : null;
  var labelElement = label ? import_react121.default.createElement("label", {
    className: classPrefix27 + "-label",
    htmlFor
  }, label, required4 && import_react121.default.createElement("span", {
    className: classPrefix27 + "-label-required"
  }, "*"), help && import_react121.default.createElement("span", {
    className: classPrefix27 + "-label-help"
  }, help)) : null;
  var descriptionElement = feedback && import_react121.default.createElement("div", {
    className: classPrefix27 + "-footer"
  }, feedback);
  return import_react121.default.createElement(list_default.Item, {
    style,
    title: layout === "vertical" && labelElement,
    prefix: layout === "horizontal" && labelElement,
    description: descriptionElement,
    className: (0, import_classnames22.default)(classPrefix27, className, (_classNames = {}, _classNames[classPrefix27 + "-hidden"] = hidden, _classNames)),
    disabled,
    onClick: props.onClick
  }, children);
};
var FormItem = function FormItem2(props) {
  var className = props.className, style = props.style, label = props.label, help = props.help, hasFeedback = props.hasFeedback, name = props.name, required4 = props.required, noStyle = props.noStyle, hidden = props.hidden, layout = props.layout, disabled = props.disabled, rules2 = props.rules, children = props.children, messageVariables = props.messageVariables, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? "onChange" : _props$trigger, validateTrigger = props.validateTrigger, onClick = props.onClick, shouldUpdate = props.shouldUpdate, dependencies = props.dependencies, fieldProps = __rest4(props, ["className", "style", "label", "help", "hasFeedback", "name", "required", "noStyle", "hidden", "layout", "disabled", "rules", "children", "messageVariables", "trigger", "validateTrigger", "onClick", "shouldUpdate", "dependencies"]);
  var _React$useContext = import_react121.default.useContext(import_FieldContext5.default), contextValidateTrigger = _React$useContext.validateTrigger;
  var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : contextValidateTrigger;
  var updateRef2 = import_react121.default.useRef(0);
  updateRef2.current += 1;
  function renderLayout(baseChildren, fieldId, meta, isRequired) {
    if (noStyle && !hidden) {
      return baseChildren;
    }
    return import_react121.default.createElement(FormItemLayout, {
      className,
      style,
      label,
      help,
      required: isRequired,
      disabled,
      hasFeedback,
      htmlFor: fieldId,
      meta,
      onClick,
      hidden,
      layout
    }, baseChildren);
  }
  var isRenderProps = typeof children === "function";
  if (!name && !isRenderProps && !props.dependencies) {
    return renderLayout(children);
  }
  var Variables = {};
  if (typeof label === "string") {
    Variables.label = label;
  }
  if (messageVariables) {
    Variables = Object.assign(Object.assign({}, Variables), messageVariables);
  }
  return import_react121.default.createElement(Field_default, Object.assign({}, fieldProps, {
    name,
    shouldUpdate,
    dependencies,
    rules: rules2,
    trigger,
    validateTrigger: mergedValidateTrigger
  }), function(control, meta, context) {
    var childNode = null;
    var isRequired = required4 !== void 0 ? required4 : !!(rules2 && rules2.some(function(rule) {
      if (rule && typeof rule === "object" && rule.required) {
        return true;
      }
      return false;
    }));
    var fieldId = (toArray4(name).length && meta ? meta.name : []).join("_");
    if (shouldUpdate && dependencies) {
      devWarning("Form.Item", "`shouldUpdate` and `dependencies` shouldn't be used together.");
    }
    if (isRenderProps) {
      if ((shouldUpdate || dependencies) && !name) {
        childNode = children(context);
      } else {
        if (!(shouldUpdate || dependencies)) {
          devWarning("Form.Item", "`children` of render props only work with `shouldUpdate` or `dependencies`.");
        }
        if (name) {
          devWarning("Form.Item", "Do not use `name` with `children` of render props since it's not a field.");
        }
      }
    } else if (dependencies && !name) {
      devWarning("Form.Item", "Must set `name` or use render props when `dependencies` is set.");
    } else if (import_react121.default.isValidElement(children)) {
      if (children.props.defaultValue) {
        devWarning("Form.Item", "`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.");
      }
      var childProps = Object.assign(Object.assign({}, children.props), control);
      if (!childProps.id) {
        childProps.id = fieldId;
      }
      var triggers = new Set([].concat(toArray4(trigger), toArray4(mergedValidateTrigger)));
      triggers.forEach(function(eventName) {
        childProps[eventName] = function() {
          var _a2, _c2;
          var _a, _b, _c;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          (_a = control[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [control].concat(args));
          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
        };
      });
      childNode = import_react121.default.createElement(MemoInput, {
        value: control[props.valuePropName || "value"],
        update: updateRef2.current
      }, import_react121.default.cloneElement(children, childProps));
    } else {
      if (name) {
        devWarning("Form.Item", "`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.");
      }
      childNode = children;
    }
    return renderLayout(childNode, fieldId, meta, isRequired);
  });
};

// node_modules/antd-mobile/es/components/form/index.js
var form_default = attachPropertiesToComponent(Form3, {
  Item: FormItem,
  useForm: useForm_default
});

// node_modules/antd-mobile/es/components/grid/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/grid/grid.css";

// node_modules/antd-mobile/es/components/grid/grid.js
init_define_process_env();
var import_react122 = __toModule(require_react());
var classPrefix28 = "adm-grid";
var Grid = function Grid2(props) {
  var style = {
    "--columns": props.columns.toString()
  };
  var gap = props.gap;
  if (gap !== void 0) {
    if (Array.isArray(gap)) {
      style["--gap-horizontal"] = toCSSLength(gap[0]);
      style["--gap-vertical"] = toCSSLength(gap[1]);
    } else {
      style["--gap"] = toCSSLength(gap);
    }
  }
  return withNativeProps(props, import_react122.default.createElement("div", {
    className: classPrefix28,
    style
  }, props.children));
};
var GridItem = withDefaultProps({
  span: 1
})(function(props) {
  var itemStyle = {
    "--item-span": props.span
  };
  return withNativeProps(props, import_react122.default.createElement("div", {
    className: classPrefix28 + "-item",
    style: itemStyle,
    onClick: props.onClick
  }, props.children));
});

// node_modules/antd-mobile/es/components/grid/index.js
var grid_default = attachPropertiesToComponent(Grid, {
  Item: GridItem
});

// node_modules/antd-mobile/es/components/image-uploader/index.js
init_define_process_env();

// node_modules/antd-mobile/es/components/image-uploader/image-uploader.js
init_define_process_env();
var import_react129 = __toModule(require_react());

// node_modules/antd-mobile/es/components/image-viewer/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/image-viewer/image-viewer.css";

// node_modules/antd-mobile/es/components/image-viewer/image-viewer.js
init_define_process_env();

// node_modules/antd-mobile/es/components/image-viewer/slide.js
init_define_process_env();
var import_react123 = __toModule(require_react());
var classPrefix29 = "adm-image-viewer";
var Slide = function Slide2(props) {
  var _useSpring = useSpring(function() {
    return {
      zoom: 1,
      x: 0,
      y: 0,
      config: {
        tension: 300
      }
    };
  }), _useSpring$ = _useSpring[0], zoom = _useSpring$.zoom, x = _useSpring$.x, y = _useSpring$.y, api = _useSpring[1];
  var bind = useGesture({
    onDrag: function onDrag(state) {
      if (state.tap && state.elapsedTime > 0) {
        props.onTap();
        return;
      }
      var currentZoom = zoom.get();
      if (currentZoom <= 1) {
        api.start({
          x: 0,
          y: 0
        });
      } else {
        var _state$offset = state.offset, _x = _state$offset[0], _y = _state$offset[1];
        api.start({
          x: _x,
          y: _y,
          immediate: true
        });
      }
    },
    onPinch: function onPinch(state) {
      var _a;
      var _state$offset2 = state.offset, d = _state$offset2[0];
      var zoom2 = state.last ? Math.max(Math.min(d, props.maxZoom), 1) : d;
      api.start({
        zoom: zoom2,
        immediate: !state.last
      });
      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, zoom2);
      if (state.last && zoom2 <= 1) {
        api.start({
          x: 0,
          y: 0
        });
      }
    }
  }, {
    drag: {
      from: function from() {
        return [x.get(), y.get()];
      }
    },
    pinch: {
      distanceBounds: {
        min: 1,
        max: props.maxZoom
      },
      rubberband: true,
      from: function from() {
        return [zoom.get(), 0];
      }
    }
  });
  return import_react123.default.createElement("div", {
    className: classPrefix29 + "-slide",
    onPointerMove: function onPointerMove(e) {
      if (zoom.get() !== 1) {
        e.stopPropagation();
      }
    }
  }, import_react123.default.createElement("div", Object.assign({
    className: classPrefix29 + "-control"
  }, bind()), import_react123.default.createElement(animated.div, {
    className: classPrefix29 + "-image-wrapper",
    style: {
      scale: zoom,
      x,
      y
    }
  }, import_react123.default.createElement("img", {
    src: props.image,
    draggable: false
  }))));
};

// node_modules/antd-mobile/es/components/image-viewer/slides.js
init_define_process_env();
var import_react125 = __toModule(require_react());
var classPrefix30 = "adm-image-viewer";
var Slides = function Slides2(props) {
  var slideWidth = window.innerWidth + convertPx(16);
  var _useSpring = useSpring(function() {
    return {
      x: props.defaultIndex * slideWidth,
      config: {
        tension: 300
      }
    };
  }), x = _useSpring[0].x, api = _useSpring[1];
  var count = props.images.length;
  var bind = useDrag(function(state) {
    var _state$offset = state.offset, offsetX = _state$offset[0];
    if (state.last) {
      var velocityOffset = Math.min(state.velocity[0] * 2e3, slideWidth) * state.direction[0];
      var index = bound(Math.round((offsetX + velocityOffset) / slideWidth), 0, count - 1);
      api.start({
        x: index * slideWidth
      });
    } else {
      api.start({
        x: offsetX,
        immediate: true
      });
    }
  }, {
    transform: function transform(_ref) {
      var x2 = _ref[0], y = _ref[1];
      return [-x2, y];
    },
    from: function from() {
      return [x.get(), 0];
    },
    bounds: function bounds() {
      return {
        left: 0,
        right: (count - 1) * slideWidth
      };
    },
    rubberband: true,
    axis: "x"
  });
  return import_react125.default.createElement("div", Object.assign({
    className: classPrefix30 + "-slides"
  }, bind()), import_react125.default.createElement(animated.div, {
    className: classPrefix30 + "-indicator"
  }, x.to(function(v) {
    var index = bound(Math.round(v / slideWidth), 0, count - 1);
    return index + 1 + " / " + count;
  })), import_react125.default.createElement(animated.div, {
    className: classPrefix30 + "-slides-inner",
    style: {
      x: x.to(function(x2) {
        return -x2;
      })
    }
  }, props.images.map(function(image) {
    return import_react125.default.createElement(Slide, {
      key: image,
      image,
      onTap: props.onTap,
      maxZoom: props.maxZoom,
      onZoomChange: function onZoomChange(zoom) {
        if (zoom !== 1) {
          var index = Math.round(x.get() / slideWidth);
          api.start({
            x: index * slideWidth
          });
        }
      }
    });
  })));
};

// node_modules/antd-mobile/es/components/image-viewer/image-viewer.js
var import_react127 = __toModule(require_react());
var classPrefix31 = "adm-image-viewer";
var defaultProps23 = {
  maxZoom: 3,
  getContainer: null,
  visible: false
};
var ImageViewer = withDefaultProps(defaultProps23)(function(props) {
  var node = import_react127.default.createElement(mask_default, {
    visible: props.visible,
    disableBodyScroll: false,
    opacity: "thick",
    afterClose: props.afterClose
  }, import_react127.default.createElement("div", {
    className: classPrefix31 + "-content"
  }, props.image && import_react127.default.createElement(Slide, {
    image: props.image,
    onTap: function onTap() {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    },
    maxZoom: props.maxZoom
  })));
  return renderToContainer(props.getContainer, node);
});
var multiDefaultProps = Object.assign(Object.assign({}, defaultProps23), {
  defaultIndex: 0
});
var MultiImageViewer = withDefaultProps(multiDefaultProps)(function(props) {
  var node = import_react127.default.createElement(mask_default, {
    visible: props.visible,
    disableBodyScroll: false,
    opacity: "thick",
    afterClose: props.afterClose
  }, import_react127.default.createElement("div", {
    className: classPrefix31 + "-content"
  }, props.images && import_react127.default.createElement(Slides, {
    defaultIndex: props.defaultIndex,
    onIndexChange: props.onIndexChange,
    images: props.images,
    onTap: function onTap() {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    },
    maxZoom: props.maxZoom
  })));
  return renderToContainer(props.getContainer, node);
});
function showImageViewer(props) {
  var Wrapper = (0, import_react127.forwardRef)(function(_, ref2) {
    var _useState = (0, import_react127.useState)(false), visible = _useState[0], setVisible = _useState[1];
    (0, import_react127.useEffect)(function() {
      setVisible(true);
    }, []);
    (0, import_react127.useImperativeHandle)(ref2, function() {
      return {
        close: function close() {
          setVisible(false);
        }
      };
    });
    return import_react127.default.createElement(ImageViewer, Object.assign({}, props, {
      visible,
      onClose: function onClose() {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        setVisible(false);
      },
      afterClose: function afterClose() {
        var _a;
        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
        unmount2();
      }
    }));
  });
  var ref = (0, import_react127.createRef)();
  var unmount2 = renderToBody(import_react127.default.createElement(Wrapper, {
    ref
  }));
  return {
    close: function close() {
      var _a;
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
    }
  };
}
function showMultiImageViewer(props) {
  var Wrapper = (0, import_react127.forwardRef)(function(_, ref2) {
    var _useState2 = (0, import_react127.useState)(false), visible = _useState2[0], setVisible = _useState2[1];
    (0, import_react127.useEffect)(function() {
      setVisible(true);
    }, []);
    (0, import_react127.useImperativeHandle)(ref2, function() {
      return {
        close: function close() {
          setVisible(false);
        }
      };
    });
    return import_react127.default.createElement(MultiImageViewer, Object.assign({}, props, {
      visible,
      onClose: function onClose() {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        setVisible(false);
      },
      afterClose: function afterClose() {
        var _a;
        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
        unmount2();
      }
    }));
  });
  var ref = (0, import_react127.createRef)();
  var unmount2 = renderToBody(import_react127.default.createElement(Wrapper, {
    ref
  }));
  return {
    close: function close() {
      var _a;
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
    }
  };
}

// node_modules/antd-mobile/es/components/image-viewer/index.js
var Multi = attachPropertiesToComponent(MultiImageViewer, {
  show: showMultiImageViewer
});
var image_viewer_default = attachPropertiesToComponent(ImageViewer, {
  Multi,
  show: showImageViewer
});

// node_modules/antd-mobile/es/components/image-uploader/preview-item.js
init_define_process_env();
var import_react128 = __toModule(require_react());
var import_classnames23 = __toModule(require_classnames());
var classPrefix32 = "adm-image-uploader";
var PreviewItem = function PreviewItem2(props) {
  var _useConfig = useConfig(), locale = _useConfig.locale;
  var url2 = props.url, file = props.file, deletable = props.deletable, onDelete = props.onDelete;
  var src = (0, import_react128.useMemo)(function() {
    if (url2) {
      return url2;
    }
    if (file) {
      return URL.createObjectURL(file);
    }
    return "";
  }, [url2, file]);
  function renderLoading() {
    return props.status === "pending" && import_react128.default.createElement("div", {
      className: classPrefix32 + "-cell-mask"
    }, import_react128.default.createElement("span", {
      className: classPrefix32 + "-cell-loading"
    }, import_react128.default.createElement(loading_default, {
      color: "#fff"
    }), import_react128.default.createElement("span", {
      className: classPrefix32 + "-cell-mask-message"
    }, locale.ImageUploader.uploading)));
  }
  function renderDelete() {
    return deletable && import_react128.default.createElement("span", {
      className: classPrefix32 + "-cell-delete",
      onClick: onDelete
    }, import_react128.default.createElement(CloseOutline_default, {
      className: classPrefix32 + "-cell-delete-icon"
    }));
  }
  return import_react128.default.createElement("div", {
    className: (0, import_classnames23.default)(classPrefix32 + "-cell", props.status === "fail" && classPrefix32 + "-cell-fail")
  }, import_react128.default.createElement(image_default, {
    className: classPrefix32 + "-cell-image",
    src,
    fit: "cover",
    onClick: props.onClick
  }), renderLoading(), renderDelete());
};
var preview_item_default = PreviewItem;

// node_modules/antd-mobile/es/components/image-uploader/image-uploader.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var classPrefix33 = "adm-image-uploader";
var defaultProps24 = {
  disableUpload: false,
  deletable: true,
  showUpload: true,
  multiple: false,
  maxCount: 0,
  defaultValue: [],
  accept: "image/*"
};
var ImageUploader = function ImageUploader2(p) {
  var props = mergeProps(defaultProps24, p);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var updateValue = usePersistFn_default2(function(updater) {
    setValue2(updater(value));
  });
  var _useState = (0, import_react129.useState)([]), tasks = _useState[0], setTasks = _useState[1];
  (0, import_react129.useLayoutEffect)(function() {
    setTasks(function(prev) {
      return prev.filter(function(task) {
        if (task.url === void 0)
          return true;
        return !value.some(function(fileItem) {
          return fileItem.url === task.url;
        });
      });
    });
  }, [value]);
  var idCountRef = (0, import_react129.useRef)(0);
  var maxCount = props.maxCount, onPreview = props.onPreview;
  function onChange(e) {
    var _a;
    return __awaiter5(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
      var _this = this;
      var rawFiles, files, exceed, newTasks;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.persist();
              rawFiles = e.target.files;
              if (rawFiles) {
                _context2.next = 4;
                break;
              }
              return _context2.abrupt("return");
            case 4:
              files = [].slice.call(rawFiles);
              if (!props.beforeUpload) {
                _context2.next = 9;
                break;
              }
              _context2.next = 8;
              return props.beforeUpload(files);
            case 8:
              files = _context2.sent;
            case 9:
              if (!(files.length === 0)) {
                _context2.next = 11;
                break;
              }
              return _context2.abrupt("return");
            case 11:
              if (maxCount > 0) {
                exceed = value.length + files.length - maxCount;
                if (exceed > 0) {
                  files = files.slice(0, maxCount - exceed);
                  (_a = props.onCountExceed) === null || _a === void 0 ? void 0 : _a.call(props, exceed);
                }
              }
              newTasks = files.map(function(file) {
                return {
                  id: idCountRef.current++,
                  status: "pending",
                  file
                };
              });
              setTasks(function(prev) {
                return [].concat(prev, newTasks);
              });
              _context2.next = 16;
              return Promise.all(newTasks.map(function(currentTask) {
                return __awaiter5(_this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                  var result;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return props.upload(currentTask.file);
                        case 3:
                          result = _context.sent;
                          setTasks(function(prev) {
                            return prev.map(function(task) {
                              if (task.id === currentTask.id) {
                                return Object.assign(Object.assign({}, task), {
                                  url: result.url
                                });
                              }
                              return task;
                            });
                          });
                          updateValue(function(prev) {
                            return [].concat(prev, [{
                              url: result.url
                            }]);
                          });
                          _context.next = 12;
                          break;
                        case 8:
                          _context.prev = 8;
                          _context.t0 = _context["catch"](0);
                          setTasks(function(prev) {
                            return prev.map(function(task) {
                              if (task.id === currentTask.id) {
                                return Object.assign(Object.assign({}, task), {
                                  status: "fail"
                                });
                              }
                              return task;
                            });
                          });
                          throw _context.t0;
                        case 12:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[0, 8]]);
                }));
              }))["catch"](function(error) {
                return console.error(error);
              });
            case 16:
              e.target.value = "";
            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }
  function previewImage(index) {
    image_viewer_default.Multi.show({
      images: value.map(function(fileItem) {
        return fileItem.url;
      }),
      defaultIndex: index
    });
    onPreview && onPreview(index);
  }
  var showUpload = props.showUpload && (maxCount === 0 || value.length + tasks.length < maxCount);
  return withNativeProps(props, import_react129.default.createElement("div", {
    className: classPrefix33
  }, import_react129.default.createElement(space_default, {
    className: classPrefix33 + "-space",
    wrap: true
  }, value.map(function(fileItem, index) {
    return import_react129.default.createElement(preview_item_default, {
      key: fileItem.url,
      url: fileItem.url,
      deletable: props.deletable,
      onClick: function onClick() {
        return previewImage(index);
      },
      onDelete: function onDelete() {
        return __awaiter5(void 0, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
          var _a, canDelete;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return (_a = props.onDelete) === null || _a === void 0 ? void 0 : _a.call(props, fileItem);
                case 2:
                  canDelete = _context3.sent;
                  if (!(canDelete === false)) {
                    _context3.next = 5;
                    break;
                  }
                  return _context3.abrupt("return");
                case 5:
                  setValue2(value.filter(function(x) {
                    return x.url !== fileItem.url;
                  }));
                case 6:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
      }
    });
  }), tasks.map(function(task) {
    return import_react129.default.createElement(preview_item_default, {
      key: task.id,
      file: task.file,
      deletable: task.status !== "pending",
      status: task.status,
      onDelete: function onDelete() {
        setTasks(tasks.filter(function(x) {
          return x.id !== task.id;
        }));
      }
    });
  }), showUpload && import_react129.default.createElement("div", {
    className: classPrefix33 + "-upload-button-wrap"
  }, props.children ? props.children : import_react129.default.createElement("span", {
    className: classPrefix33 + "-cell " + classPrefix33 + "-upload-button",
    role: "button"
  }, import_react129.default.createElement("span", {
    className: classPrefix33 + "-upload-button-icon"
  }, import_react129.default.createElement(AddOutline_default, null))), !props.disableUpload && import_react129.default.createElement("input", {
    capture: props.capture,
    accept: props.accept,
    multiple: props.multiple,
    type: "file",
    className: classPrefix33 + "-input",
    onChange
  })))));
};

// node_modules/antd-mobile/es/components/image-uploader/index.js
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/image-uploader/image-uploader.css";
var image_uploader_default = ImageUploader;

// node_modules/antd-mobile/es/components/index-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/index-bar/index-bar.css";

// node_modules/antd-mobile/es/components/index-bar/panel.js
init_define_process_env();
var import_react131 = __toModule(require_react());

// node_modules/antd-mobile/es/components/index-bar/context.js
init_define_process_env();
var import_react130 = __toModule(require_react());
var IndexBarContext = (0, import_react130.createContext)({
  indexes: [],
  setIndexes: function setIndexes() {
  }
});

// node_modules/antd-mobile/es/components/index-bar/panel.js
var classPrefix34 = "adm-index-bar-anchor";
var Panel = function Panel2(props) {
  var _useContext = (0, import_react131.useContext)(IndexBarContext), setIndexes2 = _useContext.setIndexes;
  (0, import_react131.useEffect)(function() {
    setIndexes2(function(val) {
      return val.concat([props.index]);
    });
    return function() {
      setIndexes2(function(val) {
        return val.filter(function(x) {
          return x !== props.index;
        });
      });
    };
  }, [props.index]);
  return withNativeProps(props, import_react131.default.createElement("div", {
    "data-index": props.index,
    className: classPrefix34
  }, import_react131.default.createElement("div", {
    className: classPrefix34 + "-title"
  }, props.title || props.index), props.children));
};

// node_modules/antd-mobile/es/components/index-bar/index-bar.js
init_define_process_env();
var import_react133 = __toModule(require_react());
var import_classnames25 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/index-bar/sidebar.js
init_define_process_env();
var import_react132 = __toModule(require_react());
var import_classnames24 = __toModule(require_classnames());
var classPrefix35 = "adm-index-bar";
var Sidebar = function Sidebar2(props) {
  var _classNames;
  var _useState = (0, import_react132.useState)(false), interacting = _useState[0], setInteracting = _useState[1];
  return import_react132.default.createElement("div", {
    className: (0, import_classnames24.default)(classPrefix35 + "-sidebar", (_classNames = {}, _classNames[classPrefix35 + "-sidebar-interacting"] = interacting, _classNames)),
    onMouseDown: function onMouseDown() {
      setInteracting(true);
    },
    onMouseUp: function onMouseUp() {
      setInteracting(false);
    },
    onTouchStart: function onTouchStart() {
      setInteracting(true);
    },
    onTouchEnd: function onTouchEnd() {
      setInteracting(false);
    },
    onTouchMove: function onTouchMove(e) {
      if (!interacting)
        return;
      var _e$touches$ = e.touches[0], clientX = _e$touches$.clientX, clientY = _e$touches$.clientY;
      var target = document.elementFromPoint(clientX, clientY);
      if (!target)
        return;
      var index = target.dataset["index"];
      if (index) {
        props.onActive(index);
      }
    }
  }, props.indexes.map(function(index) {
    var _classNames2;
    var active = index === props.activeIndex;
    return import_react132.default.createElement("div", {
      className: classPrefix35 + "-sidebar-row",
      onMouseDown: function onMouseDown() {
        props.onActive(index);
      },
      onTouchStart: function onTouchStart() {
        props.onActive(index);
      },
      onMouseEnter: function onMouseEnter() {
        if (interacting) {
          props.onActive(index);
        }
      },
      "data-index": index,
      key: index
    }, interacting && active && import_react132.default.createElement("div", {
      className: classPrefix35 + "-sidebar-bubble"
    }, index), import_react132.default.createElement("div", {
      className: (0, import_classnames24.default)(classPrefix35 + "-sidebar-item", (_classNames2 = {}, _classNames2[classPrefix35 + "-sidebar-item-active"] = active, _classNames2)),
      "data-index": index
    }, import_react132.default.createElement("div", null, index)));
  }));
};

// node_modules/antd-mobile/es/components/index-bar/index-bar.js
var classPrefix36 = "adm-index-bar";
var defaultProps25 = {
  sticky: true
};
var IndexBar = (0, import_react133.forwardRef)(function(p, ref) {
  var _classNames;
  var props = mergeProps(defaultProps25, p);
  var titleHeight = convertPx(35);
  var bodyRef = (0, import_react133.useRef)(null);
  var _useState = (0, import_react133.useState)([]), indexes = _useState[0], setIndexes2 = _useState[1];
  var _useState2 = (0, import_react133.useState)(indexes[0]), activeIndex = _useState2[0], setActiveIndex = _useState2[1];
  (0, import_react133.useImperativeHandle)(ref, function() {
    return {
      scrollTo
    };
  });
  function scrollTo(index) {
    var body = bodyRef.current;
    if (!body)
      return;
    var children = body.children;
    for (var i = 0; i < children.length; i++) {
      var panel = children.item(i);
      if (!panel)
        continue;
      var panelIndex = panel.dataset["index"];
      if (panelIndex === index) {
        body.scrollTop = panel.offsetTop;
        setActiveIndex(index);
        return;
      }
    }
  }
  var _useThrottleFn = useThrottleFn_default(function() {
    var body = bodyRef.current;
    if (!body)
      return;
    var scrollTop = body.scrollTop;
    var children = body.getElementsByClassName(classPrefix36 + "-anchor");
    for (var i = 0; i < children.length; i++) {
      var panel = children.item(i);
      if (!panel)
        continue;
      var panelIndex = panel.dataset["index"];
      if (!panelIndex)
        continue;
      if (panel.offsetTop + panel.clientHeight - titleHeight > scrollTop) {
        setActiveIndex(panelIndex);
        return;
      }
    }
  }, {
    wait: 50,
    trailing: true,
    leading: true
  }), checkActiveIndex = _useThrottleFn.run;
  (0, import_react133.useEffect)(function() {
    if (!indexes.length)
      return;
    checkActiveIndex();
  }, [indexes]);
  var element = withNativeProps(props, import_react133.default.createElement("div", {
    className: (0, import_classnames25.default)("" + classPrefix36, (_classNames = {}, _classNames[classPrefix36 + "-sticky"] = props.sticky, _classNames))
  }, import_react133.default.createElement(Sidebar, {
    indexes,
    activeIndex,
    onActive: function onActive(index) {
      scrollTo(index);
    }
  }), import_react133.default.createElement("div", {
    className: classPrefix36 + "-body",
    ref: bodyRef,
    onScroll: checkActiveIndex
  }, props.children)));
  return import_react133.default.createElement(IndexBarContext.Provider, {
    value: {
      indexes,
      setIndexes: setIndexes2
    }
  }, element);
});

// node_modules/antd-mobile/es/components/index-bar/index.js
var index_bar_default = attachPropertiesToComponent(IndexBar, {
  Panel
});

// node_modules/antd-mobile/es/components/infinite-scroll/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/infinite-scroll/infinite-scroll.css";

// node_modules/antd-mobile/es/components/infinite-scroll/infinite-scroll.js
init_define_process_env();
var import_react134 = __toModule(require_react());
function isWindow(element) {
  return element === window;
}
var classPrefix37 = "adm-infinite-scroll";
var InfiniteScrollContent = function InfiniteScrollContent2(_ref) {
  var hasMore = _ref.hasMore;
  return import_react134.default.createElement(import_react134.default.Fragment, null, hasMore ? import_react134.default.createElement(import_react134.default.Fragment, null, import_react134.default.createElement("span", null, "\u52A0\u8F7D\u4E2D"), import_react134.default.createElement(loading_default, null)) : import_react134.default.createElement("span", null, "\u6CA1\u6709\u66F4\u591A\u4E86"));
};
var InfiniteScroll = withDefaultProps({
  threshold: 250
})(function(props) {
  var doLoadMore = useLockFn_default(function() {
    return props.loadMore();
  });
  var elementRef = (0, import_react134.useRef)(null);
  var checkTimeoutRef = (0, import_react134.useRef)();
  var check = usePersistFn_default2(function() {
    window.clearTimeout(checkTimeoutRef.current);
    checkTimeoutRef.current = window.setTimeout(function() {
      if (!props.hasMore)
        return;
      var element = elementRef.current;
      if (!element)
        return;
      if (!element.offsetParent)
        return;
      var parent = getScrollParent(element);
      if (!parent)
        return;
      var rect = element.getBoundingClientRect();
      var elementTop = rect.top;
      var current = isWindow(parent) ? window.innerHeight : rect.bottom;
      if (current >= elementTop - props.threshold) {
        doLoadMore();
      }
    });
  });
  (0, import_react134.useEffect)(function() {
    check();
  });
  (0, import_react134.useEffect)(function() {
    var element = elementRef.current;
    if (!element)
      return;
    var parent = getScrollParent(element);
    if (!parent)
      return;
    function onScroll() {
      check();
    }
    parent.addEventListener("scroll", onScroll);
    return function() {
      parent.removeEventListener("scroll", onScroll);
    };
  }, []);
  return withNativeProps(props, import_react134.default.createElement("div", {
    className: classPrefix37,
    ref: elementRef
  }, props.children && props.children, !props.children && import_react134.default.createElement(InfiniteScrollContent, {
    hasMore: props.hasMore
  })));
});

// node_modules/antd-mobile/es/components/infinite-scroll/index.js
var infinite_scroll_default = InfiniteScroll;

// node_modules/antd-mobile/es/components/input/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/input/input.css";

// node_modules/antd-mobile/es/components/input/input.js
init_define_process_env();
var import_react135 = __toModule(require_react());
var classPrefix38 = "adm-input";
var defaultProps26 = {
  defaultValue: ""
};
var Input = (0, import_react135.forwardRef)(function(p, ref) {
  var props = mergeProps(defaultProps26, p);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var _useState = (0, import_react135.useState)(false), hasFocus = _useState[0], setHasFocus = _useState[1];
  var nativeInputRef = (0, import_react135.useRef)(null);
  (0, import_react135.useImperativeHandle)(ref, function() {
    return {
      clear: function clear2() {
        setValue2("");
      },
      focus: function focus() {
        var _a;
        (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur() {
        var _a;
        (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      }
    };
  });
  var handleKeydown = function handleKeydown2(e) {
    var _a;
    if (props.onEnterPress && (e.code === "Enter" || e.keyCode === 13)) {
      props.onEnterPress(e);
    }
    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, e);
  };
  return withNativeProps(props, import_react135.default.createElement("div", {
    className: classPrefix38 + "-wrapper"
  }, import_react135.default.createElement("input", {
    ref: nativeInputRef,
    className: classPrefix38,
    value,
    onChange: function onChange(e) {
      setValue2(e.target.value);
    },
    onFocus: function onFocus(e) {
      var _a;
      setHasFocus(true);
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onBlur: function onBlur(e) {
      var _a;
      setHasFocus(false);
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    id: props.id,
    placeholder: props.placeholder,
    disabled: props.disabled,
    readOnly: props.readOnly,
    maxLength: props.maxLength,
    minLength: props.minLength,
    max: props.max,
    min: props.min,
    autoComplete: props.autoComplete,
    enterKeyHint: props.enterKeyHint,
    pattern: props.pattern,
    type: props.type,
    autoCapitalize: props.autoCapitalize,
    autoCorrect: props.autoCorrect,
    onKeyDown: handleKeydown,
    onKeyUp: props.onKeyUp
  }), props.clearable && !!value && hasFocus && import_react135.default.createElement("div", {
    className: classPrefix38 + "-clear",
    onMouseDown: function onMouseDown(e) {
      e.preventDefault();
    },
    onClick: function onClick() {
      var _a;
      setValue2("");
      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react135.default.createElement(CloseCircleFill_default, null))));
});

// node_modules/antd-mobile/es/components/input/index.js
var input_default = Input;

// node_modules/antd-mobile/es/components/nav-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/nav-bar/nav-bar.css";

// node_modules/antd-mobile/es/components/nav-bar/nav-bar.js
init_define_process_env();
var import_react136 = __toModule(require_react());
var import_classnames26 = __toModule(require_classnames());
var classPrefix39 = "adm-nav-bar";
var defaultProps27 = {
  back: "",
  backArrow: true
};
var NavBar = withDefaultProps(defaultProps27)(function(props) {
  var back = props.back, backArrow = props.backArrow;
  return withNativeProps(props, import_react136.default.createElement("div", {
    className: (0, import_classnames26.default)(classPrefix39)
  }, import_react136.default.createElement("div", {
    className: classPrefix39 + "-left",
    role: "button"
  }, back !== null && import_react136.default.createElement("div", {
    className: classPrefix39 + "-back",
    onClick: props.onBack
  }, backArrow && import_react136.default.createElement("span", {
    className: classPrefix39 + "-back-arrow"
  }, backArrow === true ? import_react136.default.createElement(LeftOutline_default, null) : backArrow), import_react136.default.createElement("span", {
    "aria-hidden": "true"
  }, back)), props.left), import_react136.default.createElement("div", {
    className: classPrefix39 + "-title"
  }, props.children), import_react136.default.createElement("div", {
    className: classPrefix39 + "-right"
  }, props.right)));
});

// node_modules/antd-mobile/es/components/nav-bar/index.js
var nav_bar_default = NavBar;

// node_modules/antd-mobile/es/components/notice-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/notice-bar/notice-bar.css";

// node_modules/antd-mobile/es/components/notice-bar/notice-bar.js
init_define_process_env();
var import_react137 = __toModule(require_react());
var import_classnames27 = __toModule(require_classnames());
var classPrefix40 = "adm-notice-bar";
var defaultProps28 = {
  color: "default",
  delay: 2e3,
  speed: 50
};
var NoticeBar = (0, import_react137.memo)(function(p) {
  var props = mergeProps(defaultProps28, p);
  var containerRef = (0, import_react137.useRef)(null);
  var textRef = (0, import_react137.useRef)(null);
  var _useState = (0, import_react137.useState)(0), key = _useState[0], setKey = _useState[1];
  var _useState2 = (0, import_react137.useState)(true), visible = _useState2[0], setVisible = _useState2[1];
  var speed = props.speed;
  (0, import_react137.useLayoutEffect)(function() {
    var container = containerRef.current;
    var text = textRef.current;
    if (!container || !text)
      return;
    if (container.offsetWidth >= text.offsetWidth)
      return;
    var timeout = window.setTimeout(function() {
      var text2 = textRef.current;
      if (text2) {
        text2.style.transitionDuration = Math.round(text2.offsetWidth / speed) + "s";
        text2.style.transform = "translateX(-" + text2.offsetWidth + "px)";
      }
    }, props.delay);
    return function() {
      window.clearTimeout(timeout);
    };
  }, []);
  useUpdateLayoutEffect_default(function() {
    var container = containerRef.current;
    var text = textRef.current;
    if (!container || !text)
      return;
    if (container.offsetWidth >= text.offsetWidth)
      return;
    text.style.transform = "translateX(" + container.offsetWidth + "px)";
    text.style.transitionDuration = Math.round((container.offsetWidth + text.offsetWidth) / speed) + "s";
    text.style.transform = "translateX(-" + text.offsetWidth + "px)";
  }, [key]);
  if (!visible)
    return null;
  return withNativeProps(props, import_react137.default.createElement("div", {
    className: (0, import_classnames27.default)(classPrefix40, classPrefix40 + "-" + props.color)
  }, import_react137.default.createElement("span", {
    className: classPrefix40 + "-left"
  }, "icon" in props ? props.icon : import_react137.default.createElement(SoundOutline_default, null)), import_react137.default.createElement("span", {
    ref: containerRef,
    className: classPrefix40 + "-content"
  }, import_react137.default.createElement("span", {
    onTransitionEnd: function onTransitionEnd() {
      return setKey(function(k) {
        return k + 1;
      });
    },
    key,
    ref: textRef,
    className: classPrefix40 + "-content-inner"
  }, props.content)), (props.closeable || props.extra) && import_react137.default.createElement("span", {
    className: classPrefix40 + "-right"
  }, props.extra, props.closeable && import_react137.default.createElement(CloseOutline_default, {
    onClick: function onClick() {
      var _a;
      setVisible(false);
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }))));
});

// node_modules/antd-mobile/es/components/notice-bar/index.js
var notice_bar_default = NoticeBar;

// node_modules/antd-mobile/es/components/page-indicator/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/page-indicator/page-indicator.css";

// node_modules/antd-mobile/es/components/page-indicator/page-indicator.js
init_define_process_env();
var import_react138 = __toModule(require_react());
var import_classnames28 = __toModule(require_classnames());
var classPrefix41 = "adm-page-indicator";
var defaultProps29 = {
  color: "primary"
};
var PageIndicator = (0, import_react138.memo)(function(p) {
  var props = mergeProps(defaultProps29, p);
  var dots = [];
  for (var i = 0; i < props.total; i++) {
    var _classNames;
    dots.push(import_react138.default.createElement("div", {
      key: i,
      className: (0, import_classnames28.default)(classPrefix41 + "-dot", (_classNames = {}, _classNames[classPrefix41 + "-dot-active"] = props.current === i, _classNames))
    }));
  }
  return withNativeProps(props, import_react138.default.createElement("div", {
    className: (0, import_classnames28.default)(classPrefix41, classPrefix41 + "-color-" + props.color)
  }, dots));
});

// node_modules/antd-mobile/es/components/page-indicator/index.js
var page_indicator_default = PageIndicator;

// node_modules/antd-mobile/es/components/popover/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/popover/popover.css";

// node_modules/antd-mobile/es/components/popover/pop-menu.js
init_define_process_env();
var import_react140 = __toModule(require_react());
var import_classnames30 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/popover/popover.js
init_define_process_env();
var import_react139 = __toModule(require_react());
var import_classnames29 = __toModule(require_classnames());
var classPrefix42 = "adm-popover";
var enterClassName = "entering";
var leaveClassName = "leaving";
var defaultProps30 = {
  defaultVisible: false
};
var Popover = (0, import_react139.forwardRef)(function(p, ref) {
  var props = mergeProps(defaultProps30, p);
  var _props$mode = props.mode, mode = _props$mode === void 0 ? "light" : _props$mode;
  var _usePropsValue = usePropsValue({
    value: props.visible,
    defaultValue: props.defaultVisible,
    onChange: props.onVisibleChange
  }), visible = _usePropsValue[0], onVisibleChange = _usePropsValue[1];
  (0, import_react139.useImperativeHandle)(ref, function() {
    return {
      show: function show3() {
        return onVisibleChange(true);
      },
      hide: function hide() {
        return onVisibleChange(false);
      },
      visible
    };
  }, [visible]);
  return import_react139.default.createElement(es_default, Object.assign({}, props, {
    overlayClassName: (0, import_classnames29.default)(classPrefix42 + "-" + mode, props.overlayClassName),
    destroyTooltipOnHide: props.destroyOnHide,
    prefixCls: classPrefix42,
    getTooltipContainer: props.getContainer || function() {
      return document.body;
    },
    visible,
    onVisibleChange,
    trigger: props.trigger,
    motion: {
      motionName: {
        appear: enterClassName,
        appearActive: enterClassName,
        enter: enterClassName,
        enterActive: enterClassName,
        leaveActive: leaveClassName,
        leave: leaveClassName
      },
      motionDeadline: 200
    },
    overlay: import_react139.default.createElement("div", {
      className: classPrefix42 + "-inner-content"
    }, props.content)
  }), props.children);
});

// node_modules/antd-mobile/es/components/popover/pop-menu.js
var classPrefix43 = "adm-popover";
var PopMenu = (0, import_react140.forwardRef)(function(props, ref) {
  var innerRef = (0, import_react140.useRef)(null);
  (0, import_react140.useImperativeHandle)(ref, function() {
    return innerRef.current;
  }, []);
  var _onClick = (0, import_react140.useCallback)(function(e) {
    var _a;
    var onAction = props.onAction;
    if (onAction) {
      onAction(e);
    }
    (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.hide();
  }, [props.onAction]);
  var overlay = (0, import_react140.useMemo)(function() {
    return import_react140.default.createElement(import_react140.default.Fragment, null, (props.actions || []).map(function(ele, index) {
      var _classNames;
      var _a;
      return import_react140.default.createElement("div", {
        className: (0, import_classnames30.default)(classPrefix43 + "-inner-menu", (_classNames = {}, _classNames[classPrefix43 + "-inner-menu-with-icon"] = !!ele.icon, _classNames)),
        key: (_a = ele.key) !== null && _a !== void 0 ? _a : index
      }, import_react140.default.createElement(button_default, {
        disabled: ele.disabled,
        onClick: function onClick() {
          var _a2;
          if (!ele.disabled) {
            _onClick(ele);
            (_a2 = ele.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(ele);
          }
        },
        fill: "none",
        block: true
      }, ele.icon && import_react140.default.createElement("span", {
        className: classPrefix43 + "-inner-menu-icon"
      }, ele.icon), ele.text));
    }));
  }, [props.actions, _onClick]);
  return import_react140.default.createElement(Popover, Object.assign({
    ref: innerRef
  }, props, {
    overlayClassName: (0, import_classnames30.default)(classPrefix43 + "-menu", props.overlayClassName),
    content: overlay
  }), props.children);
});

// node_modules/antd-mobile/es/components/popover/index.js
var popover_default = attachPropertiesToComponent(Popover, {
  Menu: PopMenu
});

// node_modules/antd-mobile/es/components/progress-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/progress-bar/progress-bar.css";

// node_modules/antd-mobile/es/components/progress-bar/progress-bar.js
init_define_process_env();
var import_react141 = __toModule(require_react());
var classPrefix44 = "adm-progress-bar";
var ProgressBar = withDefaultProps({
  percent: 0
})(function(props) {
  var fillStyle = {
    width: props.percent + "%"
  };
  return withNativeProps(props, import_react141.default.createElement("div", {
    className: classPrefix44
  }, import_react141.default.createElement("div", {
    className: classPrefix44 + "-trail"
  }, import_react141.default.createElement("div", {
    className: classPrefix44 + "-fill",
    style: fillStyle
  }))));
});

// node_modules/antd-mobile/es/components/progress-bar/index.js
var progress_bar_default = ProgressBar;

// node_modules/antd-mobile/es/components/progress-circle/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/progress-circle/progress-circle.css";

// node_modules/antd-mobile/es/components/progress-circle/progress-circle.js
init_define_process_env();
var import_react142 = __toModule(require_react());
var classPrefix45 = "adm-progress-circle";
var ProgressCircle = withDefaultProps({
  percent: 0,
  strokeColor: "#1677FF"
})(function(props) {
  var style = {
    "--percent": props.percent.toString()
  };
  return withNativeProps(props, import_react142.default.createElement("div", {
    className: "" + classPrefix45,
    style
  }, import_react142.default.createElement("div", {
    className: classPrefix45 + "-content"
  }, import_react142.default.createElement("svg", {
    className: classPrefix45 + "-svg"
  }, import_react142.default.createElement("circle", {
    className: classPrefix45 + "-track",
    fill: "transparent"
  }), import_react142.default.createElement("circle", {
    className: classPrefix45 + "-fill",
    fill: "transparent"
  })), import_react142.default.createElement("div", {
    className: classPrefix45 + "-info"
  }, props.children))));
});

// node_modules/antd-mobile/es/components/progress-circle/index.js
var progress_circle_default = ProgressCircle;

// node_modules/antd-mobile/es/components/pull-to-refresh/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.css";

// node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.js
init_define_process_env();
var import_react144 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/sleep.js
init_define_process_env();
var sleep = function sleep2(time) {
  return new Promise(function(resolve) {
    return setTimeout(resolve, time);
  });
};

// node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var classPrefix46 = "adm-pull-to-refresh";
var defaultProps31 = {
  pullingText: "\u4E0B\u62C9\u5237\u65B0",
  canReleaseText: "\u91CA\u653E\u7ACB\u5373\u5237\u65B0",
  refreshingText: "\u52A0\u8F7D\u4E2D\u2026\u2026",
  completeText: "\u5237\u65B0\u6210\u529F",
  completeDelay: 500,
  onRefresh: function onRefresh() {
  }
};
var PullToRefresh = withDefaultProps(defaultProps31)(function(props) {
  var _a, _b;
  var headHeight = (_a = props.headHeight) !== null && _a !== void 0 ? _a : convertPx(40);
  var threshold = (_b = props.threshold) !== null && _b !== void 0 ? _b : convertPx(60);
  var _useState = (0, import_react144.useState)("pulling"), status = _useState[0], setStatus = _useState[1];
  var _useSpring = useSpring(function() {
    return {
      from: {
        height: 0
      },
      config: {
        tension: 300,
        friction: 30,
        clamp: true
      }
    };
  }), springStyles = _useSpring[0], api = _useSpring[1];
  var elementRef = (0, import_react144.useRef)(null);
  var pullingRef = (0, import_react144.useRef)(false);
  function doRefresh() {
    return __awaiter6(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
      var _this = this;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              api.start({
                height: headHeight
              });
              setStatus("refreshing");
              _context2.prev = 2;
              _context2.next = 5;
              return props.onRefresh();
            case 5:
              setStatus("complete");
              _context2.next = 12;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](2);
              setStatus("pulling");
              throw _context2.t0;
            case 12:
              if (!(props.completeDelay > 0)) {
                _context2.next = 15;
                break;
              }
              _context2.next = 15;
              return sleep(props.completeDelay);
            case 15:
              api.start({
                to: function to2(next) {
                  return __awaiter6(_this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return next({
                              height: 0
                            });
                          case 2:
                            _context.next = 4;
                            return next({
                              height: 0
                            });
                          case 4:
                            setStatus("pulling");
                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));
                }
              });
            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[2, 8]]);
    }));
  }
  useDrag(function(state) {
    if (status === "refreshing" || status === "complete")
      return;
    var event = state.event;
    if (state.last) {
      pullingRef.current = false;
      if (status === "canRelease") {
        doRefresh();
      } else {
        api.start({
          height: 0
        });
      }
      return;
    }
    var _state$movement = state.movement, y = _state$movement[1];
    if (state.first) {
      var element = elementRef.current;
      if (!element)
        return;
      var scrollParent = getScrollParent(element);
      if (!scrollParent)
        return;
      var top = "scrollTop" in scrollParent ? scrollParent.scrollTop : scrollParent.pageYOffset;
      if (top <= 0 && y > 0) {
        pullingRef.current = true;
      }
    }
    if (!pullingRef.current)
      return;
    if (typeof event.cancelable !== "boolean" || event.cancelable) {
      event.preventDefault();
    }
    event.stopPropagation();
    var height = Math.max(rubberbandIfOutOfBounds2(y, 0, 0, headHeight * 5, 0.5), 0);
    api.start({
      height
    });
    setStatus(height > threshold ? "canRelease" : "pulling");
  }, {
    pointer: {
      touch: true
    },
    axis: "y",
    target: elementRef,
    eventOptions: supportsPassive ? {
      passive: false
    } : false
  });
  var renderStatusText = function renderStatusText2() {
    var _a2;
    if (props.renderText) {
      return (_a2 = props.renderText) === null || _a2 === void 0 ? void 0 : _a2.call(props, status);
    }
    if (status === "pulling")
      return props.pullingText;
    if (status === "canRelease")
      return props.canReleaseText;
    if (status === "refreshing")
      return props.refreshingText;
    if (status === "complete")
      return props.completeText;
  };
  return import_react144.default.createElement(animated.div, {
    ref: elementRef,
    className: classPrefix46
  }, import_react144.default.createElement(animated.div, {
    style: springStyles,
    className: classPrefix46 + "-head"
  }, import_react144.default.createElement("div", {
    className: classPrefix46 + "-head-content",
    style: {
      height: headHeight
    }
  }, renderStatusText())), import_react144.default.createElement("div", {
    className: classPrefix46 + "-content"
  }, props.children));
});

// node_modules/antd-mobile/es/components/pull-to-refresh/index.js
var pull_to_refresh_default = PullToRefresh;

// node_modules/antd-mobile/es/components/radio/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/radio/radio.css";

// node_modules/antd-mobile/es/components/radio/group.js
init_define_process_env();
var import_react146 = __toModule(require_react());

// node_modules/antd-mobile/es/components/radio/group-context.js
init_define_process_env();
var import_react145 = __toModule(require_react());
var RadioGroupContext = (0, import_react145.createContext)(null);

// node_modules/antd-mobile/es/components/radio/group.js
var defaultProps32 = {
  disabled: false,
  defaultValue: null
};
var Group2 = withDefaultProps(defaultProps32)(function(props) {
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  return import_react146.default.createElement(RadioGroupContext.Provider, {
    value: {
      value: value === null ? [] : [value],
      check: function check(v) {
        setValue2(v);
      },
      uncheck: function uncheck() {
      },
      disabled: props.disabled
    }
  }, props.children);
});

// node_modules/antd-mobile/es/components/radio/radio.js
init_define_process_env();
var import_react147 = __toModule(require_react());
var import_classnames31 = __toModule(require_classnames());
var classPrefix47 = "adm-radio";
var defaultProps33 = {
  defaultChecked: false
};
var Radio = function Radio2(p) {
  var _classNames;
  var props = mergeProps(defaultProps33, p);
  var groupContext = (0, import_react147.useContext)(RadioGroupContext);
  var _usePropsValue = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  }), checked = _usePropsValue[0], setChecked = _usePropsValue[1];
  var disabled = props.disabled;
  var value = props.value;
  if (groupContext && value !== void 0) {
    checked = groupContext.value.includes(value);
    setChecked = function setChecked2(checked2) {
      var _a;
      if (checked2) {
        groupContext.check(value);
      } else {
        groupContext.uncheck(value);
      }
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, checked2);
    };
    disabled = disabled || groupContext.disabled;
  }
  var renderIcon = function renderIcon2() {
    if (props.icon) {
      return import_react147.default.createElement("div", {
        className: classPrefix47 + "-custom-icon"
      }, props.icon(checked));
    }
    return import_react147.default.createElement("div", {
      className: classPrefix47 + "-icon"
    }, import_react147.default.createElement(CheckIcon, {
      className: classPrefix47 + "-icon-checked"
    }));
  };
  return import_react147.default.createElement("label", {
    className: (0, import_classnames31.default)(classPrefix47, props.className, (_classNames = {}, _classNames[classPrefix47 + "-checked"] = checked, _classNames[classPrefix47 + "-disabled"] = disabled, _classNames[classPrefix47 + "-block"] = props.block, _classNames)),
    style: props.style
  }, import_react147.default.createElement("input", {
    type: "radio",
    checked,
    onChange: function onChange(e) {
      setChecked(e.target.checked);
    },
    onClick: function onClick(e) {
      e.stopPropagation();
      e.nativeEvent.stopImmediatePropagation();
    },
    disabled,
    id: props.id
  }), renderIcon(), props.children && import_react147.default.createElement("div", {
    className: classPrefix47 + "-content"
  }, props.children));
};

// node_modules/antd-mobile/es/components/radio/index.js
var radio_default = attachPropertiesToComponent(Radio, {
  Group: Group2
});

// node_modules/antd-mobile/es/components/rate/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/rate/rate.css";

// node_modules/antd-mobile/es/components/rate/rate.js
init_define_process_env();
var import_react148 = __toModule(require_react());
var import_classnames32 = __toModule(require_classnames());
var classPrefix48 = "adm-rate";
var defaultProps34 = {
  count: 5,
  allowHalf: false,
  character: import_react148.default.createElement(StarFill_default, null),
  defaultValue: 0,
  readOnly: false,
  allowClear: true
};
var Rate = withDefaultProps(defaultProps34)(function(props) {
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var starList = Array(props.count).fill(null);
  function renderStar(v, half) {
    var _classNames;
    return import_react148.default.createElement("div", {
      className: (0, import_classnames32.default)(classPrefix48 + "-star", (_classNames = {}, _classNames[classPrefix48 + "-star-active"] = value >= v, _classNames[classPrefix48 + "-star-half"] = half, _classNames[classPrefix48 + "-star-readonly"] = props.readOnly, _classNames)),
      onClick: function onClick() {
        if (props.readOnly)
          return;
        if (props.allowClear && value === v) {
          setValue2(0);
        } else {
          setValue2(v);
        }
      }
    }, props.character);
  }
  return withNativeProps(props, import_react148.default.createElement("div", {
    className: classPrefix48
  }, starList.map(function(_, i) {
    return import_react148.default.createElement("div", {
      key: i,
      className: (0, import_classnames32.default)(classPrefix48 + "-box")
    }, props.allowHalf && renderStar(i + 0.5, true), renderStar(i + 1, false));
  })));
});

// node_modules/antd-mobile/es/components/rate/index.js
var rate_default = Rate;

// node_modules/antd-mobile/es/components/result/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/result/result.css";

// node_modules/antd-mobile/es/components/result/result.js
init_define_process_env();
var import_react149 = __toModule(require_react());
var import_classnames33 = __toModule(require_classnames());
var classPrefix49 = "adm-result";
var iconRecord2 = {
  success: CheckCircleFill_default,
  error: CloseCircleFill_default,
  info: InformationCircleFill_default,
  waiting: ClockCircleFill_default,
  warning: ExclamationCircleFill_default
};
var Result = function Result2(props) {
  var status = props.status, title = props.title, description = props.description, icon = props.icon;
  if (!status)
    return null;
  var resultIcon = icon || import_react149.default.createElement(iconRecord2[status]);
  return withNativeProps(props, import_react149.default.createElement("div", {
    className: (0, import_classnames33.default)(classPrefix49, classPrefix49 + "-" + status)
  }, import_react149.default.createElement("div", {
    className: classPrefix49 + "-icon"
  }, resultIcon), import_react149.default.createElement("div", {
    className: classPrefix49 + "-title"
  }, title), description ? import_react149.default.createElement("div", {
    className: classPrefix49 + "-description"
  }, description) : null));
};

// node_modules/antd-mobile/es/components/result/index.js
var result_default = Result;

// node_modules/antd-mobile/es/components/safe-area/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/safe-area/safe-area.css";

// node_modules/antd-mobile/es/components/safe-area/safe-area.js
init_define_process_env();
var import_react150 = __toModule(require_react());
var import_classnames34 = __toModule(require_classnames());
var classPrefix50 = "adm-safe-area";
var SafeArea = function SafeArea2(props) {
  return withNativeProps(props, import_react150.default.createElement("div", {
    className: (0, import_classnames34.default)(classPrefix50, classPrefix50 + "-position-" + props.position)
  }));
};

// node_modules/antd-mobile/es/components/safe-area/index.js
var safe_area_default = SafeArea;

// node_modules/antd-mobile/es/components/search/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/search/search.css";

// node_modules/antd-mobile/es/components/search/search.js
init_define_process_env();
var import_react151 = __toModule(require_react());
var import_classnames35 = __toModule(require_classnames());
var classPrefix51 = "adm-search";
var defaultProps35 = {
  clearable: true,
  showCancelButton: false,
  defaultValue: ""
};
var Search = (0, import_react151.forwardRef)(function(p, ref) {
  var _classNames;
  var _a;
  var props = mergeProps(defaultProps35, p);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var _useState = (0, import_react151.useState)(false), hasFocus = _useState[0], setHasFocus = _useState[1];
  var inputRef = (0, import_react151.useRef)(null);
  (0, import_react151.useImperativeHandle)(ref, function() {
    return {
      clear: function clear2() {
        var _a2;
        return (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.clear();
      },
      focus: function focus() {
        var _a2;
        return (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      },
      blur: function blur() {
        var _a2;
        return (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.blur();
      }
    };
  });
  var _useConfig = useConfig(), locale = _useConfig.locale;
  return withNativeProps(props, import_react151.default.createElement("div", {
    className: (0, import_classnames35.default)(classPrefix51, (_classNames = {}, _classNames[classPrefix51 + "-active"] = hasFocus, _classNames))
  }, import_react151.default.createElement("div", {
    className: classPrefix51 + "-input-box"
  }, import_react151.default.createElement("div", {
    className: classPrefix51 + "-input-box-icon"
  }, import_react151.default.createElement(SearchOutline_default, null)), import_react151.default.createElement(input_default, {
    ref: inputRef,
    className: classPrefix51 + "-input",
    value,
    onChange: setValue2,
    maxLength: props.maxLength,
    placeholder: props.placeholder,
    clearable: props.clearable,
    onFocus: function onFocus(e) {
      var _a2;
      setHasFocus(true);
      (_a2 = props.onFocus) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    },
    onBlur: function onBlur(e) {
      var _a2;
      setHasFocus(false);
      (_a2 = props.onBlur) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    },
    onClear: props.onClear,
    type: "search",
    onEnterPress: function onEnterPress() {
      var _a2, _b;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.blur();
      (_b = props.onSearch) === null || _b === void 0 ? void 0 : _b.call(props, value);
    }
  })), props.showCancelButton && hasFocus && import_react151.default.createElement("div", {
    className: classPrefix51 + "-suffix"
  }, import_react151.default.createElement("a", {
    onMouseDown: function onMouseDown(e) {
      e.preventDefault();
    },
    onTouchStart: function onTouchStart(e) {
      e.preventDefault();
    },
    onClick: function onClick() {
      var _a2, _b, _c;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.clear();
      (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.blur();
      (_c = props.onCancel) === null || _c === void 0 ? void 0 : _c.call(props);
    }
  }, (_a = props.cancelText) !== null && _a !== void 0 ? _a : locale.common.cancel))));
});

// node_modules/antd-mobile/es/components/search/index.js
var search_default = Search;

// node_modules/antd-mobile/es/components/selector/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/selector/selector.css";

// node_modules/antd-mobile/es/components/selector/selector.js
init_define_process_env();
var import_classnames36 = __toModule(require_classnames());
var import_react152 = __toModule(require_react());
import selectorCheckMarkImg from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/selector-check-mark.svg";
var classPrefix52 = "adm-selector";
var defaultProps36 = {
  multiple: false,
  defaultValue: []
};
var Selector = function Selector2(p) {
  var props = mergeProps(defaultProps36, p);
  var _usePropsValue = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: function onChange(val) {
      var _a;
      var context = {
        get items() {
          return props.options.filter(function(option) {
            return val.includes(option.value);
          });
        }
      };
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, context);
    }
  }), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var items = props.options.map(function(option) {
    var _classNames;
    var active = (value || []).includes(option.value);
    var disabled = option.disabled || props.disabled;
    var itemCls = (0, import_classnames36.default)(classPrefix52 + "-item", (_classNames = {}, _classNames[classPrefix52 + "-item-active"] = active && !props.multiple, _classNames[classPrefix52 + "-item-multiple-active"] = active && props.multiple, _classNames[classPrefix52 + "-item-disabled"] = disabled, _classNames));
    return import_react152.default.createElement("div", {
      key: option.value,
      className: itemCls,
      onClick: function onClick() {
        if (disabled) {
          return;
        }
        if (props.multiple) {
          var val = active ? value.filter(function(v) {
            return v !== option.value;
          }) : [].concat(value, [option.value]);
          setValue2(val);
        } else {
          var _val = active ? [] : [option.value];
          setValue2(_val);
        }
      }
    }, option.label, active && props.multiple && import_react152.default.createElement("div", {
      className: classPrefix52 + "-check-mark-wrapper"
    }, import_react152.default.createElement("img", {
      src: selectorCheckMarkImg
    })));
  });
  return withNativeProps(props, import_react152.default.createElement("div", {
    className: classPrefix52
  }, !props.columns && import_react152.default.createElement(space_default, {
    wrap: true
  }, items), props.columns && import_react152.default.createElement(grid_default, {
    columns: props.columns,
    gap: convertPx(8)
  }, items)));
};

// node_modules/antd-mobile/es/components/selector/index.js
var selector_default = Selector;

// node_modules/antd-mobile/es/components/slider/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/slider/slider.css";

// node_modules/antd-mobile/es/components/slider/slider.js
init_define_process_env();
var import_react157 = __toModule(require_react());
var import_classnames39 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/slider/ticks.js
init_define_process_env();
var import_react153 = __toModule(require_react());
var import_classnames37 = __toModule(require_classnames());
var classPrefix53 = "adm-slider";
var Ticks = function Ticks2(_ref) {
  var points = _ref.points, max = _ref.max, min = _ref.min, upperBound = _ref.upperBound, lowerBound = _ref.lowerBound;
  var range3 = max - min;
  var elements = points.map(function(point) {
    var _classNames;
    var offset = Math.abs(point - min) / range3 * 100 + "%";
    var isActived = point <= upperBound && point >= lowerBound;
    var style = {
      left: offset
    };
    var pointClassName = (0, import_classnames37.default)((_classNames = {}, _classNames[classPrefix53 + "-tick"] = true, _classNames[classPrefix53 + "-tick-active"] = isActived, _classNames));
    return import_react153.default.createElement("span", {
      className: pointClassName,
      style,
      key: point
    });
  });
  return import_react153.default.createElement("div", {
    className: classPrefix53 + "-ticks"
  }, elements);
};
var ticks_default = Ticks;

// node_modules/antd-mobile/es/components/slider/marks.js
init_define_process_env();
var import_react154 = __toModule(require_react());
var import_classnames38 = __toModule(require_classnames());
var classPrefix54 = "adm-slider-mark";
var Marks = function Marks2(_ref) {
  var marks = _ref.marks, upperBound = _ref.upperBound, lowerBound = _ref.lowerBound, max = _ref.max, min = _ref.min;
  var marksKeys = Object.keys(marks);
  var range3 = max - min;
  var elements = marksKeys.map(parseFloat).sort(function(a, b) {
    return a - b;
  }).filter(function(point) {
    return point >= min && point <= max;
  }).map(function(point) {
    var _classNames;
    var markPoint = marks[point];
    if (!markPoint && markPoint !== 0) {
      return null;
    }
    var isActive = point <= upperBound && point >= lowerBound;
    var markClassName = (0, import_classnames38.default)((_classNames = {}, _classNames[classPrefix54 + "-text"] = true, _classNames[classPrefix54 + "-text-active"] = isActive, _classNames));
    var style = {
      left: (point - min) / range3 * 100 + "%"
    };
    return import_react154.default.createElement("span", {
      className: markClassName,
      style,
      key: point
    }, markPoint);
  });
  return import_react154.default.createElement("div", {
    className: classPrefix54
  }, elements);
};
var marks_default = Marks;

// node_modules/antd-mobile/es/components/slider/thumb.js
init_define_process_env();
var import_react155 = __toModule(require_react());
var classPrefix55 = "adm-slider";
var Thumb = function Thumb2(props) {
  var value = props.value, min = props.min, max = props.max, disabled = props.disabled, onDrag = props.onDrag;
  var prevValue = (0, import_react155.useRef)(value);
  var currentPosition = function currentPosition2() {
    return {
      left: (value - min) / (max - min) * 100 + "%",
      right: "auto"
    };
  };
  var bind = useDrag(function(state) {
    var _a;
    if (disabled)
      return;
    if (state.first) {
      prevValue.current = value;
    }
    var x = state.xy[0] - state.initial[0];
    var sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;
    if (!sliderOffsetWith)
      return;
    var diff = x / Math.ceil(sliderOffsetWith) * (max - min);
    onDrag(prevValue.current + diff, state.first, state.last);
  }, {
    axis: "x"
  });
  return import_react155.default.createElement("div", Object.assign({
    className: classPrefix55 + "-thumb-container",
    style: currentPosition()
  }, bind()), import_react155.default.createElement("div", {
    className: classPrefix55 + "-thumb"
  }));
};
var thumb_default = Thumb;

// node_modules/antd-mobile/es/components/slider/slider.js
var classPrefix56 = "adm-slider";
var defaultProps37 = {
  min: 0,
  max: 100,
  step: 1,
  ticks: false,
  range: false,
  disabled: false
};
var Slider = withDefaultProps(defaultProps37)(function(props) {
  var _classNames;
  var _a;
  var min = props.min, max = props.max, disabled = props.disabled, marks = props.marks, ticks = props.ticks, step = props.step;
  function sortValue(val) {
    return val.sort(function(a, b) {
      return a - b;
    });
  }
  function convertValue(value) {
    return props.range ? value : [props.min, value];
  }
  function reverseValue(value) {
    return props.range ? value : value[1];
  }
  function onAfterChange(value) {
    var _a2;
    (_a2 = props.onAfterChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, reverseValue(value));
  }
  var _usePropsValue = usePropsValue({
    value: props.value,
    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : props.range ? [min, min] : min,
    onChange: props.onChange
  }), rawValue = _usePropsValue[0], setRawValue = _usePropsValue[1];
  var sliderValue = sortValue(convertValue(rawValue));
  function setSliderValue(value) {
    var next = sortValue(value);
    var current = sliderValue;
    if (next[0] === current[0] && next[1] === current[1])
      return;
    setRawValue(reverseValue(next));
  }
  var trackRef = (0, import_react157.useRef)(null);
  var fillSize = 100 * (sliderValue[1] - sliderValue[0]) / (max - min) + "%";
  var fillStart = 100 * (sliderValue[0] - min) / (max - min) + "%";
  var pointList = (0, import_react157.useMemo)(function() {
    if (marks) {
      return Object.keys(marks).map(parseFloat).sort(function(a, b) {
        return a - b;
      });
    } else {
      var points = [];
      for (var i = min; i <= max; i += step) {
        points.push(i);
      }
      return points;
    }
  }, [marks, ticks, step, min, max]);
  function getValueByPosition(position) {
    var newPosition = position < min ? min : position > max ? max : position;
    var value = min;
    if (pointList.length) {
      value = nearest(pointList, newPosition);
    } else {
      var lengthPerStep = 100 / ((max - min) / step);
      var steps = Math.round(newPosition / lengthPerStep);
      value = steps * lengthPerStep * (max - min) * 0.01 + min;
    }
    return value;
  }
  var dragLockRef = (0, import_react157.useRef)(0);
  var onTrackClick = function onTrackClick2(event) {
    if (dragLockRef.current > 0)
      return;
    event.stopPropagation();
    if (disabled)
      return;
    var track = trackRef.current;
    if (!track)
      return;
    var sliderOffsetLeft = track.getBoundingClientRect().left;
    var position = (event.clientX - sliderOffsetLeft) / Math.ceil(track.offsetWidth) * (max - min) + min;
    var targetValue = getValueByPosition(position);
    var nextSliderValue;
    if (props.range) {
      if (Math.abs(targetValue - sliderValue[0]) > Math.abs(targetValue - sliderValue[1])) {
        nextSliderValue = [sliderValue[0], targetValue];
      } else {
        nextSliderValue = [targetValue, sliderValue[1]];
      }
    } else {
      nextSliderValue = [props.min, targetValue];
    }
    setSliderValue(nextSliderValue);
    onAfterChange(nextSliderValue);
  };
  var valueBeforeDragRef = (0, import_react157.useRef)();
  var renderThumb = function renderThumb2(index) {
    return import_react157.default.createElement(thumb_default, {
      key: index,
      value: sliderValue[index],
      min,
      max,
      disabled,
      trackRef,
      onDrag: function onDrag(position, first, last) {
        if (first) {
          dragLockRef.current += 1;
          valueBeforeDragRef.current = sliderValue;
        }
        var val = getValueByPosition(position);
        var valueBeforeDrag = valueBeforeDragRef.current;
        if (!valueBeforeDrag)
          return;
        var next = [].concat(valueBeforeDrag);
        next[index] = val;
        setSliderValue(next);
        if (last) {
          onAfterChange(next);
          window.setTimeout(function() {
            dragLockRef.current -= 1;
          }, 100);
        }
      }
    });
  };
  return withNativeProps(props, import_react157.default.createElement("div", {
    className: (0, import_classnames39.default)(classPrefix56, (_classNames = {}, _classNames[classPrefix56 + "-disabled"] = disabled, _classNames))
  }, import_react157.default.createElement("div", {
    className: classPrefix56 + "-track-container",
    onClick: onTrackClick
  }, import_react157.default.createElement("div", {
    className: classPrefix56 + "-track",
    onClick: onTrackClick,
    ref: trackRef
  }, import_react157.default.createElement("div", {
    className: classPrefix56 + "-fill",
    style: {
      width: fillSize,
      left: fillStart
    }
  }), props.ticks && import_react157.default.createElement(ticks_default, {
    points: pointList,
    min,
    max,
    lowerBound: sliderValue[0],
    upperBound: sliderValue[1]
  }), props.range && renderThumb(0), renderThumb(1))), marks && import_react157.default.createElement(marks_default, {
    min,
    max,
    marks,
    lowerBound: sliderValue[0],
    upperBound: sliderValue[1]
  })));
});

// node_modules/antd-mobile/es/components/slider/index.js
var slider_default = Slider;

// node_modules/antd-mobile/es/components/stepper/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/stepper/stepper.css";

// node_modules/antd-mobile/es/components/stepper/stepper.js
init_define_process_env();
var import_classnames40 = __toModule(require_classnames());
var import_react158 = __toModule(require_react());
var classPrefix57 = "adm-stepper";
var defaultProps38 = {
  defaultValue: 0,
  step: 1,
  disabled: false
};
var Stepper = withDefaultProps(defaultProps38)(function(props) {
  var _classNames;
  var disabled = props.disabled, step = props.step, max = props.max, min = props.min;
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var _useState = (0, import_react158.useState)(function() {
    return value.toString();
  }), inputValue = _useState[0], setInputValue = _useState[1];
  function setValueWithCheck(v) {
    if (isNaN(v))
      return;
    var target = bound(v, props.min, props.max);
    if (props.digits || props.digits === 0) {
      target = parseFloat(target.toFixed(props.digits));
    }
    setValue2(target);
  }
  var _useState2 = (0, import_react158.useState)(false), hasFocus = _useState2[0], setHasFocus = _useState2[1];
  (0, import_react158.useEffect)(function() {
    if (!hasFocus) {
      setInputValue(value.toString());
    }
  }, [hasFocus]);
  (0, import_react158.useEffect)(function() {
    if (!hasFocus) {
      setInputValue(value.toString());
    }
  }, [value]);
  var handleInputChange = function handleInputChange2(v) {
    setInputValue(v);
    setValueWithCheck(parseFloat(v));
  };
  var handleMinus = function handleMinus2() {
    setValueWithCheck(value - step);
  };
  var handlePlus = function handlePlus2() {
    setValueWithCheck(value + step);
  };
  var minusDisabled = function minusDisabled2() {
    if (min === void 0) {
      return disabled;
    } else {
      return disabled || value <= min;
    }
  };
  var plusDisabled = function plusDisabled2() {
    if (max === void 0) {
      return disabled;
    } else {
      return disabled || value >= max;
    }
  };
  return withNativeProps(props, import_react158.default.createElement("div", {
    className: (0, import_classnames40.default)(classPrefix57, (_classNames = {}, _classNames[classPrefix57 + "-disabled"] = disabled, _classNames))
  }, import_react158.default.createElement(button_default, {
    className: classPrefix57 + "-minus",
    onClick: handleMinus,
    disabled: minusDisabled(),
    fill: "none",
    color: "primary"
  }, import_react158.default.createElement(MinusOutline_default, {
    fontSize: 12
  })), import_react158.default.createElement(input_default, {
    className: classPrefix57 + "-input",
    onFocus: function onFocus(e) {
      var _a;
      setHasFocus(true);
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    value: inputValue,
    onChange: function onChange(val) {
      disabled || handleInputChange(val);
    },
    disabled,
    onBlur: function onBlur(e) {
      var _a;
      setHasFocus(false);
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    }
  }), import_react158.default.createElement(button_default, {
    className: classPrefix57 + "-plus",
    onClick: handlePlus,
    disabled: plusDisabled(),
    fill: "none",
    color: "primary"
  }, import_react158.default.createElement(AddOutline_default, {
    fontSize: 12
  }))));
});

// node_modules/antd-mobile/es/components/stepper/index.js
var stepper_default = Stepper;

// node_modules/antd-mobile/es/components/steps/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/steps/steps.css";

// node_modules/antd-mobile/es/components/steps/step.js
init_define_process_env();
var import_react159 = __toModule(require_react());
var import_classnames41 = __toModule(require_classnames());
var classPrefix58 = "adm-step";
var Step = function Step2(props) {
  var title = props.title, description = props.description, icon = props.icon, _props$status = props.status, status = _props$status === void 0 ? "wait" : _props$status;
  return withNativeProps(props, import_react159.default.createElement("div", {
    className: (0, import_classnames41.default)("" + classPrefix58, classPrefix58 + "-status-" + status)
  }, import_react159.default.createElement("div", {
    className: classPrefix58 + "-indicator"
  }, import_react159.default.createElement("div", {
    className: classPrefix58 + "-icon-container"
  }, icon)), import_react159.default.createElement("div", {
    className: classPrefix58 + "-content"
  }, import_react159.default.createElement("div", {
    className: classPrefix58 + "-title"
  }, title), !!description && import_react159.default.createElement("div", {
    className: classPrefix58 + "-description"
  }, description))));
};

// node_modules/antd-mobile/es/components/steps/steps.js
init_define_process_env();
var import_react160 = __toModule(require_react());
var import_classnames42 = __toModule(require_classnames());
var classPrefix59 = "adm-steps";
var stepClassPrefix = "adm-step";
var defaultIcon = import_react160.default.createElement("span", {
  className: stepClassPrefix + "-icon-dot"
});
var defaultProps39 = {
  current: 0,
  direction: "horizontal"
};
var Steps = withDefaultProps(defaultProps39)(function(props) {
  var direction = props.direction, current = props.current;
  var classString = (0, import_classnames42.default)(classPrefix59, classPrefix59 + "-" + direction);
  return withNativeProps(props, import_react160.default.createElement("div", {
    className: classString
  }, import_react160.default.Children.map(props.children, function(child, index) {
    var _a;
    if (!import_react160.default.isValidElement(child)) {
      return child;
    }
    var props2 = child.props;
    var status = props2.status || "wait";
    if (index < current) {
      status = props2.status || "finish";
    } else if (index === current) {
      status = props2.status || "process";
    }
    var icon = (_a = props2.icon) !== null && _a !== void 0 ? _a : defaultIcon;
    return import_react160.default.cloneElement(child, {
      status,
      icon
    });
  })));
});

// node_modules/antd-mobile/es/components/steps/index.js
var steps_default = attachPropertiesToComponent(Steps, {
  Step
});

// node_modules/antd-mobile/es/components/swipe-action/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/swipe-action/swipe-action.css";

// node_modules/antd-mobile/es/components/swipe-action/swipe-action.js
init_define_process_env();
var import_react161 = __toModule(require_react());
var defaultProps40 = {
  rightActions: [],
  leftActions: [],
  closeOnTouchAway: true,
  closeOnAction: true
};
var SwipeAction = (0, import_react161.forwardRef)(function(p, ref) {
  var props = mergeProps(defaultProps40, p);
  var rootRef = (0, import_react161.useRef)(null);
  var leftRef = (0, import_react161.useRef)(null);
  var rightRef = (0, import_react161.useRef)(null);
  function getWidth(ref2) {
    var element = ref2.current;
    if (!element)
      return 0;
    return element.offsetWidth;
  }
  function getLeftWidth() {
    return getWidth(leftRef);
  }
  function getRightWidth() {
    return getWidth(rightRef);
  }
  var _useSpring = useSpring(function() {
    return {
      x: 0,
      config: {
        tension: 200,
        friction: 30
      }
    };
  }, []), x = _useSpring[0].x, api = _useSpring[1];
  var draggingRef = (0, import_react161.useRef)(false);
  var bind = useDrag(function(state) {
    draggingRef.current = true;
    var _state$offset = state.offset, offsetX = _state$offset[0];
    if (state.last) {
      var leftWidth = getLeftWidth();
      var rightWidth = getRightWidth();
      var position = offsetX + state.velocity[0] * state.direction[0] * 50;
      if (offsetX > 0) {
        position = Math.max(0, position);
      } else if (offsetX < 0) {
        position = Math.min(0, position);
      } else {
        position = 0;
      }
      api.start({
        x: nearest([-rightWidth, 0, leftWidth], position)
      });
      window.setTimeout(function() {
        draggingRef.current = false;
      });
    } else {
      api.start({
        x: offsetX,
        immediate: true
      });
    }
  }, {
    from: function from() {
      return [x.get(), 0];
    },
    bounds: function bounds() {
      var leftWidth = getLeftWidth();
      var rightWidth = getRightWidth();
      return {
        left: -rightWidth,
        right: leftWidth
      };
    },
    axis: "x",
    preventScroll: true
  });
  function close() {
    api.start({
      x: 0
    });
  }
  (0, import_react161.useImperativeHandle)(ref, function() {
    return {
      show: function show3(side) {
        if (side === void 0) {
          side = "right";
        }
        if (side === "right") {
          api.start({
            x: -getRightWidth()
          });
        } else if (side === "left") {
          api.start({
            x: getLeftWidth()
          });
        }
      },
      close
    };
  });
  (0, import_react161.useEffect)(function() {
    if (!props.closeOnTouchAway)
      return;
    function handle(e) {
      if (x.get() === 0) {
        return;
      }
      var root = rootRef.current;
      if (root && !root.contains(e.target)) {
        close();
      }
    }
    document.addEventListener("pointerdown", handle);
    return function() {
      document.removeEventListener("pointerdown", handle);
    };
  }, [props.closeOnTouchAway]);
  function renderAction(action) {
    var _a, _b;
    var color = (_a = action.color) !== null && _a !== void 0 ? _a : "light";
    return import_react161.default.createElement(button_default, {
      key: action.key,
      className: "adm-swipe-action-action-button",
      style: {
        "--background-color": (_b = colorRecord2[color]) !== null && _b !== void 0 ? _b : color
      },
      onClick: function onClick(e) {
        var _a2, _b2;
        if (props.closeOnAction) {
          close();
        }
        (_a2 = action.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(action, e);
        (_b2 = props.onAction) === null || _b2 === void 0 ? void 0 : _b2.call(props, action);
      }
    }, action.text);
  }
  return withNativeProps(props, import_react161.default.createElement("div", Object.assign({
    className: "adm-swipe-action"
  }, bind(), {
    ref: rootRef,
    onClickCapture: function onClickCapture(e) {
      if (draggingRef.current) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  }), import_react161.default.createElement(animated.div, {
    className: "adm-swipe-action-track",
    style: {
      x
    }
  }, import_react161.default.createElement("div", {
    className: "adm-swipe-action-actions adm-swipe-action-actions-left",
    ref: leftRef
  }, props.leftActions.map(renderAction)), import_react161.default.createElement("div", {
    className: "adm-swipe-action-content",
    onClickCapture: function onClickCapture(e) {
      if (x.goal !== 0) {
        e.preventDefault();
        e.stopPropagation();
        api.start({
          x: 0
        });
      }
    }
  }, import_react161.default.createElement(animated.div, {
    style: {
      pointerEvents: x.to(function(v) {
        return v !== 0 && x.goal !== 0 ? "none" : "unset";
      })
    }
  }, props.children)), import_react161.default.createElement("div", {
    className: "adm-swipe-action-actions adm-swipe-action-actions-right",
    ref: rightRef
  }, props.rightActions.map(renderAction)))));
});
var colorRecord2 = {
  light: "var(--adm-color-light)",
  weak: "var(--adm-color-weak)",
  primary: "var(--adm-color-primary)",
  success: "var(--adm-color-success)",
  warning: "var(--adm-color-warning)",
  danger: "var(--adm-color-danger)"
};

// node_modules/antd-mobile/es/components/swipe-action/index.js
var swipe_action_default = SwipeAction;

// node_modules/antd-mobile/es/components/swiper/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/swiper/swiper.css";

// node_modules/antd-mobile/es/components/swiper/swiper.js
init_define_process_env();
var import_react165 = __toModule(require_react());
var import_classnames43 = __toModule(require_classnames());

// node_modules/antd-mobile/es/components/swiper/swiper-item.js
init_define_process_env();
var import_react163 = __toModule(require_react());
var SwiperItem = function SwiperItem2(props) {
  return withNativeProps(props, import_react163.default.createElement("div", {
    className: "adm-swiper-item",
    onClick: props.onClick
  }, props.children));
};

// node_modules/antd-mobile/es/components/swiper/swiper.js
var import_staged_components2 = __toModule(require_staged_components());

// node_modules/antd-mobile/es/utils/use-ref-state.js
init_define_process_env();
var import_react164 = __toModule(require_react());
function useRefState(initialState) {
  var _useState = (0, import_react164.useState)(initialState), state = _useState[0], setState = _useState[1];
  var ref = (0, import_react164.useRef)(state);
  (0, import_react164.useLayoutEffect)(function() {
    ref.current = state;
  }, [state]);
  return [state, setState, ref];
}

// node_modules/antd-mobile/es/components/swiper/swiper.js
var defaultProps41 = {
  defaultIndex: 0,
  allowTouchMove: true,
  autoplay: false,
  autoplayInterval: 3e3,
  loop: true
};
var Swiper = (0, import_react165.forwardRef)((0, import_staged_components2.staged)(function(p, ref) {
  var props = mergeProps(defaultProps41, p);
  var _useMemo = (0, import_react165.useMemo)(function() {
    var count2 = 0;
    var validChildren2 = import_react165.default.Children.map(props.children, function(child) {
      if (!import_react165.default.isValidElement(child))
        return null;
      if (child.type !== SwiperItem) {
        devWarning("Swiper", "The children of `Swiper` must be `Swiper.Item` components.");
        return null;
      }
      count2++;
      return child;
    });
    return {
      validChildren: validChildren2,
      count: count2
    };
  }, [props.children]), validChildren = _useMemo.validChildren, count = _useMemo.count;
  if (count === 0) {
    devWarning("Swiper", "`Swiper` needs at least one child.");
    return null;
  }
  return function() {
    var loop2 = props.loop;
    if (count === 1 && loop2) {
      devWarning("Swiper", "`Swiper` needs at least two children to enable loop.");
      loop2 = false;
    }
    var trackRef = (0, import_react165.useRef)(null);
    function getWidth() {
      var track = trackRef.current;
      if (!track)
        return 0;
      return track.offsetWidth;
    }
    var _useState = (0, import_react165.useState)(props.defaultIndex), current = _useState[0], setCurrent = _useState[1];
    var _useRefState = useRefState(false), dragging = _useRefState[0], setDragging = _useRefState[1], draggingRef = _useRefState[2];
    var _useSpring = useSpring(function() {
      return {
        x: bound(current, 0, count - 1) * 100,
        config: {
          tension: 200,
          friction: 30
        },
        onRest: function onRest() {
          if (draggingRef.current)
            return;
          var rawX = x.get();
          var totalWidth = 100 * count;
          var standardX = modulus(rawX, totalWidth);
          if (standardX === rawX)
            return;
          api.start({
            x: standardX,
            immediate: true
          });
        }
      };
    }, [count]), x = _useSpring[0].x, api = _useSpring[1];
    var bind = useDrag(function(state) {
      var width = getWidth();
      if (!width)
        return;
      var _state$offset = state.offset, offsetX = _state$offset[0];
      setDragging(true);
      if (!state.last) {
        api.start({
          x: offsetX * 100 / width,
          immediate: true
        });
      } else {
        var index = Math.round((offsetX + Math.min(state.velocity[0] * 2e3, width) * state.direction[0]) / width);
        swipeTo(index);
        window.setTimeout(function() {
          setDragging(false);
        });
      }
    }, {
      transform: function transform(_ref) {
        var x2 = _ref[0], y = _ref[1];
        return [-x2, y];
      },
      from: function from() {
        var width = getWidth();
        return [x.get() / 100 * width, 0];
      },
      bounds: function bounds() {
        if (loop2)
          return {};
        var width = getWidth();
        return {
          left: 0,
          right: (count - 1) * width
        };
      },
      rubberband: true,
      axis: "x",
      preventScroll: true,
      pointer: {
        touch: true
      }
    });
    function swipeTo(index) {
      var _a, _b;
      if (loop2) {
        var i = modulus(index, count);
        setCurrent(i);
        (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);
        api.start({
          x: index * 100
        });
      } else {
        var _i = bound(index, 0, count - 1);
        setCurrent(_i);
        (_b = props.onIndexChange) === null || _b === void 0 ? void 0 : _b.call(props, _i);
        api.start({
          x: _i * 100
        });
      }
    }
    function swipeNext() {
      swipeTo(Math.round(x.get() / 100) + 1);
    }
    function swipePrev() {
      swipeTo(Math.round(x.get() / 100) - 1);
    }
    (0, import_react165.useImperativeHandle)(ref, function() {
      return {
        swipeTo,
        swipeNext,
        swipePrev
      };
    });
    var autoplay = props.autoplay, autoplayInterval = props.autoplayInterval;
    (0, import_react165.useEffect)(function() {
      if (!autoplay || dragging)
        return;
      var interval = window.setInterval(function() {
        swipeNext();
      }, autoplayInterval);
      return function() {
        window.clearInterval(interval);
      };
    }, [autoplay, autoplayInterval, dragging]);
    return withNativeProps(props, import_react165.default.createElement("div", {
      className: "adm-swiper"
    }, import_react165.default.createElement("div", Object.assign({
      className: (0, import_classnames43.default)("adm-swiper-track", {
        "adm-swiper-track-allow-touch-move": props.allowTouchMove
      }),
      onClickCapture: function onClickCapture(e) {
        if (draggingRef.current) {
          e.stopPropagation();
        }
      }
    }, props.allowTouchMove ? bind() : {}), import_react165.default.createElement("div", {
      className: "adm-swiper-track-inner",
      ref: trackRef
    }, import_react165.default.Children.map(validChildren, function(child, index) {
      return import_react165.default.createElement(animated.div, {
        className: "adm-swiper-slide",
        style: {
          x: x.to(function(x2) {
            var position = -x2 + index * 100;
            if (loop2) {
              var totalWidth = count * 100;
              var flagWidth = totalWidth / 2 - 10;
              position = modulus(position + flagWidth, totalWidth) - flagWidth;
            }
            return position + "%";
          }),
          left: "-" + index * 100 + "%"
        }
      }, child);
    }))), props.indicator === void 0 ? import_react165.default.createElement("div", {
      className: "adm-swiper-indicator"
    }, import_react165.default.createElement(page_indicator_default, Object.assign({}, props.indicatorProps, {
      total: count,
      current
    }))) : props.indicator(count, current)));
  };
}));
function modulus(value, division) {
  var remainder = value % division;
  return remainder < 0 ? remainder + division : remainder;
}

// node_modules/antd-mobile/es/components/swiper/index.js
var swiper_default = attachPropertiesToComponent(Swiper, {
  Item: SwiperItem
});

// node_modules/antd-mobile/es/components/switch/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/switch/switch.css";

// node_modules/antd-mobile/es/components/switch/switch.js
init_define_process_env();
var import_classnames44 = __toModule(require_classnames());
var import_react167 = __toModule(require_react());
import SpinIcon from "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/assets/spin.svg";
var classPrefix60 = "adm-switch";
var defaultProps42 = {
  defaultChecked: false
};
var Switch = function Switch2(p) {
  var _classNames;
  var props = mergeProps(defaultProps42, p);
  var disabled = props.disabled || props.loading || false;
  var _usePropsValue = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  }), checked = _usePropsValue[0], setChecked = _usePropsValue[1];
  return withNativeProps(props, import_react167.default.createElement("label", {
    className: (0, import_classnames44.default)(classPrefix60, (_classNames = {}, _classNames[classPrefix60 + "-checked"] = checked, _classNames[classPrefix60 + "-disabled"] = disabled, _classNames))
  }, import_react167.default.createElement("input", {
    type: "checkbox",
    checked,
    onChange: function onChange(e) {
      disabled || setChecked(e.target.checked);
    },
    disabled
  }), import_react167.default.createElement("div", {
    className: classPrefix60 + "-checkbox"
  }, import_react167.default.createElement("div", {
    className: classPrefix60 + "-handle"
  }, props.disabled || props.loading && import_react167.default.createElement("img", {
    src: SpinIcon,
    className: classPrefix60 + "-icon"
  })), import_react167.default.createElement("div", {
    className: classPrefix60 + "-inner"
  }, checked ? props.checkedText : props.uncheckedText))));
};

// node_modules/antd-mobile/es/components/switch/index.js
var switch_default = Switch;

// node_modules/antd-mobile/es/components/tab-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/tab-bar/tab-bar.css";

// node_modules/antd-mobile/es/components/tab-bar/tab-bar.js
init_define_process_env();
var import_react168 = __toModule(require_react());
var import_classnames45 = __toModule(require_classnames());
var TabBarItem = function TabBarItem2() {
  return null;
};
var TabBar = function TabBar2(props) {
  var _a;
  var firstActiveKey = null;
  var items = [];
  import_react168.default.Children.forEach(props.children, function(child, index) {
    if (!import_react168.default.isValidElement(child))
      return;
    var key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    items.push(child);
  });
  var _usePropsValue = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: props.onChange
  }), activeKey = _usePropsValue[0], setActiveKey = _usePropsValue[1];
  return withNativeProps(props, import_react168.default.createElement("div", {
    className: "adm-tab-bar"
  }, items.map(function(item) {
    var active = item.key === activeKey;
    function renderContent() {
      var iconElement = item.props.icon && import_react168.default.createElement("div", {
        className: "adm-tab-bar-item-icon"
      }, typeof item.props.icon === "function" ? item.props.icon(active) : item.props.icon);
      var titleElement = item.props.title && import_react168.default.createElement("div", {
        className: "adm-tab-bar-item-title"
      }, item.props.title);
      if (iconElement) {
        return import_react168.default.createElement(import_react168.default.Fragment, null, import_react168.default.createElement(badge_default, {
          content: item.props.badge,
          className: "adm-tab-bar-icon-badge"
        }, iconElement), titleElement);
      } else if (titleElement) {
        return import_react168.default.createElement(import_react168.default.Fragment, null, import_react168.default.createElement(badge_default, {
          content: item.props.badge,
          className: "adm-tab-bar-title-badge"
        }, titleElement));
      }
      return null;
    }
    return withNativeProps(item.props, import_react168.default.createElement("div", {
      key: item.key,
      onClick: function onClick() {
        var key = item.key;
        if (key === void 0 || key === null)
          return;
        setActiveKey(key.toString());
      },
      className: (0, import_classnames45.default)("adm-tab-bar-item", {
        "adm-tab-bar-item-active": active
      })
    }, renderContent()));
  })));
};

// node_modules/antd-mobile/es/components/tab-bar/index.js
var tab_bar_default = attachPropertiesToComponent(TabBar, {
  Item: TabBarItem
});

// node_modules/antd-mobile/es/components/tabs/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/tabs/tabs.css";

// node_modules/antd-mobile/es/components/tabs/tabs.js
init_define_process_env();
var import_react170 = __toModule(require_react());
var import_classnames46 = __toModule(require_classnames());

// node_modules/antd-mobile/es/utils/use-mutation-effect.js
init_define_process_env();
var import_react169 = __toModule(require_react());
function useMutationEffect(effect, targetRef, options) {
  var fn = usePersistFn_default2(effect);
  (0, import_react169.useEffect)(function() {
    var observer = new MutationObserver(function() {
      fn();
    });
    if (!targetRef.current)
      return;
    observer.observe(targetRef.current, options);
    return function() {
      observer.disconnect();
    };
  }, [targetRef]);
}

// node_modules/antd-mobile/es/components/tabs/tabs.js
var classPrefix61 = "adm-tabs";
var TabPane = function TabPane2() {
  return null;
};
var Tabs = function Tabs2(props) {
  var _a;
  var tabListContainerRef = (0, import_react170.useRef)(null);
  var rootRef = (0, import_react170.useRef)(null);
  var keyToIndexRecord = {};
  var firstActiveKey = null;
  var panes = [];
  import_react170.default.Children.forEach(props.children, function(child, index) {
    if (!import_react170.default.isValidElement(child))
      return;
    var key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    keyToIndexRecord[key] = index;
    panes.push(child);
  });
  var _usePropsValue = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: props.onChange
  }), activeKey = _usePropsValue[0], setActiveKey = _usePropsValue[1];
  var _useSpring = useSpring(function() {
    return {
      x: 0,
      width: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }), _useSpring$ = _useSpring[0], x = _useSpring$.x, width = _useSpring$.width, api = _useSpring[1];
  var _useSpring2 = useSpring(function() {
    return {
      scrollLeft: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }), scrollLeft = _useSpring2[0].scrollLeft, scrollApi = _useSpring2[1];
  function animate(immediate) {
    if (immediate === void 0) {
      immediate = false;
    }
    var container = tabListContainerRef.current;
    if (!container)
      return;
    var activeIndex = keyToIndexRecord[activeKey];
    if (activeIndex === void 0)
      return;
    var activeTabWrapper = container.children.item(activeIndex);
    var activeTab = activeTabWrapper.children.item(0);
    var activeTabLeft = activeTab.offsetLeft;
    var activeTabWidth = activeTab.offsetWidth;
    var containerWidth = container.offsetWidth;
    var containerScrollWidth = container.scrollWidth;
    var containerScrollLeft = container.scrollLeft;
    var x2 = activeTabLeft;
    api.start({
      x: x2,
      width: activeTabWidth,
      immediate
    });
    var maxScrollDistance = containerScrollWidth - containerWidth;
    if (maxScrollDistance <= 0)
      return;
    var nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);
    scrollApi.start({
      scrollLeft: nextScrollLeft,
      from: {
        scrollLeft: containerScrollLeft
      },
      immediate
    });
  }
  (0, import_react170.useLayoutEffect)(function() {
    animate(true);
  }, []);
  useUpdateLayoutEffect_default(function() {
    animate();
  }, [activeKey]);
  useResizeEffect(function() {
    console.log("resize");
    animate(true);
  }, rootRef);
  useMutationEffect(function() {
    console.log("mutation");
    animate(true);
  }, tabListContainerRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  return withNativeProps(props, import_react170.default.createElement("div", {
    className: classPrefix61,
    ref: rootRef
  }, import_react170.default.createElement(animated.div, {
    className: classPrefix61 + "-tab-list",
    ref: tabListContainerRef,
    scrollLeft
  }, panes.map(function(pane) {
    var _classNames;
    return withNativeProps(pane.props, import_react170.default.createElement("div", {
      key: pane.key,
      className: classPrefix61 + "-tab-wrapper"
    }, import_react170.default.createElement("div", {
      onClick: function onClick() {
        var key = pane.key;
        if (key === void 0 || key === null) {
          return;
        }
        setActiveKey(key.toString());
      },
      className: (0, import_classnames46.default)(classPrefix61 + "-tab", (_classNames = {}, _classNames[classPrefix61 + "-tab-active"] = pane.key === activeKey, _classNames))
    }, pane.props.title)));
  }), import_react170.default.createElement(animated.div, {
    className: classPrefix61 + "-tab-line",
    style: {
      width,
      x
    }
  })), panes.map(function(pane) {
    if (pane.props.children === void 0) {
      return null;
    }
    if (pane.key === activeKey) {
      return import_react170.default.createElement("div", {
        key: pane.key,
        className: classPrefix61 + "-content"
      }, pane.props.children);
    }
    if (pane.props.forceRender) {
      return import_react170.default.createElement("div", {
        key: pane.key,
        style: {
          display: "none"
        }
      }, pane.props.children);
    }
    return null;
  })));
};

// node_modules/antd-mobile/es/components/tabs/index.js
var tabs_default = attachPropertiesToComponent(Tabs, {
  TabPane
});

// node_modules/antd-mobile/es/components/tag/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/tag/tag.css";

// node_modules/antd-mobile/es/components/tag/tag.js
init_define_process_env();
var import_react171 = __toModule(require_react());
var import_classnames47 = __toModule(require_classnames());
var classPrefix62 = "adm-tag";
var colorRecord3 = {
  "default": "#666666",
  primary: "var(--adm-color-primary, #1677ff)",
  success: "var(--adm-color-success, #00b578)",
  warning: "var(--adm-color-warning, #ff8f1f)",
  danger: "var(--adm-color-danger, #ff3141)"
};
var defaultProps43 = {
  color: "default",
  fill: "solid",
  round: false
};
var Tag = function Tag2(p) {
  var _classNames;
  var _a;
  var props = mergeProps(defaultProps43, p);
  var color = (_a = colorRecord3[props.color]) !== null && _a !== void 0 ? _a : props.color;
  var style = {
    "--color": color
  };
  return withNativeProps(props, import_react171.default.createElement("span", {
    style,
    className: (0, import_classnames47.default)(classPrefix62, (_classNames = {}, _classNames[classPrefix62 + "-round"] = props.round, _classNames[classPrefix62 + "-outline"] = props.fill === "outline", _classNames))
  }, props.children));
};

// node_modules/antd-mobile/es/components/tag/index.js
var tag_default = Tag;

// node_modules/antd-mobile/es/components/text-area/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/text-area/text-area.css";

// node_modules/antd-mobile/es/components/text-area/text-area.js
init_define_process_env();
var import_react172 = __toModule(require_react());
var import_classnames48 = __toModule(require_classnames());
var __rest5 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var classPrefix63 = "adm-text-area";
var defaultProps44 = {
  rows: 2,
  showCount: false,
  autoSize: false,
  defaultValue: ""
};
var TextArea = (0, import_react172.forwardRef)(function(p, ref) {
  var props = mergeProps(defaultProps44, p);
  var className = props.className, style = props.style, outerDefaultValue = props.defaultValue, outerValue = props.value, outerOnChange = props.onChange, rows = props.rows, autoSize = props.autoSize, showCount = props.showCount, textAreaProps = __rest5(props, ["className", "style", "defaultValue", "value", "onChange", "rows", "autoSize", "showCount"]);
  var _usePropsValue = usePropsValue(props), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var nativeTextAreaRef = (0, import_react172.useRef)(null);
  (0, import_react172.useImperativeHandle)(ref, function() {
    return {
      clear: function clear2() {
        setValue2("");
      },
      focus: function focus() {
        var _a;
        (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur() {
        var _a;
        (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      }
    };
  });
  (0, import_react172.useEffect)(function() {
    if (!autoSize)
      return;
    var textArea = nativeTextAreaRef.current;
    if (!textArea)
      return;
    textArea.style.height = "auto";
    var height = textArea.scrollHeight;
    if (typeof autoSize === "object") {
      var computedStyle = window.getComputedStyle(textArea);
      var lineHeight = parseFloat(computedStyle.lineHeight);
      if (autoSize.minRows) {
        height = Math.max(height, autoSize.minRows * lineHeight);
      }
      if (autoSize.maxRows) {
        height = Math.min(height, autoSize.maxRows * lineHeight);
      }
    }
    textArea.style.height = height + "px";
  }, [value, autoSize]);
  var count;
  if (typeof showCount === "function") {
    count = showCount(value.length, props.maxLength);
  } else if (showCount) {
    count = import_react172.default.createElement("div", {
      className: classPrefix63 + "-count"
    }, props.maxLength === void 0 ? value.length : value.length + "/" + props.maxLength);
  }
  return import_react172.default.createElement("div", {
    className: (0, import_classnames48.default)(classPrefix63 + "-wrapper", className),
    style
  }, import_react172.default.createElement("textarea", Object.assign({
    ref: nativeTextAreaRef
  }, textAreaProps, {
    className: classPrefix63,
    rows,
    value,
    onChange: function onChange(e) {
      setValue2(e.target.value);
    },
    onFocus: function onFocus(e) {
      var _a;
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onBlur: function onBlur(e) {
      var _a;
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    id: props.id
  })), count);
});
TextArea.defaultProps = defaultProps44;

// node_modules/antd-mobile/es/components/text-area/index.js
var text_area_default = TextArea;

// node_modules/antd-mobile/es/components/toast/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/toast/toast.css";

// node_modules/antd-mobile/es/components/toast/methods.js
init_define_process_env();
var import_react174 = __toModule(require_react());
var import_react_dom4 = __toModule(require_react_dom());

// node_modules/antd-mobile/es/components/toast/toast.js
init_define_process_env();
var import_react173 = __toModule(require_react());
var import_classnames49 = __toModule(require_classnames());
var classPrefix64 = "adm-toast";
var defaultProps45 = {
  maskClickable: true,
  stopPropagation: ["click"]
};
var InternalToast = function InternalToast2(p) {
  var props = mergeProps(defaultProps45, p);
  var maskClickable = props.maskClickable, content = props.content, icon = props.icon, position = props.position;
  var iconElement = (0, import_react173.useMemo)(function() {
    if (icon === null || icon === void 0)
      return null;
    switch (icon) {
      case "success":
        return import_react173.default.createElement(CheckOutline_default, null);
      case "fail":
        return import_react173.default.createElement(CloseOutline_default, null);
      case "loading":
        return import_react173.default.createElement(loading_default, {
          color: "white",
          className: classPrefix64 + "-loading"
        });
      default:
        return icon;
    }
  }, [icon]);
  var top = (0, import_react173.useMemo)(function() {
    switch (position) {
      case "top":
        return "20%";
      case "bottom":
        return "80%";
      default:
        return "50%";
    }
  }, [position]);
  return import_react173.default.createElement(mask_default, {
    visible: props.visible,
    destroyOnClose: true,
    opacity: 0,
    disableBodyScroll: !maskClickable,
    getContainer: props.getContainer,
    afterClose: props.afterClose,
    style: Object.assign({
      pointerEvents: maskClickable ? "none" : "auto"
    }, props.maskStyle),
    className: (0, import_classnames49.default)(classPrefix64 + "-mask", props.maskClassName),
    stopPropagation: props.stopPropagation
  }, import_react173.default.createElement("div", {
    style: {
      top
    },
    className: (0, import_classnames49.default)(classPrefix64 + "-wrap", icon ? classPrefix64 + "-wrap-icon" : classPrefix64 + "-wrap-text")
  }, iconElement && import_react173.default.createElement("div", {
    className: classPrefix64 + "-icon"
  }, iconElement), content));
};

// node_modules/antd-mobile/es/components/toast/methods.js
var containers = [];
function unmount(container) {
  var unmountResult = import_react_dom4.default.unmountComponentAtNode(container);
  if (unmountResult && container.parentNode) {
    container.parentNode.removeChild(container);
  }
}
var defaultProps46 = {
  duration: 2e3
};
function show2(p) {
  var props = mergeProps(defaultProps46, typeof p === "string" ? {
    content: p
  } : p);
  var timer = 0;
  var _props$getContainer = props.getContainer, getContainer2 = _props$getContainer === void 0 ? function() {
    return document.body;
  } : _props$getContainer;
  var container = document.createElement("div");
  var bodyContainer = resolveContainer(getContainer2);
  bodyContainer.appendChild(container);
  clear();
  containers.push(container);
  var TempToast = function TempToast2() {
    var _useState = (0, import_react174.useState)(true), visible = _useState[0], setVisible = _useState[1];
    (0, import_react174.useEffect)(function() {
      return function() {
        var _a;
        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
      };
    }, []);
    (0, import_react174.useEffect)(function() {
      if (props.duration === 0) {
        return;
      }
      timer = window.setTimeout(function() {
        setVisible(false);
      }, props.duration);
      return function() {
        window.clearTimeout(timer);
      };
    }, []);
    return import_react174.default.createElement(InternalToast, Object.assign({}, props, {
      getContainer: function getContainer3() {
        return container;
      },
      visible,
      afterClose: function afterClose() {
        unmount(container);
      }
    }));
  };
  import_react_dom4.default.render(import_react174.default.createElement(TempToast, null), container);
}
function clear() {
  while (true) {
    var container = containers.pop();
    if (!container)
      break;
    unmount(container);
  }
}

// node_modules/antd-mobile/es/components/toast/index.js
var Toast = {
  show: show2,
  clear
};
var toast_default = Toast;

// node_modules/antd-mobile/es/components/tree-select/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/tree-select/tree-select.css";

// node_modules/antd-mobile/es/components/tree-select/tree-select.js
init_define_process_env();
var import_classnames50 = __toModule(require_classnames());
var import_react175 = __toModule(require_react());

// node_modules/antd-mobile/es/utils/tree.js
init_define_process_env();
function getTreeDeep(treeData, childrenName) {
  if (childrenName === void 0) {
    childrenName = "children";
  }
  var walker = function walker2(tree) {
    var deep = 0;
    tree.forEach(function(item) {
      if (item[childrenName]) {
        deep = Math.max(deep, walker2(item[childrenName]) + 1);
      } else {
        deep = Math.max(deep, 1);
      }
    });
    return deep;
  };
  return walker(treeData);
}

// node_modules/antd-mobile/es/components/tree-select/tree-select.js
var classPrefix65 = "adm-tree-select";
var TreeSelect = withDefaultProps({
  options: [],
  fieldNames: {},
  defaultValue: []
})(function(props) {
  var labelName = props.fieldNames.label || "label";
  var valueName = props.fieldNames.value || "value";
  var childrenName = props.fieldNames.children || "children";
  var _usePropsValue = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue
  }), value = _usePropsValue[0], setValue2 = _usePropsValue[1];
  var _useMemo = (0, import_react175.useMemo)(function() {
    var deep2 = getTreeDeep(props.options, childrenName);
    var optionsMap2 = new Map();
    var optionsParentMap2 = new Map();
    function traverse(current, children) {
      children.forEach(function(item) {
        optionsParentMap2.set(item[valueName], current);
        optionsMap2.set(item[valueName], item);
        if (item[childrenName]) {
          traverse(item, item[childrenName]);
        }
      });
    }
    traverse(void 0, props.options);
    return [deep2, optionsMap2, optionsParentMap2];
  }, [props.options]), deep = _useMemo[0], optionsMap = _useMemo[1], optionsParentMap = _useMemo[2];
  var onItemSelect = function onItemSelect2(node) {
    var _a;
    var parentNodes = [];
    var current = node;
    while (current) {
      parentNodes.unshift(current);
      var next = optionsParentMap.get(current[valueName]);
      current = next;
    }
    var values = parentNodes.map(function(i) {
      return i[valueName];
    });
    setValue2(values);
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, values, {
      options: parentNodes
    });
  };
  var renderItems = function renderItems2(columnOptions, index) {
    if (columnOptions === void 0) {
      columnOptions = [];
    }
    return columnOptions.map(function(item) {
      var _classNames;
      var isActive = item[valueName] === value[index];
      return import_react175.default.createElement("div", {
        key: item[valueName],
        className: (0, import_classnames50.default)(classPrefix65 + "-item", (_classNames = {}, _classNames[classPrefix65 + "-item-active"] = isActive, _classNames)),
        onClick: function onClick() {
          if (!isActive) {
            onItemSelect(item);
          }
        }
      }, item[labelName]);
    });
  };
  var renderColumns = function renderColumns2() {
    var _a;
    var columns = [];
    for (var i = 0; i < deep; i++) {
      var width = 100 / deep + "%";
      if (deep === 2 && i === 0) {
        width = "33.33%";
      }
      if (deep === 2 && i === 1) {
        width = "66.67%";
      }
      var column = import_react175.default.createElement("div", {
        key: i,
        className: (0, import_classnames50.default)(classPrefix65 + "-column"),
        style: {
          width
        }
      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(value[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));
      columns.push(column);
    }
    return columns;
  };
  return withNativeProps(props, import_react175.default.createElement("div", {
    className: classPrefix65
  }, renderColumns()));
});

// node_modules/antd-mobile/es/components/tree-select/multiple.js
init_define_process_env();
var import_classnames51 = __toModule(require_classnames());
var import_react176 = __toModule(require_react());
var classPrefix66 = "adm-tree-select-multiple";
var Multiple = withDefaultProps({
  options: [],
  fieldNames: {},
  allSelectText: [],
  defaultExpandKeys: [],
  defaultValue: []
})(function(props) {
  (0, import_react176.useEffect)(function() {
    devWarning("TreeSelect", "TreeSelect.Multiple has been deprecated.");
  }, []);
  var labelName = props.fieldNames.label || "label";
  var valueName = props.fieldNames.value || "value";
  var childrenName = props.fieldNames.children || "children";
  var _usePropsValue = usePropsValue({
    value: props.expandKeys,
    defaultValue: props.defaultExpandKeys
  }), expandKeys = _usePropsValue[0], setExpandKeys = _usePropsValue[1];
  var _usePropsValue2 = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue
  }), value = _usePropsValue2[0], setValue2 = _usePropsValue2[1];
  var getLeafKeys = function getLeafKeys2(option) {
    var keys = [];
    var walker = function walker2(op) {
      var _a;
      if (!op) {
        return;
      }
      if ((_a = op[childrenName]) === null || _a === void 0 ? void 0 : _a.length) {
        op[childrenName].forEach(function(i) {
          return walker2(i);
        });
      } else {
        keys.push(op[valueName]);
      }
    };
    walker(option);
    return keys;
  };
  var _useMemo = (0, import_react176.useMemo)(function() {
    var deep2 = getTreeDeep(props.options, childrenName);
    var optionsMap2 = new Map();
    var optionsParentMap2 = new Map();
    function traverse(current, children) {
      children.forEach(function(item) {
        optionsParentMap2.set(item[valueName], current);
        optionsMap2.set(item[valueName], item);
        if (item[childrenName]) {
          traverse(item, item[childrenName]);
        }
      });
    }
    traverse(void 0, props.options);
    return [deep2, optionsMap2, optionsParentMap2];
  }, [props.options]), deep = _useMemo[0], optionsMap = _useMemo[1], optionsParentMap = _useMemo[2];
  var allSelectedLeafKeys = (0, import_react176.useMemo)(function() {
    var leafKeys = [];
    value.forEach(function(v) {
      var option = optionsMap.get(v);
      leafKeys = leafKeys.concat(getLeafKeys(option));
    });
    return leafKeys;
  }, [value, optionsMap]);
  var dotMap = (0, import_react176.useMemo)(function() {
    var map = new Map();
    var walker = function walker2(key) {
      var parentOption = optionsParentMap.get(key);
      if (!parentOption) {
        return;
      }
      map.set(parentOption[valueName], true);
      walker2(parentOption[valueName]);
    };
    allSelectedLeafKeys.forEach(function(key) {
      map.set(key, true);
      walker(key);
    });
    return map;
  }, [optionsParentMap, value]);
  var onChange = function onChange2(targetKeys) {
    var _a;
    var groupKeys = [].concat(targetKeys);
    var unusedKeys = [];
    var walker = function walker2(keys) {
      keys.forEach(function(key) {
        var _a2;
        if (unusedKeys.includes(key)) {
          return;
        }
        var parent = optionsParentMap.get(key);
        if (!parent) {
          return;
        }
        var childrenKeys = ((_a2 = parent[childrenName]) === null || _a2 === void 0 ? void 0 : _a2.map(function(i2) {
          return i2[valueName];
        })) || [];
        if (childrenKeys.every(function(i2) {
          return groupKeys.includes(i2);
        })) {
          groupKeys.push(parent[valueName]);
          unusedKeys = unusedKeys.concat(childrenKeys);
        }
      });
    };
    for (var i = 0; i < deep; i++) {
      walker(groupKeys);
    }
    groupKeys = groupKeys.filter(function(i2) {
      return !unusedKeys.includes(i2);
    });
    var groupOptions = groupKeys.map(function(i2) {
      return optionsMap.get(i2);
    });
    setValue2(groupKeys);
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, groupKeys, groupOptions);
  };
  var onItemSelect = function onItemSelect2(option) {
    var _a;
    var parentNodes = [];
    var current = option;
    while (current) {
      parentNodes.unshift(current);
      var next = optionsParentMap.get(current[valueName]);
      current = next;
    }
    var keys = parentNodes.map(function(i) {
      return i[valueName];
    });
    setExpandKeys(keys);
    (_a = props.onExpand) === null || _a === void 0 ? void 0 : _a.call(props, keys, parentNodes);
  };
  var renderSelectAllItem = function renderSelectAllItem2(columnOptions, index) {
    var _a;
    var text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];
    if (!text) {
      return;
    }
    var currentLeafKeys = [];
    columnOptions.forEach(function(option) {
      currentLeafKeys = currentLeafKeys.concat(getLeafKeys(option));
    });
    var allSelected = currentLeafKeys.every(function(i) {
      return allSelectedLeafKeys.includes(i);
    });
    return import_react176.default.createElement("div", {
      onClick: function onClick() {
        if (allSelected) {
          onChange(allSelectedLeafKeys.filter(function(i) {
            return !currentLeafKeys.includes(i);
          }));
        } else {
          onChange(allSelectedLeafKeys.concat(currentLeafKeys));
        }
      },
      className: classPrefix66 + "-item"
    }, text);
  };
  var renderSelectAllLeafItem = function renderSelectAllLeafItem2(columnOptions, index) {
    var _a;
    var text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];
    if (!text) {
      return;
    }
    var currentLeafKeys = columnOptions.map(function(i) {
      return i[valueName];
    });
    var allSelected = currentLeafKeys.every(function(i) {
      return allSelectedLeafKeys.includes(i);
    });
    var halfSelected = allSelected ? false : currentLeafKeys.some(function(i) {
      return allSelectedLeafKeys.includes(i);
    });
    return import_react176.default.createElement("div", {
      onClick: function onClick() {
        if (allSelected) {
          onChange(allSelectedLeafKeys.filter(function(i) {
            return !currentLeafKeys.includes(i);
          }));
        } else {
          onChange(allSelectedLeafKeys.concat(currentLeafKeys));
        }
      },
      className: (0, import_classnames51.default)(classPrefix66 + "-item", classPrefix66 + "-item-leaf")
    }, import_react176.default.createElement(checkbox_default, {
      className: classPrefix66 + "-item-checkbox",
      checked: allSelected,
      indeterminate: halfSelected
    }), text);
  };
  var renderItem = function renderItem2(option) {
    var _classNames;
    var isExpand = expandKeys.includes(option[valueName]);
    return import_react176.default.createElement("div", {
      key: option[valueName],
      onClick: function onClick() {
        if (!isExpand) {
          onItemSelect(option);
        }
      },
      className: (0, import_classnames51.default)(classPrefix66 + "-item", (_classNames = {}, _classNames[classPrefix66 + "-item-expand"] = isExpand, _classNames))
    }, option[labelName], !!dotMap.get(option[valueName]) && import_react176.default.createElement("div", {
      className: classPrefix66 + "-dot"
    }));
  };
  var renderLeafItem = function renderLeafItem2(option) {
    var isSelected = allSelectedLeafKeys.includes(option[valueName]);
    return import_react176.default.createElement("div", {
      key: option[valueName],
      onClick: function onClick() {
        if (isSelected) {
          onChange(allSelectedLeafKeys.filter(function(val) {
            return val !== option[valueName];
          }));
        } else {
          onChange([].concat(allSelectedLeafKeys, [option[valueName]]));
        }
      },
      className: (0, import_classnames51.default)(classPrefix66 + "-item", classPrefix66 + "-item-leaf")
    }, import_react176.default.createElement(checkbox_default, {
      className: classPrefix66 + "-item-checkbox",
      checked: isSelected
    }), option[labelName]);
  };
  var renderItems = function renderItems2(columnOptions, index) {
    if (columnOptions === void 0) {
      columnOptions = [];
    }
    if (columnOptions.length === 0) {
      return;
    }
    var isLeaf = deep === index + 1;
    if (isLeaf) {
      return import_react176.default.createElement(import_react176.default.Fragment, null, renderSelectAllLeafItem(columnOptions, index), columnOptions.map(function(option) {
        return renderLeafItem(option);
      }));
    }
    return import_react176.default.createElement(import_react176.default.Fragment, null, renderSelectAllItem(columnOptions, index), columnOptions.map(function(option) {
      return renderItem(option);
    }));
  };
  var renderColumns = function renderColumns2() {
    var _a;
    var columns = [];
    for (var i = 0; i < deep; i++) {
      var width = 100 / deep + "%";
      if (deep === 2 && i === 0) {
        width = "33.33%";
      }
      if (deep === 2 && i === 1) {
        width = "66.67%";
      }
      var column = import_react176.default.createElement("div", {
        key: i,
        className: (0, import_classnames51.default)(classPrefix66 + "-column"),
        style: {
          width
        }
      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(expandKeys[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));
      columns.push(column);
    }
    return columns;
  };
  return withNativeProps(props, import_react176.default.createElement("div", {
    className: classPrefix66
  }, renderColumns()));
});

// node_modules/antd-mobile/es/components/tree-select/index.js
var tree_select_default = attachPropertiesToComponent(TreeSelect, {
  Multiple
});

// node_modules/antd-mobile/es/components/water-mark/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/water-mark/water-mark.css";

// node_modules/antd-mobile/es/components/water-mark/water-mark.js
init_define_process_env();
var import_classnames52 = __toModule(require_classnames());
var import_react177 = __toModule(require_react());
var classPrefix67 = "adm-water-mark";
var defaultProps47 = {
  fullPage: true
};
var WaterMark = function WaterMark2(p) {
  var _classNames;
  var props = mergeProps(defaultProps47, p);
  var _props$zIndex = props.zIndex, zIndex = _props$zIndex === void 0 ? 2e3 : _props$zIndex, _props$gapX = props.gapX, gapX = _props$gapX === void 0 ? 24 : _props$gapX, _props$gapY = props.gapY, gapY = _props$gapY === void 0 ? 48 : _props$gapY, _props$width = props.width, width = _props$width === void 0 ? 120 : _props$width, _props$height = props.height, height = _props$height === void 0 ? 64 : _props$height, _props$rotate = props.rotate, rotate = _props$rotate === void 0 ? -22 : _props$rotate, image = props.image, _props$imageWidth = props.imageWidth, imageWidth = _props$imageWidth === void 0 ? 120 : _props$imageWidth, _props$imageHeight = props.imageHeight, imageHeight = _props$imageHeight === void 0 ? 64 : _props$imageHeight, content = props.content, _props$fontStyle = props.fontStyle, fontStyle = _props$fontStyle === void 0 ? "normal" : _props$fontStyle, _props$fontWeight = props.fontWeight, fontWeight = _props$fontWeight === void 0 ? "normal" : _props$fontWeight, _props$fontColor = props.fontColor, fontColor = _props$fontColor === void 0 ? "rgba(0,0,0,.15)" : _props$fontColor, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize, _props$fontFamily = props.fontFamily, fontFamily = _props$fontFamily === void 0 ? "sans-serif" : _props$fontFamily;
  var _useState = (0, import_react177.useState)(""), base64Url = _useState[0], setBase64Url = _useState[1];
  (0, import_react177.useEffect)(function() {
    var canvas = document.createElement("canvas");
    var ratio = window.devicePixelRatio;
    var ctx2 = canvas.getContext("2d");
    var canvasWidth = (gapX + width) * ratio + "px";
    var canvasHeight = (gapY + height) * ratio + "px";
    var markWidth = width * ratio;
    var markHeight = height * ratio;
    canvas.setAttribute("width", canvasWidth);
    canvas.setAttribute("height", canvasHeight);
    if (ctx2) {
      if (image) {
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = image;
        img.onload = function() {
          ctx2.drawImage(img, -imageWidth * ratio / 2, -imageHeight * ratio / 2, imageWidth * ratio, imageHeight * ratio);
          ctx2.restore();
          setBase64Url(canvas.toDataURL());
        };
      } else if (content) {
        ctx2.textBaseline = "middle";
        ctx2.textAlign = "center";
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        var markSize = Number(fontSize) * ratio;
        ctx2.font = fontStyle + " normal " + fontWeight + " " + markSize + "px/" + markHeight + "px " + fontFamily;
        ctx2.fillStyle = fontColor;
        ctx2.fillText(content, 0, 0);
        ctx2.restore();
        setBase64Url(canvas.toDataURL());
      }
    } else {
      throw new Error("\u5F53\u524D\u73AF\u5883\u4E0D\u652F\u6301Canvas");
    }
  }, [gapX, gapY, rotate, fontStyle, fontWeight, width, height, fontFamily, fontColor, image, content, fontSize]);
  return withNativeProps(props, import_react177.default.createElement("div", {
    className: (0, import_classnames52.default)(classPrefix67, (_classNames = {}, _classNames[classPrefix67 + "-full-page"] = props.fullPage, _classNames)),
    style: {
      zIndex,
      backgroundSize: gapX + width + "px",
      backgroundImage: "url('" + base64Url + "')"
    }
  }));
};

// node_modules/antd-mobile/es/components/water-mark/index.js
var water_mark_default = WaterMark;

// node_modules/antd-mobile/es/components/number-keyboard/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.css";

// node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.js
init_define_process_env();
var import_react178 = __toModule(require_react());
var import_classnames53 = __toModule(require_classnames());

// node_modules/antd-mobile/es/utils/shuffle.js
init_define_process_env();
function shuffle(array4) {
  var result = [].concat(array4);
  for (var i = result.length; i > 0; i--) {
    var j = Math.floor(Math.random() * i);
    var _ref = [result[j], result[i - 1]];
    result[i - 1] = _ref[0];
    result[j] = _ref[1];
  }
  return result;
}

// node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.js
var classPrefix68 = "adm-number-keyboard";
var defaultProps48 = {
  defaultVisible: false,
  randomOrder: false,
  showCloseButton: true,
  confirmText: null,
  closeOnBlur: true,
  closeOnConfirm: true
};
var NumberKeyboard = function NumberKeyboard2(p) {
  var props = mergeProps(defaultProps48, p);
  var title = props.title, getContainer2 = props.getContainer, confirmText = props.confirmText, customKey = props.customKey, randomOrder = props.randomOrder, showCloseButton = props.showCloseButton, onInput = props.onInput, onDelete = props.onDelete;
  var _usePropsValue = usePropsValue({
    value: props.visible,
    defaultValue: props.defaultVisible,
    onChange: function onChange(val) {
      var _a;
      if (!val) {
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
      }
    }
  }), visible = _usePropsValue[0], setVisible = _usePropsValue[1];
  var keyboardRef = (0, import_react178.useRef)(null);
  useClickAway(function() {
    var _a;
    if (props.closeOnBlur && visible) {
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);
      setVisible(false);
    }
  }, keyboardRef);
  var keys = (0, import_react178.useMemo)(function() {
    var defaultKeys = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
    var keyList = randomOrder ? shuffle(defaultKeys) : defaultKeys;
    keyList.push("0");
    if (confirmText) {
      keyList.push(customKey || "");
    } else {
      keyList.splice(9, 0, customKey || "");
      keyList.push("BACKSPACE");
    }
    return keyList;
  }, [customKey, confirmText, randomOrder, randomOrder && visible]);
  var onKeyPress = function onKeyPress2(key) {
    var _a;
    switch (key) {
      case "BACKSPACE":
        onDelete === null || onDelete === void 0 ? void 0 : onDelete();
        break;
      case "OK":
        (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);
        if (props.closeOnConfirm) {
          setVisible(false);
        }
        break;
      default:
        onInput === null || onInput === void 0 ? void 0 : onInput(key);
        break;
    }
  };
  var renderHeader = function renderHeader2() {
    if (!showCloseButton && !title)
      return null;
    return import_react178.default.createElement("div", {
      className: (0, import_classnames53.default)(classPrefix68 + "-header", {
        "with-title": !!title
      })
    }, title && import_react178.default.createElement("div", {
      className: classPrefix68 + "-title"
    }, title), showCloseButton && import_react178.default.createElement("span", {
      className: classPrefix68 + "-header-close-button",
      onClick: function onClick() {
        setVisible(false);
      },
      role: "button",
      title: "CLOSE"
    }, import_react178.default.createElement(DownOutline_default, null)));
  };
  var renderKey = function renderKey2(key, index) {
    var isNumberKey = /^\d$/.test(key);
    var className = (0, import_classnames53.default)(classPrefix68 + "-key", {
      "number-key": isNumberKey,
      "sign-key": !isNumberKey && key,
      "mid-key": index === 9 && !!confirmText
    });
    return import_react178.default.createElement("div", {
      key,
      className,
      onClick: function onClick() {
        return key && onKeyPress(key);
      },
      title: key,
      role: "button"
    }, key === "BACKSPACE" ? import_react178.default.createElement(TextDeletionOutline_default, null) : key);
  };
  return import_react178.default.createElement(popup_default, {
    visible,
    getContainer: getContainer2,
    mask: false,
    afterClose: props.afterClose,
    afterShow: props.afterShow,
    className: classPrefix68 + "-popup",
    stopPropagation: props.stopPropagation
  }, withNativeProps(props, import_react178.default.createElement("div", {
    ref: keyboardRef,
    className: classPrefix68
  }, renderHeader(), import_react178.default.createElement("div", {
    className: classPrefix68 + "-wrapper"
  }, import_react178.default.createElement("div", {
    className: (0, import_classnames53.default)(classPrefix68 + "-main", {
      "confirmed-style": !!confirmText
    })
  }, keys.map(renderKey)), !!confirmText && import_react178.default.createElement("div", {
    className: classPrefix68 + "-confirm"
  }, import_react178.default.createElement("div", {
    className: classPrefix68 + "-key extra-key bs-key",
    onClick: function onClick() {
      return onKeyPress("BACKSPACE");
    },
    title: "BACKSPACE",
    role: "button"
  }, import_react178.default.createElement(TextDeletionOutline_default, null)), import_react178.default.createElement("div", {
    className: classPrefix68 + "-key extra-key ok-key",
    onClick: function onClick() {
      return onKeyPress("OK");
    },
    role: "button"
  }, confirmText))))));
};

// node_modules/antd-mobile/es/components/number-keyboard/index.js
var number_keyboard_default = NumberKeyboard;

// node_modules/antd-mobile/es/components/side-bar/index.js
init_define_process_env();
import "/Users/wangkeyu/workspace/h5-react-redux-vite/node_modules/antd-mobile/es/components/side-bar/side-bar.css";

// node_modules/antd-mobile/es/components/side-bar/side-bar.js
init_define_process_env();
var import_react179 = __toModule(require_react());
var import_classnames54 = __toModule(require_classnames());
var classPrefix69 = "adm-side-bar";
var SideBarItem = function SideBarItem2() {
  return null;
};
var SideBar = function SideBar2(props) {
  var _a;
  var firstActiveKey = null;
  var items = [];
  import_react179.default.Children.forEach(props.children, function(child, index) {
    if (!import_react179.default.isValidElement(child))
      return;
    var key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    items.push(child);
  });
  var _usePropsValue = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: props.onChange
  }), activeKey = _usePropsValue[0], setActiveKey = _usePropsValue[1];
  return withNativeProps(props, import_react179.default.createElement("div", {
    className: (0, import_classnames54.default)(classPrefix69)
  }, items.map(function(item) {
    var _classNames;
    var active = item.key === activeKey;
    return withNativeProps(item.props, import_react179.default.createElement("div", {
      key: item.key,
      onClick: function onClick() {
        var key = item.key;
        if (key === void 0 || key === null || item.props.disabled)
          return;
        setActiveKey(key.toString());
      },
      className: (0, import_classnames54.default)(classPrefix69 + "-item", (_classNames = {}, _classNames[classPrefix69 + "-item-active"] = active, _classNames[classPrefix69 + "-item-disabled"] = item.props.disabled, _classNames))
    }, import_react179.default.createElement(badge_default, {
      content: item.props.badge
    }, import_react179.default.createElement("div", {
      className: classPrefix69 + "-item-title"
    }, item.props.title))));
  })));
};

// node_modules/antd-mobile/es/components/side-bar/index.js
var side_bar_default = attachPropertiesToComponent(SideBar, {
  Item: SideBarItem
});
export {
  action_sheet_default as ActionSheet,
  badge_default as Badge,
  button_default as Button,
  card_default as Card,
  cascade_picker_default as CascadePicker,
  check_list_default as CheckList,
  checkbox_default as Checkbox,
  collapse_default as Collapse,
  config_provider_default as ConfigProvider,
  date_picker_default as DatePicker,
  desense_text_default as DesenseText,
  dialog_default as Dialog,
  divider_default as Divider,
  dropdown_default2 as Dropdown,
  ellipsis_default as Ellipsis,
  empty_default as Empty,
  error_block_default as ErrorBlock,
  floating_panel_default as FloatingPanel,
  form_default as Form,
  grid_default as Grid,
  image_default as Image,
  image_uploader_default as ImageUploader,
  image_viewer_default as ImageViewer,
  index_bar_default as IndexBar,
  infinite_scroll_default as InfiniteScroll,
  input_default as Input,
  list_default as List,
  loading_default as Loading,
  mask_default as Mask,
  nav_bar_default as NavBar,
  notice_bar_default as NoticeBar,
  number_keyboard_default as NumberKeyboard,
  page_indicator_default as PageIndicator,
  picker_default as Picker,
  picker_view_default as PickerView,
  popover_default as Popover,
  popup_default as Popup,
  progress_bar_default as ProgressBar,
  progress_circle_default as ProgressCircle,
  pull_to_refresh_default as PullToRefresh,
  radio_default as Radio,
  rate_default as Rate,
  result_default as Result,
  safe_area_default as SafeArea,
  search_default as Search,
  selector_default as Selector,
  side_bar_default as SideBar,
  slider_default as Slider,
  space_default as Space,
  stepper_default as Stepper,
  steps_default as Steps,
  swipe_action_default as SwipeAction,
  swiper_default as Swiper,
  switch_default as Switch,
  tab_bar_default as TabBar,
  tabs_default as Tabs,
  tag_default as Tag,
  text_area_default as TextArea,
  toast_default as Toast,
  tree_select_default as TreeSelect,
  water_mark_default as WaterMark,
  setDefaultConfig
};
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
/*!
* screenfull
* v5.1.0 - 2020-12-24
* (c) Sindre Sorhus; MIT License
*/
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=antd-mobile.js.map
