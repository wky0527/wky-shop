"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberKeyboard = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _antdMobileIcons = require("antd-mobile-icons");

var _withDefaultProps = require("../../utils/with-default-props");

var _shuffle = require("../../utils/shuffle");

var _popup = _interopRequireDefault(require("../popup"));

var _ahooks = require("ahooks");

var _useControllableValue = require("../../utils/use-controllable-value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var classPrefix = 'adm-number-keyboard';
var defaultProps = {
  defaultVisible: false,
  randomOrder: false,
  showCloseButton: true,
  confirmText: null,
  closeOnBlur: true,
  closeOnConfirm: true
};

var NumberKeyboard = function NumberKeyboard(p) {
  var props = (0, _withDefaultProps.mergeProps)(defaultProps, p);
  var title = props.title,
      getContainer = props.getContainer,
      confirmText = props.confirmText,
      customKey = props.customKey,
      randomOrder = props.randomOrder,
      showCloseButton = props.showCloseButton,
      onInput = props.onInput,
      onDelete = props.onDelete;

  var _useNewControllableVa = (0, _useControllableValue.useNewControllableValue)({
    value: props.visible,
    defaultValue: props.defaultVisible,
    onChange: function onChange(val) {
      var _a;

      if (!val) {
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
      }
    }
  }),
      visible = _useNewControllableVa[0],
      setVisible = _useNewControllableVa[1];

  var keyboardRef = (0, _react.useRef)(null);
  (0, _ahooks.useClickAway)(function () {
    var _a;

    if (props.closeOnBlur && visible) {
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);
      setVisible(false);
    }
  }, keyboardRef);
  var keys = (0, _react.useMemo)(function () {
    var defaultKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
    var keyList = randomOrder ? (0, _shuffle.shuffle)(defaultKeys) : defaultKeys;
    keyList.push('0');

    if (confirmText) {
      keyList.push(customKey || '');
    } else {
      keyList.splice(9, 0, customKey || '');
      keyList.push('BACKSPACE');
    }

    return keyList;
  }, [customKey, confirmText, randomOrder, randomOrder && visible]); // 点击键盘按键

  var onKeyPress = function onKeyPress(key) {
    var _a;

    switch (key) {
      case 'BACKSPACE':
        onDelete === null || onDelete === void 0 ? void 0 : onDelete();
        break;

      case 'OK':
        (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);

        if (props.closeOnConfirm) {
          setVisible(false);
        }

        break;

      default:
        onInput === null || onInput === void 0 ? void 0 : onInput(key);
        break;
    }
  }; // 渲染 title 和 close button


  var renderHeader = function renderHeader() {
    if (!showCloseButton && !title) return null;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _classnames["default"])(classPrefix + "-header", {
        'with-title': !!title
      })
    }, title && /*#__PURE__*/_react["default"].createElement("div", {
      className: classPrefix + "-title"
    }, title), showCloseButton && /*#__PURE__*/_react["default"].createElement("span", {
      className: classPrefix + "-header-close-button",
      onClick: function onClick() {
        setVisible(false);
      },
      role: 'button',
      title: 'CLOSE'
    }, /*#__PURE__*/_react["default"].createElement(_antdMobileIcons.DownOutline, null)));
  }; // 渲染基础键盘按键


  var renderKey = function renderKey(key, index) {
    var isNumberKey = /^\d$/.test(key);
    var className = (0, _classnames["default"])(classPrefix + "-key", {
      'number-key': isNumberKey,
      'sign-key': !isNumberKey && key,
      'mid-key': index === 9 && !!confirmText
    });
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: key,
      className: className,
      onClick: function onClick() {
        return key && onKeyPress(key);
      },
      title: key,
      role: 'button'
    }, key === 'BACKSPACE' ? /*#__PURE__*/_react["default"].createElement(_antdMobileIcons.TextDeletionOutline, null) : key);
  };

  return /*#__PURE__*/_react["default"].createElement(_popup["default"], {
    visible: visible,
    getContainer: getContainer,
    mask: false,
    afterClose: props.afterClose,
    afterShow: props.afterShow,
    className: classPrefix + "-popup"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    ref: keyboardRef,
    className: classPrefix
  }, renderHeader(), /*#__PURE__*/_react["default"].createElement("div", {
    className: classPrefix + "-wrapper"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])(classPrefix + "-main", {
      'confirmed-style': !!confirmText
    })
  }, keys.map(renderKey)), !!confirmText && /*#__PURE__*/_react["default"].createElement("div", {
    className: classPrefix + "-confirm"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classPrefix + "-key extra-key bs-key",
    onClick: function onClick() {
      return onKeyPress('BACKSPACE');
    },
    title: 'BACKSPACE',
    role: 'button'
  }, /*#__PURE__*/_react["default"].createElement(_antdMobileIcons.TextDeletionOutline, null)), /*#__PURE__*/_react["default"].createElement("div", {
    className: classPrefix + "-key extra-key ok-key",
    onClick: function onClick() {
      return onKeyPress('OK');
    },
    role: 'button'
  }, confirmText)))));
};

exports.NumberKeyboard = NumberKeyboard;