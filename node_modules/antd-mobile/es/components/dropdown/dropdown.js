import { useClickAway, useControllableValue } from 'ahooks';
import classNames from 'classnames';
import React, { cloneElement, useEffect, useRef, useState } from 'react';
import Popup from '../popup';
import Item, { ItemChildrenWrap } from './item';
import { withNativeProps } from '../../utils/native-props';
var classPrefix = "adm-dropdown";

var Dropdown = function Dropdown(props) {
  var _classNames;

  var _useControllableValue = useControllableValue(props, {
    valuePropName: 'activeKey'
  }),
      value = _useControllableValue[0],
      onChange = _useControllableValue[1];

  var navRef = useRef(null);
  var contentRef = useRef(null); // 点击外部区域，关闭

  useClickAway(function () {
    onChange(undefined);
  }, [navRef, contentRef]); // 计算 navs 的 top 值

  var _useState = useState(),
      top = _useState[0],
      setTop = _useState[1];

  var containerRef = useRef(null);
  useEffect(function () {
    if (value) {
      var rect = containerRef.current.getBoundingClientRect();
      setTop(rect.bottom);
    }
  }, [value]);

  var changeActive = function changeActive(key) {
    if (value === key) {
      onChange(undefined);
    } else {
      onChange(key);
    }
  };

  var popupForceRender = false;
  var items = [];
  var navs = React.Children.map(props.children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      var childProps = Object.assign(Object.assign({}, child.props), {
        onClick: function onClick() {
          changeActive(child.key);
        },
        active: child.key === value
      });
      items.push(child);
      if (child.props.forceRender) popupForceRender = true;
      return /*#__PURE__*/cloneElement(child, childProps);
    } else {
      return child;
    }
  });
  return withNativeProps(props, /*#__PURE__*/React.createElement("div", {
    className: classNames(classPrefix, (_classNames = {}, _classNames[classPrefix + "-open"] = !!value, _classNames)),
    ref: containerRef
  }, /*#__PURE__*/React.createElement("div", {
    className: classPrefix + "-nav",
    ref: navRef
  }, navs), /*#__PURE__*/React.createElement(Popup, {
    visible: !!value,
    position: 'top',
    className: classPrefix + "-popup",
    maskClassName: classPrefix + "-popup-mask",
    bodyClassName: classPrefix + "-popup-body",
    style: {
      top: top
    },
    forceRender: popupForceRender
  }, /*#__PURE__*/React.createElement("div", {
    ref: contentRef
  }, items.map(function (item) {
    var isActive = item.key === value;
    return /*#__PURE__*/React.createElement(ItemChildrenWrap, {
      key: item.key,
      active: isActive,
      forceRender: item.props.forceRender,
      destroyOnClose: item.props.destroyOnClose
    }, item.props.children);
  })))));
};

Dropdown.Item = Item;
export default Dropdown;