import React, { useState, useRef, useLayoutEffect, memo } from 'react';
import classNames from 'classnames';
import { CloseOutline, SoundOutline } from 'antd-mobile-icons';
import { useUpdateLayoutEffect } from 'ahooks';
import { mergeProps } from '../../utils/with-default-props';
import { withNativeProps } from '../../utils/native-props';
var classPrefix = "adm-notice-bar";
var defaultProps = {
  color: 'default',
  delay: 2000,
  speed: 50
};
export var NoticeBar = /*#__PURE__*/memo(function (p) {
  var props = mergeProps(defaultProps, p);
  var containerRef = useRef(null);
  var textRef = useRef(null);

  var _useState = useState(0),
      key = _useState[0],
      setKey = _useState[1];

  var _useState2 = useState(true),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var speed = props.speed;
  useLayoutEffect(function () {
    var container = containerRef.current;
    var text = textRef.current;
    if (!container || !text) return;
    if (container.offsetWidth >= text.offsetWidth) return; // 需要滚动

    var timeout = window.setTimeout(function () {
      var text = textRef.current; // 开始滚动

      if (text) {
        text.style.transitionDuration = Math.round(text.offsetWidth / speed) + "s";
        text.style.transform = "translateX(-" + text.offsetWidth + "px)";
      }
    }, props.delay);
    return function () {
      window.clearTimeout(timeout);
    };
  }, []);
  useUpdateLayoutEffect(function () {
    var container = containerRef.current;
    var text = textRef.current;
    if (!container || !text) return;
    if (container.offsetWidth >= text.offsetWidth) return;
    text.style.transform = "translateX(" + container.offsetWidth + "px)";
    text.style.transitionDuration = Math.round((container.offsetWidth + text.offsetWidth) / speed) + "s";
    text.style.transform = "translateX(-" + text.offsetWidth + "px)";
  }, [key]);
  if (!visible) return null;
  return withNativeProps(props, /*#__PURE__*/React.createElement("div", {
    className: classNames(classPrefix, classPrefix + "-" + props.color)
  }, /*#__PURE__*/React.createElement("span", {
    className: classPrefix + "-left"
  }, 'icon' in props ? props.icon : /*#__PURE__*/React.createElement(SoundOutline, null)), /*#__PURE__*/React.createElement("span", {
    ref: containerRef,
    className: classPrefix + "-content"
  }, /*#__PURE__*/React.createElement("span", {
    onTransitionEnd: function onTransitionEnd() {
      return setKey(function (k) {
        return k + 1;
      });
    },
    key: key,
    ref: textRef,
    className: classPrefix + "-content-inner"
  }, props.content)), (props.closeable || props.extra) && /*#__PURE__*/React.createElement("span", {
    className: classPrefix + "-right"
  }, props.extra, props.closeable && /*#__PURE__*/React.createElement(CloseOutline, {
    onClick: function onClick() {
      var _a;

      setVisible(false);
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }))));
});