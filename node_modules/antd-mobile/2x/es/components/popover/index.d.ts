/// <reference types="react" />
import './popover.less';
export type { Action } from './pop-menu';
declare const _default: import("react").ForwardRefExoticComponent<{
    getContainer?: (() => HTMLElement) | undefined;
    destroyOnHide?: boolean | undefined;
    children: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
    mode?: "dark" | "light" | undefined;
    trigger?: "click" | undefined;
    placement: "left" | "right" | "bottom" | "top" | "topLeft" | "topRight" | "bottomLeft" | "bottomRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
} & Pick<import("rc-tooltip/lib/Tooltip").TooltipProps, "visible" | "zIndex" | "align" | "defaultVisible" | "onVisibleChange" | "overlayStyle" | "overlayClassName"> & {
    content: import("react").ReactNode;
} & import("react").RefAttributes<import("./popover").PopoverRef>> & {
    Menu: <T extends import("./pop-menu").Action = import("./pop-menu").Action>(props: {
        getContainer?: (() => HTMLElement) | undefined;
        destroyOnHide?: boolean | undefined;
        children: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
        mode?: "dark" | "light" | undefined;
        trigger?: "click" | undefined;
        placement: "left" | "right" | "bottom" | "top" | "topLeft" | "topRight" | "bottomLeft" | "bottomRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    } & Pick<import("rc-tooltip/lib/Tooltip").TooltipProps, "visible" | "zIndex" | "align" | "defaultVisible" | "onVisibleChange" | "overlayStyle" | "overlayClassName"> & {
        actions: T[];
        onAction?: ((text: T) => void) | undefined;
    } & {
        ref?: ((instance: import("./popover").PopoverRef | null) => void) | import("react").RefObject<import("./popover").PopoverRef> | null | undefined;
    }) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
};
export default _default;
