var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { useMemo } from 'react';
import Picker from '../picker';
export var CascadePicker = function CascadePicker(props) {
  var options = props.options,
      pickerProps = __rest(props, ["options"]);

  var _useMemo = useMemo(function () {
    var depth = 1;
    var subOptionsRecord = {};

    function traverse(option, currentDepth) {
      if (!option.children) {
        return;
      }

      subOptionsRecord[option.value] = option.children;
      var nextDepth = currentDepth + 1;

      if (nextDepth > depth) {
        depth = nextDepth;
      }

      option.children.forEach(function (option) {
        traverse(option, nextDepth);
      });
    }

    options.forEach(function (option) {
      traverse(option, 1);
    });
    return {
      depth: depth,
      subOptionsRecord: subOptionsRecord
    };
  }, [options]),
      depth = _useMemo.depth,
      subOptionsRecord = _useMemo.subOptionsRecord;

  function columns(value) {
    var columns = [];
    columns.push(options.map(function (option) {
      return {
        label: option.label,
        value: option.value
      };
    }));

    for (var i = 0; i < depth - 1; i++) {
      var x = value[i];
      var subOptions = subOptionsRecord[x];

      if (!subOptions) {
        columns.push([]);
      } else {
        columns.push(subOptions.map(function (option) {
          return {
            label: option.label,
            value: option.value
          };
        }));
      }
    }

    return columns;
  }

  return /*#__PURE__*/React.createElement(Picker, Object.assign({}, pickerProps, {
    columns: columns
  }));
};