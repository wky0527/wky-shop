import React, { useRef, useLayoutEffect } from 'react';
import classNames from 'classnames';
import { useSpring, animated } from '@react-spring/web';
import { withNativeProps } from '../../utils/native-props';
import { usePropsValue } from '../../utils/use-props-value';
import { bound } from '../../utils/bound';
import { useUpdateLayoutEffect } from 'ahooks';
import { useMutationEffect } from '../../utils/use-mutation-effect';
import { useResizeEffect } from '../../utils/use-resize-effect';
var classPrefix = "adm-tabs";
export var TabPane = function TabPane() {
  return null;
};
export var Tabs = function Tabs(props) {
  var _a;

  var tabListContainerRef = useRef(null);
  var rootRef = useRef(null);
  var keyToIndexRecord = {};
  var firstActiveKey = null;
  var panes = [];
  React.Children.forEach(props.children, function (child, index) {
    if (! /*#__PURE__*/React.isValidElement(child)) return;
    var key = child.key;
    if (typeof key !== 'string') return;

    if (index === 0) {
      firstActiveKey = key;
    }

    keyToIndexRecord[key] = index;
    panes.push(child);
  });

  var _usePropsValue = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: props.onChange
  }),
      activeKey = _usePropsValue[0],
      setActiveKey = _usePropsValue[1];

  var _useSpring = useSpring(function () {
    return {
      x: 0,
      width: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }),
      _useSpring$ = _useSpring[0],
      x = _useSpring$.x,
      width = _useSpring$.width,
      api = _useSpring[1];

  var _useSpring2 = useSpring(function () {
    return {
      scrollLeft: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }),
      scrollLeft = _useSpring2[0].scrollLeft,
      scrollApi = _useSpring2[1];

  function animate(immediate) {
    if (immediate === void 0) {
      immediate = false;
    }

    var container = tabListContainerRef.current;
    if (!container) return;
    var activeIndex = keyToIndexRecord[activeKey];
    if (activeIndex === undefined) return;
    var activeTabWrapper = container.children.item(activeIndex);
    var activeTab = activeTabWrapper.children.item(0);
    var activeTabLeft = activeTab.offsetLeft;
    var activeTabWidth = activeTab.offsetWidth;
    var containerWidth = container.offsetWidth;
    var containerScrollWidth = container.scrollWidth;
    var containerScrollLeft = container.scrollLeft;
    var x = activeTabLeft;
    api.start({
      x: x,
      width: activeTabWidth,
      immediate: immediate
    });
    var maxScrollDistance = containerScrollWidth - containerWidth;
    if (maxScrollDistance <= 0) return;
    var nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);
    scrollApi.start({
      scrollLeft: nextScrollLeft,
      from: {
        scrollLeft: containerScrollLeft
      },
      immediate: immediate
    });
  }

  useLayoutEffect(function () {
    animate(true);
  }, []);
  useUpdateLayoutEffect(function () {
    animate();
  }, [activeKey]);
  useResizeEffect(function () {
    console.log('resize');
    animate(true);
  }, rootRef);
  useMutationEffect(function () {
    console.log('mutation');
    animate(true);
  }, tabListContainerRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  return withNativeProps(props, /*#__PURE__*/React.createElement("div", {
    className: classPrefix,
    ref: rootRef
  }, /*#__PURE__*/React.createElement(animated.div, {
    className: classPrefix + "-tab-list",
    ref: tabListContainerRef,
    scrollLeft: scrollLeft
  }, panes.map(function (pane) {
    var _classNames;

    return withNativeProps(pane.props, /*#__PURE__*/React.createElement("div", {
      key: pane.key,
      className: classPrefix + "-tab-wrapper"
    }, /*#__PURE__*/React.createElement("div", {
      onClick: function onClick() {
        var key = pane.key;

        if (key === undefined || key === null) {
          return;
        }

        setActiveKey(key.toString());
      },
      className: classNames(classPrefix + "-tab", (_classNames = {}, _classNames[classPrefix + "-tab-active"] = pane.key === activeKey, _classNames))
    }, pane.props.title)));
  }), /*#__PURE__*/React.createElement(animated.div, {
    className: classPrefix + "-tab-line",
    style: {
      width: width,
      x: x
    }
  })), panes.map(function (pane) {
    if (pane.props.children === undefined) {
      return null;
    }

    if (pane.key === activeKey) {
      return /*#__PURE__*/React.createElement("div", {
        key: pane.key,
        className: classPrefix + "-content"
      }, pane.props.children);
    }

    if (pane.props.forceRender) {
      return /*#__PURE__*/React.createElement("div", {
        key: pane.key,
        style: {
          display: 'none'
        }
      }, pane.props.children);
    }

    return null;
  })));
};