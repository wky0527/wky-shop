import React, { useState, useEffect, useMemo } from 'react';
import Popup from '../popup';
import { mergeProps, withDefaultProps } from '../../utils/with-default-props';
import { withNativeProps } from '../../utils/native-props';
import { useNewControllableValue } from '../../utils/use-controllable-value';
import PickerView from '../picker-view';
import { useColumns } from '../picker-view/use-columns';
var classPrefix = "adm-picker";
var defaultProps = {
  defaultValue: []
};
export var Picker = withDefaultProps({
  confirmText: '确定',
  cancelText: '取消'
})(function (p) {
  var props = mergeProps(defaultProps, p);
  var controllable = useNewControllableValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: props.onConfirm
  });
  var value = controllable[0];
  var setValue = controllable[1];

  var _useState = useState(value),
      innerValue = _useState[0],
      setInnerValue = _useState[1];

  useEffect(function () {
    if (!props.visible) {
      setInnerValue(value);
    }
  }, [props.visible]);
  useEffect(function () {
    if (!props.visible) {
      setInnerValue(value);
    }
  }, [value]);
  var innerColumns = useColumns(props.columns, innerValue);
  var columns = useColumns(props.columns, value);
  var pickerElement = withNativeProps(props, /*#__PURE__*/React.createElement("div", {
    className: classPrefix
  }, /*#__PURE__*/React.createElement("div", {
    className: classPrefix + "-header"
  }, /*#__PURE__*/React.createElement("a", {
    className: classPrefix + "-header-button",
    onClick: function onClick() {
      var _a, _b;

      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);
      (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
    }
  }, props.cancelText), /*#__PURE__*/React.createElement("div", {
    className: classPrefix + "-header-title"
  }, props.title), /*#__PURE__*/React.createElement("a", {
    className: classPrefix + "-header-button",
    onClick: function onClick() {
      var _a;

      setValue(innerValue);
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, props.confirmText)), /*#__PURE__*/React.createElement("div", {
    className: classPrefix + "-body"
  }, /*#__PURE__*/React.createElement(PickerView, {
    columns: innerColumns,
    value: innerValue,
    onChange: function onChange(val) {
      var _a;

      setInnerValue(val);

      if (props.visible) {
        (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, val);
      }
    }
  }))));
  var popupElement = /*#__PURE__*/React.createElement(Popup, {
    visible: props.visible,
    position: 'bottom',
    onMaskClick: function onMaskClick() {
      var _a, _b;

      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);
      (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
    },
    getContainer: props.getContainer,
    destroyOnClose: true,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick
  }, pickerElement);
  var items = useMemo(function () {
    return value.map(function (v, index) {
      var _a;

      var column = columns[index];
      if (!column) return null;
      return (_a = column.find(function (item) {
        return item.value === v;
      })) !== null && _a !== void 0 ? _a : null;
    });
  }, [value, columns]);
  var childrenResult = useMemo(function () {
    var _a;

    return (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, items);
  }, [props.children, items]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, popupElement, childrenResult);
});