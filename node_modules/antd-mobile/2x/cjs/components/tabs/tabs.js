"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = exports.TabPane = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _web = require("@react-spring/web");

var _nativeProps = require("../../utils/native-props");

var _usePropsValue2 = require("../../utils/use-props-value");

var _bound = require("../../utils/bound");

var _ahooks = require("ahooks");

var _useMutationEffect = require("../../utils/use-mutation-effect");

var _useResizeEffect = require("../../utils/use-resize-effect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var classPrefix = "adm-tabs";

var TabPane = function TabPane() {
  return null;
};

exports.TabPane = TabPane;

var Tabs = function Tabs(props) {
  var _a;

  var tabListContainerRef = (0, _react.useRef)(null);
  var rootRef = (0, _react.useRef)(null);
  var keyToIndexRecord = {};
  var firstActiveKey = null;
  var panes = [];

  _react["default"].Children.forEach(props.children, function (child, index) {
    if (! /*#__PURE__*/_react["default"].isValidElement(child)) return;
    var key = child.key;
    if (typeof key !== 'string') return;

    if (index === 0) {
      firstActiveKey = key;
    }

    keyToIndexRecord[key] = index;
    panes.push(child);
  });

  var _usePropsValue = (0, _usePropsValue2.usePropsValue)({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: props.onChange
  }),
      activeKey = _usePropsValue[0],
      setActiveKey = _usePropsValue[1];

  var _useSpring = (0, _web.useSpring)(function () {
    return {
      x: 0,
      width: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }),
      _useSpring$ = _useSpring[0],
      x = _useSpring$.x,
      width = _useSpring$.width,
      api = _useSpring[1];

  var _useSpring2 = (0, _web.useSpring)(function () {
    return {
      scrollLeft: 0,
      config: {
        tension: 300,
        clamp: true
      }
    };
  }),
      scrollLeft = _useSpring2[0].scrollLeft,
      scrollApi = _useSpring2[1];

  function animate(immediate) {
    if (immediate === void 0) {
      immediate = false;
    }

    var container = tabListContainerRef.current;
    if (!container) return;
    var activeIndex = keyToIndexRecord[activeKey];
    if (activeIndex === undefined) return;
    var activeTabWrapper = container.children.item(activeIndex);
    var activeTab = activeTabWrapper.children.item(0);
    var activeTabLeft = activeTab.offsetLeft;
    var activeTabWidth = activeTab.offsetWidth;
    var containerWidth = container.offsetWidth;
    var containerScrollWidth = container.scrollWidth;
    var containerScrollLeft = container.scrollLeft;
    var x = activeTabLeft;
    api.start({
      x: x,
      width: activeTabWidth,
      immediate: immediate
    });
    var maxScrollDistance = containerScrollWidth - containerWidth;
    if (maxScrollDistance <= 0) return;
    var nextScrollLeft = (0, _bound.bound)(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);
    scrollApi.start({
      scrollLeft: nextScrollLeft,
      from: {
        scrollLeft: containerScrollLeft
      },
      immediate: immediate
    });
  }

  (0, _react.useLayoutEffect)(function () {
    animate(true);
  }, []);
  (0, _ahooks.useUpdateLayoutEffect)(function () {
    animate();
  }, [activeKey]);
  (0, _useResizeEffect.useResizeEffect)(function () {
    console.log('resize');
    animate(true);
  }, rootRef);
  (0, _useMutationEffect.useMutationEffect)(function () {
    console.log('mutation');
    animate(true);
  }, tabListContainerRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  return (0, _nativeProps.withNativeProps)(props, /*#__PURE__*/_react["default"].createElement("div", {
    className: classPrefix,
    ref: rootRef
  }, /*#__PURE__*/_react["default"].createElement(_web.animated.div, {
    className: classPrefix + "-tab-list",
    ref: tabListContainerRef,
    scrollLeft: scrollLeft
  }, panes.map(function (pane) {
    var _classNames;

    return (0, _nativeProps.withNativeProps)(pane.props, /*#__PURE__*/_react["default"].createElement("div", {
      key: pane.key,
      className: classPrefix + "-tab-wrapper"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      onClick: function onClick() {
        var key = pane.key;

        if (key === undefined || key === null) {
          return;
        }

        setActiveKey(key.toString());
      },
      className: (0, _classnames["default"])(classPrefix + "-tab", (_classNames = {}, _classNames[classPrefix + "-tab-active"] = pane.key === activeKey, _classNames))
    }, pane.props.title)));
  }), /*#__PURE__*/_react["default"].createElement(_web.animated.div, {
    className: classPrefix + "-tab-line",
    style: {
      width: width,
      x: x
    }
  })), panes.map(function (pane) {
    if (pane.props.children === undefined) {
      return null;
    }

    if (pane.key === activeKey) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        key: pane.key,
        className: classPrefix + "-content"
      }, pane.props.children);
    }

    if (pane.props.forceRender) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        key: pane.key,
        style: {
          display: 'none'
        }
      }, pane.props.children);
    }

    return null;
  })));
};

exports.Tabs = Tabs;