"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slides = void 0;

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@use-gesture/react");

var _web = require("@react-spring/web");

var _slide = require("./slide");

var _convertPx = require("../../utils/convert-px");

var _bound = require("../../utils/bound");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var classPrefix = "adm-image-viewer";

var Slides = function Slides(props) {
  var slideWidth = window.innerWidth + (0, _convertPx.convertPx)(16);

  var _useSpring = (0, _web.useSpring)(function () {
    return {
      x: -props.defaultIndex * slideWidth,
      config: {
        tension: 300
      }
    };
  }),
      x = _useSpring[0].x,
      api = _useSpring[1];

  var count = props.images.length;
  var bind = (0, _react2.useDrag)(function (state) {
    var _state$offset = state.offset,
        offsetX = _state$offset[0];

    if (state.last) {
      var index = (0, _bound.bound)(-Math.round((offsetX + state.velocity[0] * state.direction[0] * 100) / slideWidth), 0, count - 1);
      api.start({
        x: index * -slideWidth
      });
    } else {
      api.start({
        x: offsetX
      });
    }
  }, {
    from: function from() {
      return [x.get(), 0];
    },
    bounds: function bounds() {
      var index = -Math.round(x.get() / slideWidth);
      return {
        right: Math.max(index - 1, 0) * -slideWidth,
        left: Math.min(index + 1, count - 1) * -slideWidth
      };
    },
    rubberband: true,
    axis: 'x'
  });
  return /*#__PURE__*/_react["default"].createElement("div", Object.assign({
    className: classPrefix + "-slides"
  }, bind()), /*#__PURE__*/_react["default"].createElement(_web.animated.div, {
    className: classPrefix + "-indicator"
  }, x.to(function (v) {
    var index = -Math.round(v / slideWidth);
    return index + 1 + " / " + count;
  })), /*#__PURE__*/_react["default"].createElement(_web.animated.div, {
    className: classPrefix + "-slides-inner",
    style: {
      x: x
    }
  }, props.images.map(function (image) {
    return /*#__PURE__*/_react["default"].createElement(_slide.Slide, {
      key: image,
      image: image,
      onTap: props.onTap,
      maxZoom: props.maxZoom,
      onZoomChange: function onZoomChange(zoom) {
        if (zoom !== 1) {
          var index = -Math.round(x.get() / slideWidth);
          api.start({
            x: index * -slideWidth
          });
        }
      }
    });
  })));
};

exports.Slides = Slides;