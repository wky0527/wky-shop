"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0;

var _react = _interopRequireWildcard(require("react"));

var _picker = _interopRequireDefault(require("../picker"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _generateIntArray = require("../../utils/generate-int-array");

var _nativeProps = require("../../utils/native-props");

var _withDefaultProps = require("../../utils/with-default-props");

var _useControllableValue = require("../../utils/use-controllable-value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var precisionRankRecord = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
var thisYear = new Date().getFullYear();
var defaultProps = {
  min: new Date(new Date().setFullYear(thisYear - 10)),
  max: new Date(new Date().setFullYear(thisYear + 10)),
  precision: 'day'
};
var DatePicker = (0, _withDefaultProps.withDefaultProps)(defaultProps)(function (props) {
  var _a;

  var _useNewControllableVa = (0, _useControllableValue.useNewControllableValue)({
    value: props.value,
    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null,
    onChange: props.onConfirm
  }),
      value = _useNewControllableVa[0],
      setValue = _useNewControllableVa[1];

  function columns(selected) {
    var ret = [];
    var minYear = props.min.getFullYear();
    var minMonth = props.min.getMonth() + 1;
    var minDay = props.min.getDate();
    var minHour = props.min.getHours();
    var minMinute = props.min.getMinutes();
    var minSecond = props.min.getSeconds();
    var maxYear = props.max.getFullYear();
    var maxMonth = props.max.getMonth() + 1;
    var maxDay = props.max.getDate();
    var maxHour = props.max.getHours();
    var maxMinute = props.max.getMinutes();
    var maxSecond = props.max.getSeconds();
    var rank = precisionRankRecord[props.precision];

    if (rank >= precisionRankRecord.year) {
      var years = [];

      for (var i = minYear; i <= maxYear; i++) {
        years.push(i.toString());
      }

      ret.push(years);
    }

    var firstDayInSelectedMonth = (0, _dayjs["default"])(convertStringArrayToDate([selected[0], selected[1], '1']));
    var selectedYear = parseInt(selected[0]);
    var selectedMonth = parseInt(selected[1]);
    var selectedDay = parseInt(selected[2]);
    var selectedHour = parseInt(selected[3]);
    var selectedMinute = parseInt(selected[4]);
    var isInMinYear = selectedYear === minYear;
    var isInMaxYear = selectedYear === maxYear;
    var isInMinMonth = isInMinYear && selectedMonth === minMonth;
    var isInMaxMonth = isInMaxYear && selectedMonth === maxMonth;
    var isInMinDay = isInMinMonth && selectedDay === minDay;
    var isInMaxDay = isInMaxMonth && selectedDay === maxDay;
    var isInMinHour = isInMinDay && selectedHour === minHour;
    var isInMaxHour = isInMaxDay && selectedHour === maxHour;
    var isInMinMinute = isInMinHour && selectedMinute === minMinute;
    var isInMaxMinute = isInMaxHour && selectedMinute === maxMinute;

    if (rank >= precisionRankRecord.month) {
      var lower = isInMinYear ? minMonth : 1;
      var upper = isInMaxYear ? maxMonth : 12;
      var months = (0, _generateIntArray.generateIntArray)(lower, upper);
      ret.push(months.map(function (v) {
        return v.toString();
      }));
    }

    if (rank >= precisionRankRecord.day) {
      var _lower = isInMinMonth ? minDay : 1;

      var _upper = isInMaxMonth ? maxDay : firstDayInSelectedMonth.daysInMonth();

      var days = (0, _generateIntArray.generateIntArray)(_lower, _upper);
      ret.push(days.map(function (v) {
        return v.toString();
      }));
    }

    if (rank >= precisionRankRecord.hour) {
      var _lower2 = isInMinDay ? minHour : 0;

      var _upper2 = isInMaxDay ? maxHour : 23;

      var hours = (0, _generateIntArray.generateIntArray)(_lower2, _upper2);
      ret.push(hours.map(function (v) {
        return {
          label: ('0' + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }

    if (rank >= precisionRankRecord.minute) {
      var _lower3 = isInMinHour ? minMinute : 0;

      var _upper3 = isInMaxHour ? maxMinute : 59;

      var minutes = (0, _generateIntArray.generateIntArray)(_lower3, _upper3);
      ret.push(minutes.map(function (v) {
        return {
          label: ('0' + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }

    if (rank >= precisionRankRecord.second) {
      var _lower4 = isInMinMinute ? minSecond : 0;

      var _upper4 = isInMaxMinute ? maxSecond : 59;

      var seconds = (0, _generateIntArray.generateIntArray)(_lower4, _upper4);
      ret.push(seconds.map(function (v) {
        return {
          label: ('0' + v.toString()).slice(-2),
          value: v.toString()
        };
      }));
    }

    return ret;
  }

  var pickerValue = (0, _react.useMemo)(function () {
    return convertDateToStringArray(value);
  }, [value]);
  var onConfirm = (0, _react.useCallback)(function (val) {
    setValue(convertStringArrayToDate(val));
  }, [setValue]);
  var onSelect = (0, _react.useCallback)(function (val) {
    var _a;

    var date = convertStringArrayToDate(val);

    if (date) {
      (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, date);
    }
  }, [props.onSelect]);
  return (0, _nativeProps.withNativeProps)(props, /*#__PURE__*/_react["default"].createElement(_picker["default"], {
    columns: columns,
    value: pickerValue,
    onCancel: props.onCancel,
    onClose: props.onClose,
    visible: props.visible,
    confirmText: props.confirmText,
    cancelText: props.cancelText,
    onConfirm: onConfirm,
    onSelect: onSelect,
    getContainer: props.getContainer,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    title: props.title
  }, function (items) {
    var _a;

    return (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, convertStringArrayToDate(items.map(function (item) {
      return item === null || item === void 0 ? void 0 : item.value;
    })));
  }));
});
exports.DatePicker = DatePicker;

function convertDateToStringArray(date) {
  if (!date) return [];
  return [date.getFullYear().toString(), (date.getMonth() + 1).toString(), date.getDate().toString(), date.getHours().toString(), date.getMinutes().toString(), date.getSeconds().toString()];
}

function convertStringArrayToDate(value) {
  var _a, _b, _c, _d, _e, _f;

  if (value.length === 0) return null;
  var yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : '1900';
  var monthString = (_b = value[1]) !== null && _b !== void 0 ? _b : '1';
  var dateString = (_c = value[2]) !== null && _c !== void 0 ? _c : '1';
  var hourString = (_d = value[3]) !== null && _d !== void 0 ? _d : '0';
  var minuteString = (_e = value[4]) !== null && _e !== void 0 ? _e : '0';
  var secondString = (_f = value[5]) !== null && _f !== void 0 ? _f : '0';
  return new Date(parseInt(yearString), parseInt(monthString) - 1, parseInt(dateString), parseInt(hourString), parseInt(minuteString), parseInt(secondString));
}